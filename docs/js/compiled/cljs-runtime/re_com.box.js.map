{"version":3,"sources":["re_com/box.cljs"],"mappings":"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","names":["re-com.box/debug","re-com.box/flex-child-style","size","vec__34004","cljs.core.nth","split-size","clojure.string.split","clojure.string/trim","split-count","cljs.core/count","_","js/Error","cljs.core/contains?","size-only","cljs.core._EQ_","cljs.core/first","split-size-only","num","units","pass-through?","grow-ratio?","grow","shrink","basis","flex","and__4221__auto__","re-com.box/flex-flow-style","flex-flow","re-com.box/justify-style","justify","js","G__34012","cljs.core/Keyword","re-com.box/align-style","attribute","align","attribute-wk","cljs.core/name","cljs.core.keyword","as","G__34013","re-com.box/scroll-style","scroll","G__34014","var_args","args__4835__auto__","len__4829__auto__","i__4830__auto__","argseq__4836__auto__","cljs.core/IndexedSeq","re-com.box/box-base","p__34016","map__34017","cljs.core/--destructure-map","cljs.core.get","seq34015","self__4817__auto__","cljs.core/seq","h-scroll","v-scroll","width","height","min-width","min-height","max-width","max-height","align-self","margin","padding","border","l-border","r-border","t-border","b-border","radius","bk-color","child","class-name","class","style","attr","s","cljs.core.merge","re-com.box/gap-args-desc","cljs.core/string?","re-com.validate/css-style?","re-com.validate/html-attr?","re-com.box/gap","p__34019","map__34020","seq34018","args","js/goog.DEBUG","re_com.validate.validate_args","re-com.validate/extract-arg-data","re-com.box/line-args-desc","re-com.box/line","p__34022","map__34023","seq34021","color","re-com.box/h-box-args-desc","cljs.core/sequential?","re-com.validate/justify-style?","re-com.validate/justify-options-list","re-com.validate/align-style?","re-com.validate/align-options-list","re-com.box/h-box","p__34025","map__34026","seq34024","gap","children","gap-form","cljs.core.interpose","cljs.core.filter","cljs.core/identity","cljs.core.into","re-com.box/v-box-args-desc","re-com.box/v-box","p__34028","map__34029","seq34027","re-com.box/box-args-desc","re-com.validate/string-or-hiccup?","re-com.box/box","p__34031","map__34032","seq34030","re_com.box.box_base","re-com.box/scroller-args-desc","re-com.validate/scroll-style?","re-com.box/scroller","p__34034","map__34035","seq34033","not-v-or-h","re-com.box/border-args-desc","re-com.box/border","p__34037","map__34038","seq34036","no-border","cljs.core/every?","cljs.core/nil?","default-border"],"sourcesContent":["(ns re-com.box\n  (:require [clojure.string  :as    string]\n            [re-com.validate :refer [justify-style? justify-options-list align-style? align-options-list scroll-style?\n                                     scroll-options-list string-or-hiccup? css-style? html-attr?] :refer-macros [validate-args-macro]]))\n\n(def debug false)\n\n\n;; ------------------------------------------------------------------------------------\n;;  Private Helper functions\n;; ------------------------------------------------------------------------------------\n\n(defn flex-child-style\n  \"Determines the value for the 'flex' attribute (which has grow, shrink and basis), based on the :size parameter.\n   IMPORTANT: The term 'size' means width of the item in the case of flex-direction 'row' OR height of the item in the case of flex-direction 'column'.\n   Flex property explanation:\n    - grow    Integer ratio (used with other siblings) to determined how a flex item grows it's size if there is extra space to distribute. 0 for no growing.\n    - shrink  Integer ratio (used with other siblings) to determined how a flex item shrinks it's size if space needs to be removed. 0 for no shrinking.\n    - basis   Initial size (width, actually) of item before any growing or shrinking. Can be any size value, e.g. 60%, 100px, auto\n              Note: auto will cause the initial size to be calculated to take up as much space as possible, in conjunction with it's siblings :flex settings.\n   Supported values:\n    - initial            '0 1 auto'  - Use item's width/height for dimensions (or content dimensions if w/h not specifed). Never grow. Shrink (to min-size) if necessary.\n                                       Good for creating boxes with fixed maximum size, but that can shrink to a fixed smaller size (min-width/height) if space becomes tight.\n                                       NOTE: When using initial, you should also set a width/height value (depending on flex-direction) to specify it's default size\n                                             and an optional min-width/height value to specify the size it can shrink to.\n    - auto               '1 1 auto'  - Use item's width/height for dimensions. Grow if necessary. Shrink (to min-size) if necessary.\n                                       Good for creating really flexible boxes that will gobble as much available space as they are allowed or shrink as much as they are forced to.\n    - none               '0 0 auto'  - Use item's width/height for dimensions (or content dimensions if not specifed). Never grow. Never shrink.\n                                       Good for creating rigid boxes that stick to their width/height if specified, otherwise their content size.\n    - 100px              '0 0 100px' - Non flexible 100px size (in the flex direction) box.\n                                       Good for fixed headers/footers and side bars of an exact size.\n    - 60%                '60 1 0px'  - Set the item's size (it's width/height depending on flex-direction) to be 60% of the parent container's width/height.\n                                       NOTE: If you use this, then all siblings with percentage values must add up to 100%.\n    - 60                 '60 1 0px'  - Same as percentage above.\n    - grow shrink basis  'grow shrink basis' - If none of the above common valaues above meet your needs, this gives you precise control.\n   If number of words is not 1 or 3, an exception is thrown.\n   Reference: http://www.w3.org/TR/css3-flexbox/#flexibility\n   Diagram:   http://www.w3.org/TR/css3-flexbox/#flex-container\n   Regex101 testing: ^(initial|auto|none)|(\\\\d+)(px|%|em)|(\\\\d+)\\\\w(\\\\d+)\\\\w(.*) - remove double backslashes\"\n  [size]\n  ;; TODO: Could make initial/auto/none into keywords???\n  (let [split-size      (string/split (string/trim size) #\"\\s+\")                  ;; Split into words separated by whitespace\n        split-count     (count split-size)\n        _               (assert (contains? #{1 3} split-count) \"Must pass either 1 or 3 words to flex-child-style\")\n        size-only       (when (= split-count 1) (first split-size))         ;; Contains value when only one word passed (e.g. auto, 60px)\n        split-size-only (when size-only (string/split size-only #\"(\\d+)(.*)\")) ;; Split into number + string\n        [_ num units]   (when size-only split-size-only)                    ;; grab number and units\n        pass-through?   (nil? num)                                          ;; If we can't split, then we'll pass this straign through\n        grow-ratio?     (or (= units \"%\") (= units \"\") (nil? units))        ;; Determine case for using grow ratio\n        grow            (if grow-ratio? num \"0\")                            ;; Set grow based on percent or integer, otherwise no grow\n        shrink          (if grow-ratio? \"1\" \"0\")                            ;; If grow set, then set shrink to even shrinkage as well\n        basis           (if grow-ratio? \"0px\" size)                         ;; If grow set, then even growing, otherwise set basis size to the passed in size (e.g. 100px, 5em)\n        flex            (if (and size-only (not pass-through?))\n                          (str grow \" \" shrink \" \" basis)\n                          size)]\n    {:-webkit-flex flex\n             :flex flex}))\n\n\n(defn flex-flow-style\n  \"A cross-browser helper function to output flex-flow with all it's potential browser prefixes\"\n  [flex-flow]\n  {:-webkit-flex-flow flex-flow\n           :flex-flow flex-flow})\n\n(defn justify-style\n  \"Determines the value for the flex 'justify-content' attribute.\n   This parameter determines how children are aligned along the main axis.\n   The justify parameter is a keyword.\n   Reference: http://www.w3.org/TR/css3-flexbox/#justify-content-property\"\n  [justify]\n  (let [js (case justify\n             :start   \"flex-start\"\n             :end     \"flex-end\"\n             :center  \"center\"\n             :between \"space-between\"\n             :around  \"space-around\")]\n    {:-webkit-justify-content js\n             :justify-content js}))\n\n\n(defn align-style\n  \"Determines the value for the flex align type attributes.\n   This parameter determines how children are aligned on the cross axis.\n   The justify parameter is a keyword.\n   Reference: http://www.w3.org/TR/css3-flexbox/#align-items-property\"\n  [attribute align]\n  (let [attribute-wk (->> attribute name (str \"-webkit-\") keyword)\n        as           (case align\n                       :start    \"flex-start\"\n                       :end      \"flex-end\"\n                       :center   \"center\"\n                       :baseline \"baseline\"\n                       :stretch  \"stretch\")]\n    {attribute-wk as\n     attribute    as}))\n\n\n(defn scroll-style\n  \"Determines the value for the 'overflow' attribute.\n   The scroll parameter is a keyword.\n   Because we're translating scroll into overflow, the keyword doesn't appear to match the attribute value\"\n  [attribute scroll]\n  {attribute (case scroll\n                  :auto  \"auto\"\n                  :off   \"hidden\"\n                  :on    \"scroll\"\n                  :spill \"visible\")})\n\n\n;; ------------------------------------------------------------------------------------\n;;  Private Component: box-base (debug color: lightblue)\n;; ------------------------------------------------------------------------------------\n\n(defn- box-base\n  \"This should generally NOT be used as it is the basis for the box, scroller and border components\"\n  [& {:keys [size scroll h-scroll v-scroll width height min-width min-height max-width max-height justify align align-self\n             margin padding border l-border r-border t-border b-border radius bk-color child class-name class style attr]}]\n  (let [s (merge\n            (flex-flow-style \"inherit\")\n            (flex-child-style size)\n            (when scroll      (scroll-style   :overflow scroll))\n            (when h-scroll    (scroll-style   :overflow-x h-scroll))\n            (when v-scroll    (scroll-style   :overflow-y v-scroll))\n            (when width       {:width         width})\n            (when height      {:height        height})\n            (when min-width   {:min-width     min-width})\n            (when min-height  {:min-height    min-height})\n            (when max-width   {:max-width     max-width})\n            (when max-height  {:max-height    max-height})\n            (when justify     (justify-style  justify))\n            (when align       (align-style    :align-items align))\n            (when align-self  (align-style    :align-self align-self))\n            (when margin      {:margin        margin})       ;; margin and padding: \"all\" OR \"top&bottom right&left\" OR \"top right bottom left\"\n            (when padding     {:padding       padding})\n            (when border      {:border        border})\n            (when l-border    {:border-left   l-border})\n            (when r-border    {:border-right  r-border})\n            (when t-border    {:border-top    t-border})\n            (when b-border    {:border-bottom b-border})\n            (when radius      {:border-radius radius})\n            (if bk-color\n              {:background-color bk-color}\n              (if debug {:background-color \"lightblue\"} {}))\n            style)]\n    [:div\n     (merge\n       {:class (str class-name \"display-flex \" class) :style s}\n       attr)\n     child]))\n\n\n;; ------------------------------------------------------------------------------------\n;;  Component: gap (debug color: chocolate)\n;; ------------------------------------------------------------------------------------\n\n(def gap-args-desc\n  [{:name :size   :required true  :type \"string\"        :validate-fn string?    :description \"the length of the whitespace.  Typically, an absolute CSS length like 10px or 10em, but can be a stretchy proportional amount like 2\"}\n   {:name :width  :required false :type \"string\"        :validate-fn string?    :description \"a CSS width style\"}\n   {:name :height :required false :type \"string\"        :validate-fn string?    :description \"a CSS height style\"}\n   {:name :class  :required false :type \"string\"        :validate-fn string?    :description \"CSS class names, space separated\"}\n   {:name :style  :required false :type \"CSS style map\" :validate-fn css-style? :description \"CSS styles to add or override\"}\n   {:name :attr   :required false :type \"HTML attr map\" :validate-fn html-attr? :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed\"]}])\n\n(defn gap\n  \"Returns a component which produces a gap between children in a v-box/h-box along the main axis\"\n  [& {:keys [size width height class style attr]\n      :as   args}]\n  {:pre [(validate-args-macro gap-args-desc args \"gap\")]}\n  (let [s (merge\n            (when size   (flex-child-style size))\n            (when width  {:width width})\n            (when height {:height height})\n            (when debug  {:background-color \"chocolate\"})\n            style)]\n    [:div\n     (merge\n       {:class (str \"rc-gap \" class) :style s}\n       attr)]))\n\n\n;; ------------------------------------------------------------------------------------\n;;  Component: line\n;; ------------------------------------------------------------------------------------\n\n(def line-args-desc\n  [{:name :size  :required false :default \"1px\"       :type \"string\"        :validate-fn string?    :description \"a CSS style for the thickness of the line. Usually px, % or em\"}\n   {:name :color :required false :default \"lightgray\" :type \"string\"        :validate-fn string?    :description \"a CSS color\"}\n   {:name :class :required false                      :type \"string\"        :validate-fn string?    :description \"CSS class names, space separated\"}\n   {:name :style :required false                      :type \"CSS style map\" :validate-fn css-style? :description \"CSS styles to add or override\"}\n   {:name :attr  :required false                      :type \"HTML attr map\" :validate-fn html-attr? :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed\"]}])\n\n(defn line\n  \"Returns a component which produces a line between children in a v-box/h-box along the main axis.\n   Specify size in pixels and a stancard CSS color. Defaults to a 1px lightgray line\"\n  [& {:keys [size color class style attr]\n      :or   {size \"1px\" color \"lightgray\"}\n      :as   args}]\n  {:pre [(validate-args-macro line-args-desc args \"line\")]}\n  (let [s (merge\n            (flex-child-style (str \"0 0 \" size))\n            {:background-color color}\n            style)]\n    [:div\n     (merge\n       {:class (str \"rc-line \" class) :style s}\n       attr)]))\n\n\n;; ------------------------------------------------------------------------------------\n;;  Component: h-box (debug color: gold)\n;; ------------------------------------------------------------------------------------\n\n(def h-box-args-desc\n  [{:name :children   :required true                    :type \"vector\"        :validate-fn sequential?    :description \"a vector (or list) of components\"}\n   {:name :size       :required false :default \"none\"   :type \"string\"        :validate-fn string?        :description [:span \"equivalent to CSS style \" [:span.bold \"flex\"] \".\" [:br]  \"Examples: \" [:code \"initial\"] \", \" [:code \"auto\"] \", \" [:code \"none\"]\", \" [:code \"100px\"] \", \" [:code \"2\"] \" or a generic triple of \" [:code \"grow shrink basis\"]]}\n   {:name :width      :required false                   :type \"string\"        :validate-fn string?        :description \"a CSS width style\"}\n   {:name :height     :required false                   :type \"string\"        :validate-fn string?        :description \"a CSS height style\"}\n   {:name :min-width  :required false                   :type \"string\"        :validate-fn string?        :description \"a CSS width style. The minimum width to which the box can shrink\"}\n   {:name :min-height :required false                   :type \"string\"        :validate-fn string?        :description \"a CSS height style. The minimum height to which the box can shrink\"}\n   {:name :max-width  :required false                   :type \"string\"        :validate-fn string?        :description \"a CSS width style. The maximum width to which the box can grow\"}\n   {:name :max-height :required false                   :type \"string\"        :validate-fn string?        :description \"a CSS height style. The maximum height to which the box can grow\"}\n   {:name :justify    :required false :default :start   :type \"keyword\"       :validate-fn justify-style? :description [:span \"equivalent to CSS style \" [:span.bold \"justify-content\"] \".\" [:br] \"One of \" justify-options-list]}\n   {:name :align      :required false :default :stretch :type \"keyword\"       :validate-fn align-style?   :description [:span \"equivalent to CSS style \" [:span.bold \"align-items\"]  \".\" [:br] \" One of \" align-options-list]}\n   {:name :align-self :required false                   :type \"keyword\"       :validate-fn align-style?   :description [:span \"equivalent to CSS style \" [:span.bold \"align-self\"] \".\" [:br]  \"Used when a child must override the parent's align-items setting.\"]}\n   {:name :margin     :required false                   :type \"string\"        :validate-fn string?        :description \"a CSS margin style\"}\n   {:name :padding    :required false                   :type \"string\"        :validate-fn string?        :description \"a CSS padding style\"}\n   {:name :gap        :required false                   :type \"string\"        :validate-fn string?        :description \"the amount of whitespace to put between each child. Typically, an absolute CSS length like 10px or 10em, but can be a stretchy proportional amount like 2\"}\n   {:name :class      :required false                   :type \"string\"        :validate-fn string?        :description \"CSS class names, space separated\"}\n   {:name :style      :required false                   :type \"CSS style map\" :validate-fn css-style?     :description \"CSS styles to add or override\"}\n   {:name :attr       :required false                   :type \"HTML attr map\" :validate-fn html-attr?     :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed\"]}])\n\n(defn h-box\n  \"Returns hiccup which produces a horizontal box.\n   It's primary role is to act as a container for components and lays it's children from left to right.\n   By default, it also acts as a child under it's parent\"\n  [& {:keys [size width height min-width min-height max-width max-height justify align align-self margin padding gap children class style attr]\n      :or   {size \"none\" justify :start align :stretch}\n      :as   args}]\n  {:pre [(validate-args-macro h-box-args-desc args \"h-box\")]}\n  (let [s        (merge\n                   (flex-flow-style \"row nowrap\")\n                   (flex-child-style size)\n                   (when width      {:width      width})\n                   (when height     {:height     height})\n                   (when min-width  {:min-width  min-width})\n                   (when min-height {:min-height min-height})\n                   (when max-width  {:max-width  max-width})\n                   (when max-height {:max-height max-height})\n                   (justify-style justify)\n                   (align-style :align-items align)\n                   (when align-self (align-style :align-self align-self))\n                   (when margin     {:margin     margin})       ;; margin and padding: \"all\" OR \"top&bottom right&left\" OR \"top right bottom left\"\n                   (when padding    {:padding    padding})\n                   (when debug      {:background-color \"gold\"})\n                   style)\n        gap-form (when gap [re-com.box/gap\n                            :size  gap\n                            :width gap]) ;; TODO: required to get around a Chrome bug: https://code.google.com/p/chromium/issues/detail?id=423112. Remove once fixed.\n        children (if gap\n                   (interpose gap-form (filter identity children)) ;; filter is to remove possible nils so we don't add unwanted gaps\n                   children)]\n    (into [:div\n           (merge\n             {:class (str \"rc-h-box display-flex \" class) :style s}\n             attr)]\n          children)))\n\n\n;; ------------------------------------------------------------------------------------\n;;  Component: v-box (debug color: antiquewhite)\n;; ------------------------------------------------------------------------------------\n\n(def v-box-args-desc\n  [{:name :children   :required true                    :type \"vector\"        :validate-fn sequential?    :description \"a vector (or list) of components\"}\n   {:name :size       :required false :default \"none\"   :type \"string\"        :validate-fn string?        :description [:span \"equivalent to CSS style \" [:span.bold \"flex\"] \".\" [:br]  \"Examples: \" [:code \"initial\"] \", \" [:code \"auto\"] \", \" [:code \"none\"]\", \" [:code \"100px\"] \", \" [:code \"2\"] \" or a generic triple of \" [:code \"grow shrink basis\"]]}\n   {:name :width      :required false                   :type \"string\"        :validate-fn string?        :description \"a CSS width style\"}\n   {:name :height     :required false                   :type \"string\"        :validate-fn string?        :description \"a CSS height style\"}\n   {:name :min-width  :required false                   :type \"string\"        :validate-fn string?        :description \"a CSS width style. The minimum width to which the box can shrink\"}\n   {:name :min-height :required false                   :type \"string\"        :validate-fn string?        :description \"a CSS height style. The minimum height to which the box can shrink\"}\n   {:name :max-width  :required false                   :type \"string\"        :validate-fn string?        :description \"a CSS width style. The maximum width to which the box can grow\"}\n   {:name :max-height :required false                   :type \"string\"        :validate-fn string?        :description \"a CSS height style. The maximum height to which the box can grow\"}\n   {:name :justify    :required false :default :start   :type \"keyword\"       :validate-fn justify-style? :description [:span \"equivalent to CSS style \" [:span.bold \"justify-content\"] \".\" [:br] \"One of \" justify-options-list]}\n   {:name :align      :required false :default :stretch :type \"keyword\"       :validate-fn align-style?   :description [:span \"equivalent to CSS style \" [:span.bold \"align-items\"]  \".\" [:br] \" One of \" align-options-list]}\n   {:name :align-self :required false                   :type \"keyword\"       :validate-fn align-style?   :description [:span \"equivalent to CSS style \" [:span.bold \"align-self\"] \".\" [:br]  \"Used when a child must override the parent's align-items setting.\"]}\n   {:name :margin     :required false                   :type \"string\"        :validate-fn string?        :description \"a CSS margin style\"}\n   {:name :padding    :required false                   :type \"string\"        :validate-fn string?        :description \"a CSS padding style\"}\n   {:name :gap        :required false                   :type \"string\"        :validate-fn string?        :description \"the amount of whitespace to put between each child. Typically, an absolute CSS length like 10px or 10em, but can be a stretchy proportional amount like 2\"}\n   {:name :class      :required false                   :type \"string\"        :validate-fn string?        :description \"CSS class names, space separated\"}\n   {:name :style      :required false                   :type \"CSS style map\" :validate-fn css-style?     :description \"CSS styles to add or override\"}\n   {:name :attr       :required false                   :type \"HTML attr map\" :validate-fn html-attr?     :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed\"]}])\n\n(defn v-box\n  \"Returns hiccup which produces a vertical box.\n   It's primary role is to act as a container for components and lays it's children from top to bottom.\n   By default, it also acts as a child under it's parent\"\n  [& {:keys [size width height min-width min-height max-width max-height justify align align-self margin padding gap children class style attr]\n      :or   {size \"none\" justify :start align :stretch}\n      :as   args}]\n  {:pre [(validate-args-macro v-box-args-desc args \"v-box\")]}\n  (let [s        (merge\n                   (flex-flow-style  \"column nowrap\")\n                   (flex-child-style size)\n                   (when width       {:width      width})\n                   (when height      {:height     height})\n                   (when min-width   {:min-width  min-width})\n                   (when min-height  {:min-height min-height})\n                   (when max-width   {:max-width  max-width})\n                   (when max-height  {:max-height max-height})\n                   (justify-style    justify)\n                   (align-style      :align-items align)\n                   (when align-self  (align-style :align-self align-self))\n                   (when margin      {:margin     margin})       ;; margin and padding: \"all\" OR \"top&bottom right&left\" OR \"top right bottom left\"\n                   (when padding     {:padding    padding})\n                   (when debug       {:background-color \"antiquewhite\"})\n                   style)\n        gap-form (when gap [re-com.box/gap\n                            :size   gap\n                            :height gap]) ;; TODO: required to get around a Chrome bug: https://code.google.com/p/chromium/issues/detail?id=423112. Remove once fixed.\n        children (if gap\n                   (interpose gap-form (filter identity children)) ;; filter is to remove possible nils so we don't add unwanted gaps\n                   children)]\n    (into [:div\n           (merge\n             {:class (str \"rc-v-box display-flex \" class) :style s}\n             attr)]\n          children)))\n\n\n;; ------------------------------------------------------------------------------------\n;;  Component: box\n;; ------------------------------------------------------------------------------------\n\n(def box-args-desc\n  [{:name :child      :required true                    :type \"string | hiccup\" :validate-fn string-or-hiccup? :description \"a component (or string)\"}\n   {:name :size       :required false :default \"none\"   :type \"string\"          :validate-fn string?           :description [:span \"equivalent to CSS style \" [:span.bold \"flex\"] \".\" [:br]  \"Examples: \" [:code \"initial\"] \", \" [:code \"auto\"] \", \" [:code \"none\"]\", \" [:code \"100px\"] \", \" [:code \"2\"] \" or a generic triple of \" [:code \"grow shrink basis\"]]}\n   {:name :width      :required false                   :type \"string\"          :validate-fn string?           :description \"a CSS width style\"}\n   {:name :height     :required false                   :type \"string\"          :validate-fn string?           :description \"a CSS height style\"}\n   {:name :min-width  :required false                   :type \"string\"          :validate-fn string?           :description \"a CSS width style. The minimum width to which the box can shrink\"}\n   {:name :min-height :required false                   :type \"string\"          :validate-fn string?           :description \"a CSS height style. The minimum height to which the box can shrink\"}\n   {:name :max-width  :required false                   :type \"string\"          :validate-fn string?          :description \"a CSS width style. The maximum width to which the box can grow\"}\n   {:name :max-height :required false                   :type \"string\"          :validate-fn string?          :description \"a CSS height style. The maximum height to which the box can grow\"}\n   {:name :justify    :required false :default :start   :type \"keyword\"         :validate-fn justify-style?    :description [:span \"equivalent to CSS style \" [:span.bold \"justify-content\"] \".\" [:br] \"One of \" justify-options-list]}\n   {:name :align      :required false :default :stretch :type \"keyword\"         :validate-fn align-style?      :description [:span \"equivalent to CSS style \" [:span.bold \"align-items\"]  \".\" [:br] \" One of \" align-options-list]}\n   {:name :align-self :required false                   :type \"keyword\"         :validate-fn align-style?      :description [:span \"equivalent to CSS style \" [:span.bold \"align-self\"] \".\" [:br]  \"Used when a child must override the parent's align-items setting.\"]}\n   {:name :margin     :required false                   :type \"string\"          :validate-fn string?           :description \"a CSS margin style\"}\n   {:name :padding    :required false                   :type \"string\"          :validate-fn string?           :description \"a CSS padding style\"}\n   {:name :class      :required false                   :type \"string\"          :validate-fn string?           :description \"CSS class names, space separated\"}\n   {:name :style      :required false                   :type \"CSS style map\"   :validate-fn css-style?        :description \"CSS styles to add or override\"}\n   {:name :attr       :required false                   :type \"HTML attr map\"   :validate-fn html-attr?        :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed\"]}])\n\n(defn box\n  \"Returns hiccup which produces a box, which is generally used as a child of a v-box or an h-box.\n   By default, it also acts as a container for further child compenents, or another h-box or v-box\"\n  [& {:keys [size width height min-width min-height max-width max-height justify align align-self margin padding child class style attr]\n      :or   {size \"none\"}\n      :as   args}]\n  {:pre [(validate-args-macro box-args-desc args \"box\")]}\n  (box-base :size        size\n            :width       width\n            :height      height\n            :min-width   min-width\n            :min-height  min-height\n            :max-width   max-width\n            :max-height  max-height\n            :justify     justify\n            :align       align\n            :align-self  align-self\n            :margin      margin\n            :padding     padding\n            :child       child\n            :class-name  \"rc-box \"\n            :class       class\n            :style       style\n            :attr        attr))\n\n\n;; ------------------------------------------------------------------------------------\n;;  Component: scroller\n;; ------------------------------------------------------------------------------------\n\n(def scroller-args-desc\n  [{:name :child      :required true                    :type \"string | hiccup\" :validate-fn string-or-hiccup? :description \"a component (or string)\"}\n   {:name :size       :required false :default \"auto\"   :type \"string\"          :validate-fn string?           :description [:span \"equivalent to CSS style \" [:span.bold \"flex\"] \".\" [:br]  \"Examples: \" [:code \"initial\"] \", \" [:code \"auto\"] \", \" [:code \"none\"]\", \" [:code \"100px\"] \", \" [:code \"2\"] \" or a generic triple of \" [:code \"grow shrink basis\"]]}\n   {:name :scroll     :required false :default \"auto\"   :type \"keyword\"         :validate-fn scroll-style?     :description [:span \"Sets both h-scroll and v-scroll at once: \" [:br]\n                                                                                                                             [:code \":auto\"] \": only show scroll bar(s) if the content is larger than the scroller\" [:br]\n                                                                                                                             [:code \":on\"] \": always show scroll bars\" [:br]\n                                                                                                                             [:code \":off\"] \": never show scroll bar(s). Content which is not in the bounds of the scroller can not be seen\" [:br]\n                                                                                                                             [:code \":spill\"] \": never show scroll bar(s). Content which is not in the bounds of the scroller spills all over the place\"]}\n   {:name :h-scroll   :required false                   :type \"keyword\"         :validate-fn scroll-style?     :description [:span \"see \" [:code \":scroll\"] \". Overrides that setting\"]}\n   {:name :v-scroll   :required false                   :type \"keyword\"         :validate-fn scroll-style?     :description [:span \"see \" [:code \":scroll\"] \". Overrides that setting\"]}\n   {:name :width      :required false                   :type \"string\"          :validate-fn string?           :description \"initial width\"}\n   {:name :height     :required false                   :type \"string\"          :validate-fn string?           :description \"initial height\"}\n   {:name :min-width  :required false                   :type \"string\"          :validate-fn string?           :description \"a CSS width style. The minimum width to which the box can shrink\"}\n   {:name :min-height :required false                   :type \"string\"          :validate-fn string?           :description \"a CSS height style. The minimum height to which the box can shrink\"}\n   {:name :max-width  :required false                   :type \"string\"          :validate-fn string?           :description \"a CSS width style. The maximum width to which the box can grow\"}\n   {:name :max-height :required false                   :type \"string\"          :validate-fn string?           :description \"a CSS height style. The maximum height to which the box can grow\"}\n   {:name :justify    :required false :default :start   :type \"keyword\"         :validate-fn justify-style?    :description [:span \"equivalent to CSS style \" [:span.bold \"justify-content\"] \".\" [:br] \"One of \" justify-options-list]}\n   {:name :align      :required false :default :stretch :type \"keyword\"         :validate-fn align-style?      :description [:span \"equivalent to CSS style \" [:span.bold \"align-items\"]  \".\" [:br] \" One of \" align-options-list]}\n   {:name :align-self :required false                   :type \"keyword\"         :validate-fn align-style?      :description [:span \"equivalent to CSS style \" [:span.bold \"align-self\"] \".\" [:br]  \"Used when a child must override the parent's align-items setting.\"]}\n   {:name :margin     :required false                   :type \"string\"          :validate-fn string?           :description \"a CSS margin style\"}\n   {:name :padding    :required false                   :type \"string\"          :validate-fn string?           :description \"a CSS padding style\"}\n   {:name :class      :required false                   :type \"string\"          :validate-fn string?           :description \"CSS class names, space separated\"}\n   {:name :style      :required false                   :type \"CSS style map\"   :validate-fn css-style?        :description \"CSS styles to add or override\"}\n   {:name :attr       :required false                   :type \"HTML attr map\"   :validate-fn html-attr?        :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed\"]}])\n\n(defn scroller\n  \"Returns hiccup which produces a scoller component.\n   This is the way scroll bars are added to boxes, in favour of adding the scroll attributes directly to the boxes themselves.\n   IMPORTANT: Because this component becomes the flex child in place of the component it is wrapping, you must copy the size attibutes to this componenet.\n   There are three scroll types:\n    - h-scroll  Determines how the horizontal scroll bar will be displayed.\n    - v-scroll  Determines how the vertical scroll bar will be displayed.\n    - scroll    Sets both h-scroll and v-scroll at once.\n   Syntax: :auto   [DEFAULT] Only show scroll bar(s) if the content is larger than the scroller.\n           :on     Always show scroll bar(s).\n           :off    Never show scroll bar(s). Content which is not in the bounds of the scroller can not be seen.\n           :spill  Never show scroll bar(s). Content which is not in the bounds of the scroller spills all over the place.\n   Note:   If scroll is set, then setting h-scroll or v-scroll overrides the scroll value\"\n  [& {:keys [size scroll h-scroll v-scroll width height min-width min-height max-width max-height justify align align-self margin padding child class style attr]\n      :or   {size \"auto\"}\n      :as   args}]\n  {:pre [(validate-args-macro scroller-args-desc args \"scroller\")]}\n  (let [not-v-or-h (and (nil? v-scroll) (nil? h-scroll))\n        scroll     (if (and (nil? scroll) not-v-or-h) :auto scroll)]\n    (box-base :size       size\n              :scroll     scroll\n              :h-scroll   h-scroll\n              :v-scroll   v-scroll\n              :width      width\n              :height     height\n              :min-width  min-width\n              :min-height min-height\n              :max-width  max-width\n              :max-height max-height\n              :justify    justify\n              :align      align\n              :align-self align-self\n              :margin     margin\n              :padding    padding\n              :child      child\n              :class-name \"rc-scroller \"\n              :class      class\n              :style      style\n              :attr       attr)))\n\n\n;; ------------------------------------------------------------------------------------\n;;  Component: border\n;; ------------------------------------------------------------------------------------\n\n(def border-args-desc\n  [{:name :child      :required true                                 :type \"string | hiccup\" :validate-fn string-or-hiccup? :description \"a component (or string)\"}\n   {:name :border     :required false :default \"1px solid lightgrey\" :type \"string\"          :validate-fn string?           :description \"a CSS border style. A convenience to describe all borders in one parameter\"}\n   {:name :l-border   :required false                                :type \"string\"          :validate-fn string?           :description [:span \"a CSS border style for the left border. Overrides \" [:code \":border\"]]}\n   {:name :r-border   :required false                                :type \"string\"          :validate-fn string?           :description [:span \"a CSS border style for the right border. Overrides \" [:code \":border\"]]}\n   {:name :t-border   :required false                                :type \"string\"          :validate-fn string?           :description [:span \"a CSS border style for the top border. Overrides \" [:code \":border\"]]}\n   {:name :b-border   :required false                                :type \"string\"          :validate-fn string?           :description [:span \"a CSS border style for the bottom. Overrides \" [:code \":border\"]]}\n   {:name :radius     :required false                                :type \"string\"          :validate-fn string?           :description \"a CSS radius style eg.\\\"2px\\\"\"}\n   {:name :size       :required false :default \"none\"                :type \"string\"          :validate-fn string?           :description [:span \"equivalent to CSS style \" [:span.bold \"flex\"] \".\" [:br]  \"Examples: \" [:code \"initial\"] \", \" [:code \"auto\"] \", \" [:code \"none\"]\", \" [:code \"100px\"] \", \" [:code \"2\"] \" or a generic triple of \" [:code \"grow shrink basis\"]]}\n   {:name :width      :required false                                :type \"string\"          :validate-fn string?           :description \"a CSS style describing the initial width\"}\n   {:name :height     :required false                                :type \"string\"          :validate-fn string?           :description \"a CSS style describing the initial height\"}\n   {:name :min-width  :required false                                :type \"string\"          :validate-fn string?           :description \"a CSS width style. The minimum width to which the box can shrink\"}\n   {:name :min-height :required false                                :type \"string\"          :validate-fn string?           :description \"a CSS height style. The minimum height to which the box can shrink\"}\n   {:name :max-width  :required false                                :type \"string\"          :validate-fn string?           :description \"a CSS width style. The maximum width to which the box can grow\"}\n   {:name :max-height :required false                                :type \"string\"          :validate-fn string?           :description \"a CSS height style. The maximum height to which the box can grow\"}\n   {:name :margin     :required false                                :type \"string\"          :validate-fn string?           :description \"a CSS margin style\"}\n   {:name :padding    :required false                                :type \"string\"          :validate-fn string?           :description \"a CSS padding style\"}\n   {:name :class      :required false                                :type \"string\"          :validate-fn string?           :description \"CSS class names, space separated\"}\n   {:name :style      :required false                                :type \"CSS style map\"   :validate-fn css-style?        :description \"CSS styles to add or override\"}\n   {:name :attr       :required false                                :type \"HTML attr map\"   :validate-fn html-attr?        :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed\"]}])\n\n(defn border\n  \"Returns hiccup which produces a border component.\n   This is the way borders are added to boxes, in favour of adding the border attributes directly to the boxes themselves.\n   border property syntax: '<border-width> || <border-style> || <color>'\n    - border-width: thin, medium, thick or standard CSS size (e.g. 2px, 0.5em)\n    - border-style: none, hidden, dotted, dashed, solid, double, groove, ridge, inset, outset\n    - color:        standard CSS color (e.g. grey #88ffee)\"\n  [& {:keys [size width height min-width min-height max-width max-height margin padding border l-border r-border t-border b-border radius child class style attr]\n      :or   {size \"none\"}\n      :as   args}]\n  {:pre [(validate-args-macro border-args-desc args \"border\")]}\n  (let [no-border      (every? nil? [border l-border r-border t-border b-border])\n        default-border \"1px solid lightgrey\"]\n    (box-base :size        size\n              :width       width\n              :height      height\n              :min-width   min-width\n              :min-height  min-height\n              :max-width   max-width\n              :max-height  max-height\n              :margin      margin\n              :padding     padding\n              :border      (if no-border default-border border)\n              :l-border    l-border\n              :r-border    r-border\n              :t-border    t-border\n              :b-border    b-border\n              :radius      radius\n              :child       child\n              :class-name  \"rc-border \"\n              :class       class\n              :style       style\n              :attr        attr)))"]}