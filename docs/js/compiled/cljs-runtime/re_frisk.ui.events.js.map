{"version":3,"sources":["re_frisk/ui/events.cljs"],"mappings":"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","names":["re-frisk.ui.events/event-item","_","tool-state","checkbox-trace-val","p__39092","map__39093","cljs.core/--destructure-map","cljs.core.get","color","name","app-db-diff","selected?","op-type","indx","item","cljs.core.merge","cljs.core/not","clojure.string/blank?","event","cljs.core.swap_BANG_","cljs.core/assoc","re-frisk.utils/scroll-timeline-event-item","cljs.core/deref","and__4221__auto__","re-frisk.ui.trace/trace-event-item","re-frisk.ui.events/event-list-item","p__39094","map__39095","trace?","cljs.core.not_EQ_","re-frisk.ui.trace/trace-item","re-frisk.ui.events/events-scroller","filtered-events","re_frisk.inlined_deps.reagent.v1v0v0.reagent.core.create_class","this","n","re-frisk.inlined-deps.reagent.v1v0v0.reagent.dom/dom-node","p1__39096#","re-frisk.ui.components.components/scroller","t","cljs.core._EQ_","iter__4622__auto__","s__39102","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4620__auto__","size__4621__auto__","cljs.core/count","b__39104","cljs.core/chunk-buffer","i__39103","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__39101","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","re-frisk.ui.events/events-list-view","re-frame-data","truncate-checkbox-val","re_frisk.inlined_deps.reagent.v1v0v0.reagent.core.atom","text-val","max-text-val","re-frame-events","colored-and-selected","re-frisk.inlined-deps.reagent.v1v0v0.reagent.ratom/make-reaction","clrs","cljs.core.doall","p1__39105#","cljs.core.map","cljs.core.assoc","cljs.core.get_in","traces-filtered-events","cljs.core.remove","max-traces-filtered-events","cljs.core/take-last","cljs.core.filter","re-frisk.utils/filter-event","sorted-events","cljs.core.sort_by","p1__39108#","p1__39110#","p1__39111#","p1__39113#","re-com.core/v-box","re-com.core/h-box","re-com.core/box","cljs.core/reset!","re-frisk.ui.components.components/small-button","re-com.core/checkbox","re-com.core/gap","re-frisk.ui.events/event-bar","evnt-key","subs?","subs-graph-opened?","G__39145","fexpr__39144","re-com.core/label","re-frisk.ui.components.components/label-button","cljs.core/update","p1__39143#","cljs.core/assoc-in","re-frisk.ui.events/event-count","label","val","duration-ms","re-frisk.ui.events/event-content","state-atom","re-frisk.ui.components.frisk/expand-by-default","map__39150","handler-duration-ms","fx-duration-ms","effects","coeffects","re-frisk.ui.components.colors/render","re-frisk.ui.components.colors/effect","re-frisk.ui.components.frisk/Root","G__39157","re-frisk.ui.events/frisk-view","map__39158","re-frisk.ui.subs/event-subs-graph-container","re-frisk.ui.trace/subs-details","cljs.core/chunk-first"],"sourcesContent":["(ns re-frisk.ui.events\n  (:require-macros [re-frisk.inlined-deps.reagent.v1v0v0.reagent.ratom :refer [reaction]])\n  (:require\n   [re-frisk.inlined-deps.reagent.v1v0v0.reagent.core :as reagent]\n   [re-frisk.inlined-deps.reagent.v1v0v0.reagent.dom :as rdom]\n   [clojure.string :as string]\n   [re-com.core :as re-com]\n   [re-frisk.ui.components.frisk :as frisk]\n   [re-frisk.ui.components.components :as components]\n   [re-frisk.ui.trace :as trace]\n   [re-frisk.utils :as utils]\n   [re-frisk.ui.subs :as subs]\n   [re-frisk.ui.components.colors :as colors]))\n\n(defn event-item [_ tool-state checkbox-trace-val]\n  (fn [{:keys [color name app-db-diff selected? op-type indx] :as item} _]\n    [:a\n     {:href     \"#\"\n      :id       (str \"events-list-item\" indx)\n      :class    (str \"list-group-item\" (when selected? \" active\"))\n      :style    (merge {:padding     5 :font-size 13 :border-left-width 2\n                        :padding-right 0\n                        :white-space :pre :width \"100%\"}\n                       (when (and (nil? app-db-diff) (not selected?))\n                         {:opacity \"0.7\"})\n                       (when-not (string/blank? color)\n                         {:border-left-color (str \"#\" color)}))\n      :on-click (fn [event]\n                  (swap! tool-state assoc :selected-event item)\n                  (utils/scroll-timeline-event-item (:doc @tool-state) indx)\n                  (.preventDefault event))}\n     (if (and op-type checkbox-trace-val)\n       [trace/trace-event-item item]\n       [:span name])]))\n\n(defn event-list-item [_ tool-state checkbox-trace-val]\n  (fn [{:keys [trace? op-type] :as item} _]\n    (if (and trace? (not= :event op-type))\n      [trace/trace-item item tool-state]\n      [event-item item tool-state checkbox-trace-val])))\n\n(defn events-scroller [filtered-events tool-state _]\n  (reagent/create-class\n   {:display-name \"re_frisk.debugger-messages\"\n    :component-did-update\n    (fn [this]\n      (let [n (rdom/dom-node this)]\n        (when (:scroll-bottom? @tool-state)\n          (set! (.-scrollTop n) (.-scrollHeight n)))))\n    :reagent-render\n    (fn [_ _ checkbox-trace-val]\n      [components/scroller\n       {:on-scroll #(let [t (.-target %)]\n                      (swap! tool-state assoc\n                             :scroll-bottom?\n                             (= (- (.-scrollHeight t) (.-offsetHeight t)) (.-scrollTop t))))}\n       (for [item @filtered-events]\n         ^{:key (str \"item\" (:indx item) checkbox-trace-val)}\n         [event-list-item item tool-state checkbox-trace-val])])}))\n\n(defn events-list-view [re-frame-data tool-state]\n  (let [truncate-checkbox-val (reagent/atom true)\n        checkbox-trace-val    (reagent/atom false)\n        text-val              (reagent/atom \"\")\n        max-text-val          (reagent/atom \"\")\n        re-frame-events       (:events re-frame-data)\n        colored-and-selected\n        (reaction\n         (let [clrs (:events-colors @tool-state)]\n           (doall\n            (map #(assoc % :selected? (= (get-in @tool-state [:selected-event :indx]) (:indx %))\n                           :name (if @truncate-checkbox-val (:truncated-name %) (str (first (:event %))))\n                           :color (get clrs (first (:event %))))\n                 @re-frame-events))))\n        traces-filtered-events\n        (reaction\n         (if @checkbox-trace-val\n           @colored-and-selected\n           (remove :trace? @colored-and-selected)))\n        max-traces-filtered-events\n        (reaction\n         (if (> (int @max-text-val) 0)\n           (take-last (int @max-text-val) @traces-filtered-events)\n           @traces-filtered-events))\n        filtered-events\n        (reaction\n         (if (= @text-val \"\")\n           @max-traces-filtered-events\n           (filter (utils/filter-event @text-val) @max-traces-filtered-events)))\n        sorted-events\n        (reaction (sort-by :indx @filtered-events))]\n    (fn []\n      [re-com/v-box :size \"1\"\n       :children\n       [;events filter\n        [re-com/h-box\n         :children\n         [[re-com/box :size \"1\"\n           :child\n           [:input {:type \"text\"\n                    :style {:height :auto :padding \"0\" :width \"100%\"}\n                    :value @text-val\n                    :placeholder \"Filter events\"\n                    :on-change #(reset! text-val (-> % .-target .-value))}]]\n          [components/small-button {:on-click #(reset! text-val \"\") :active? false} \"X\"]]]\n        ;truncate checkbox\n        [re-com/h-box :gap \"5px\"\n         :children\n         [[re-com/checkbox\n           :model truncate-checkbox-val\n           :on-change #(reset! truncate-checkbox-val %)\n           :label \"truncate\"]\n          [re-com/checkbox\n           :model checkbox-trace-val\n           :on-change #(reset! checkbox-trace-val %)\n           :label \"traces\"]\n          [re-com/gap :size \"100%\"]\n          [re-com/h-box\n           :children\n           [[:input {:type \"text\"\n                     :style {:height \"20px\" :padding \"0\" :width \"30px\"}\n                     :value @max-text-val\n                     :placeholder \"max\"\n                     :on-change #(reset! max-text-val (-> % .-target .-value))}]\n            [components/small-button {:on-click #(reset! max-text-val nil) :active? false} \"X\"]]]]]\n        ;events\n        [events-scroller sorted-events tool-state @checkbox-trace-val]]])))\n\n(defn event-bar [tool-state]\n  (let [evnt-key (reaction (first (get-in @tool-state [:selected-event :event])))\n        subs?    (reaction (get-in @tool-state [:selected-event :subs?]))\n        subs-graph-opened?  (reaction (get @tool-state :subs-graph-opened?))\n        color    (reaction (if @evnt-key (@evnt-key (:events-colors @tool-state)) \"\"))]\n    (fn []\n      [re-com/h-box :align :center :style {:background-color \"#4e5d6c\"}\n       :children\n       [[re-com/label :style {:margin \"4px\"}\n         :label (cond @evnt-key \"Event\"\n                      @subs? \"Subscriptions\"\n                      :else \"Event / Trace\")]\n        (when @subs?\n          [components/label-button {:on-click #(swap! tool-state update :subs-graph-opened? not)\n                                    :active? @subs-graph-opened?}\n           \"Graph\"])\n        (when @evnt-key\n          [re-com/h-box\n           :children\n           [[re-com/label :label @evnt-key :style {:margin \"4px\"}]\n            [re-com/label :label \"#\" :style {:margin \"4px\"}]\n            [:input\n             {:style     {:width \"60px\"} :placeholder \"000000\" :type \"text\" :max-length \"6\"\n              :value     @color\n              :on-change #(swap! tool-state assoc-in\n                                 [:events-colors @evnt-key]\n                                 (-> % .-target .-value))}]]])]])))\n\n(defn event-count [label val color duration-ms]\n  [:div {:style {:display        :flex :align-items :center :margin-right 10\n                 :flex-direction :row}}\n   label \":\"\n   [:div {:style {:display :flex :align-items :center}}\n    (if (string/blank? val)\n      [:div {:style {:width 10}}]\n      [:div {:style {:display       :flex :margin 5 :padding-left 4 :padding-right 4 :background-color color\n                     :border-radius 4 :color :white}}\n       val])\n    duration-ms]])\n\n(defn event-content [_]\n  (let [state-atom (reagent/atom frisk/expand-by-default)]\n    (fn [item]\n      (let [{:keys [event app-db-diff trace? duration-ms handler-duration-ms\n                    fx-duration-ms effects coeffects]}\n            item]\n        [:div {:style {:display :flex :flex 1 :background-color \"#f3f3f3\" :color \"#444444\"\n                       :padding 8 :flex-direction :column}}\n         (when duration-ms\n           [:div {:style {:display :flex :flex-direction :row :align-items :center\n                          :margin-bottom 10 :border-bottom \"solid 1px #CCCCCC\"}}\n            [:div {:style {:margin-right 10}} \"Total time: \" duration-ms]\n            [:div {:style {:margin-right 10}} \" | \"]\n            [event-count \"Handler\" \"\" colors/render handler-duration-ms]\n            [:div {:style {:margin-right 10}} \" | \"]\n            [event-count \"Effects\" (count effects) colors/effect fx-duration-ms]])\n         [frisk/Root (if trace?\n                       item\n                       (merge {:event event}\n                              (if duration-ms\n                                {:effects (cond-> effects\n                                            app-db-diff\n                                            (assoc :db app-db-diff))\n                                 :coeffects coeffects}\n                                {:app-db-diff app-db-diff})))\n          0 state-atom]]))))\n\n(defn frisk-view [tool-state]\n  (let []\n    (fn [_]\n      (let [subs-graph-opened? (:subs-graph-opened? @tool-state)\n            {:keys [subs?] :as item}\n            (:selected-event @tool-state)]\n        (when item\n          (if subs?\n            (if subs-graph-opened?\n              [subs/event-subs-graph-container item]\n              [trace/subs-details item])\n            [event-content item]))))))"]}