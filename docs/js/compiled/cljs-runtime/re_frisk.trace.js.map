{"version":3,"sources":["re_frisk/trace.cljs"],"mappings":"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","names":["js/re-frisk","js/re-frisk.trace","js/re-frisk.trace.mounted-views","re-frisk.trace/mounted-views","cljs.core.atom","js/re-frisk.trace.call-state","re-frisk.trace/call-state","re-frisk.trace/call-and-chill","handler","cljs.core/deref","cljs.core/reset!","js/setTimeout","re-frisk.trace/call-timeout","state","cljs.core._EQ_","re-frisk.trace/update-views-and-get-traces","send-views","traces","G__39240","cljs.core.reduce","p__39241","map__39242","cljs.core/--destructure-map","cljs.core.get","items","op-type","operation","tags","item","cljs.core/namespace","fexpr__39243","cljs.core.conj","fexpr__39244","cljs.core.swap_BANG_","cljs.core/assoc","cljs.core/dissoc","re-frisk.trace/normalize-traces","ignore-events","p__39245","map__39246","duration","id","trace","G__39247","cljs.core/Keyword","cljs.core/not","cljs.core/first","cljs.core.merge","cljs.core.dissoc","cljs.core.assoc","cljs.core/select-keys","G__39248","re-frisk.utils/truncate-name","re-frisk.diff.diff/diff","prev","cljs.core/peek","cljs.core/pop","re-frisk.utils/str-ms","and__4221__auto__","cljs.core.update","cljs.core/conj","re-frame.interop/reagent-id","re-frame.db/app-db","cljs.core/empty?","cljs.core.sort_by","re-frisk.trace/normalize-durations","first-event","p__39258","map__39259","subs?","subs","handler-duration","fx-duration","raf","map__39260","start","created-duration-cached","shoud-update-duration","run-duration","created-duration","disposed-duration","render-duration","create-class-duration","force-duration","p__39261","map__39262","acc","end","cached?","G__39263","cljs.core/+","cljs.core/inc","handler-fx-duration","G__39285"],"sourcesContent":["(ns re-frisk.trace\n  (:require [re-frisk.diff.diff :as diff]\n            [re-frisk.utils :as utils]\n            [re-frame.trace]\n            [re-frame.interop :as interop]\n            [re-frame.db :as db]))\n\n(defonce mounted-views (atom {}))\n\n(declare call-timeout)\n(defonce call-state (atom nil))\n\n(defn call-and-chill [handler]\n  (if @call-state\n    (reset! call-state :call)\n    (do\n      (reset! call-state :chill)\n      (js/setTimeout call-timeout 500 handler)\n      (js/setTimeout handler))))\n\n(defn- call-timeout [handler]\n  (let [state @call-state]\n    (reset! call-state nil)\n    (when (= state :call)\n      (call-and-chill handler))))\n\n(defn update-views-and-get-traces [send-views traces]\n  (call-and-chill #(send-views @mounted-views))\n  (reduce (fn [items {:keys [op-type operation tags] :as item}]\n            (let [op-type (if (= (namespace op-type) \"sub\") :sub op-type)]\n              (if (#{:event :event/handler :event/do-fx :sub :render :force-update :create-class :raf\n                     :raf-end :should-upd} op-type)\n                (conj items item)\n                (do\n                  (when (#{:componentWillUnmount :componentDidMount} op-type)\n                    (if (= op-type :componentDidMount)\n                        (swap! mounted-views assoc operation {:name operation :order (:order tags)})\n                        (swap! mounted-views dissoc operation)))\n                  items))))\n          []\n          traces))\n\n(defn normalize-traces [traces ignore-events]\n  (reduce (fn [items {:keys [op-type tags duration id] :as trace}]\n            (let [op-type (if (= (namespace op-type) \"sub\") :sub op-type)\n                  item    {:indx id :trace? true}]\n              (case op-type\n                ;:re-frame.router/fsm-trigger\n                #_(conj items (merge item\n                                     (select-keys trace [:id :op-type :operation :start :end])))\n                :event\n                (when (or (not ignore-events) (not (get ignore-events (first (:event tags)))))\n                  (conj items (merge (dissoc item :trace?)\n                                     (assoc (select-keys trace [:id :op-type :operation :duration\n                                                                :start :end :effects :coeffects])\n                                       :event (:event tags)\n                                       :effects (cond-> (:effects tags)\n                                                        (:db (:effects tags))\n                                                        (assoc :db {}))\n                                       :coeffects (dissoc (:coeffects tags) :db :event :original-event)\n                                       :truncated-name (utils/truncate-name (str (first (:event tags))))\n                                       :app-db-diff (diff/diff (:app-db-before tags) (:app-db-after tags))))))\n                :event/handler\n                (let [prev (peek items)]\n                  (when (= (:op-type prev) :event)\n                    (conj (pop items) (assoc prev :handler-duration duration))\n                    #_(conj items (merge item\n                                         (select-keys trace [:id :op-type :operation :duration])))))\n                :event/do-fx\n                (let [prev (peek items)]\n                  (when (= (:op-type prev) :event)\n                    (conj (pop items) (assoc prev :fx-duration duration))\n                    #_(conj items (merge item\n                                         (select-keys trace [:id :op-type :duration])))))\n                (:sub :render :force-update :create-class :should-upd)\n                (let [prev  (peek items)\n                      trace (select-keys trace [:id :op-type :operation :duration :start :end])\n                      trace (assoc trace :duration-ms (utils/str-ms (:duration trace))\n                                         :reaction (:reaction tags)\n                                         :cached? (:cached? tags)\n                                         :input-signals (:input-signals tags))]\n                  (if (and (:subs? prev) (not (:raf-end prev)))\n                    (conj (pop items) (update prev :subs conj trace))\n                    (conj items (merge item\n                                       {:op-type         :subs\n                                        :subs?           true\n                                        :subs            [trace]\n                                        :app-db-reaction (interop/reagent-id db/app-db)\n                                        :start           (:start trace)}))))\n\n                :raf\n                (conj items (merge item\n                                   {:op-type         :subs\n                                    :subs?           true\n                                    :subs            []\n                                    :app-db-reaction (interop/reagent-id db/app-db)\n                                    :start           (:start trace)\n                                    :raf (select-keys trace [:sart :end :duration])}))\n\n                :raf-end\n                (let [prev (peek items)]\n                  (if (empty? (:subs prev))\n                    (pop items)\n                    (conj (pop items) (assoc prev :raf-end true))))\n\n                items)))\n   []\n   (sort-by :id traces)))\n\n(defn normalize-durations [first-event]\n  (fn [{:keys [subs? subs op-type handler-duration fx-duration raf]\n        :as   trace}]\n    (let [{:keys [duration handler-duration fx-duration start created-duration-cached shoud-update-duration\n                  run-duration created-duration disposed-duration render-duration create-class-duration force-duration]\n           :as   trace}\n          (cond\n            subs?\n            (merge trace\n                   (reduce (fn [acc {:keys [duration op-type end cached?]}]\n                             (cond-> (update acc :duration + duration)\n                                     :always\n                                     (assoc :end end)\n                                     (= op-type :sub/run)\n                                     (-> (update :run-count inc)\n                                         (update :run-duration + duration))\n                                     (and (= op-type :sub/create) (not cached?))\n                                     (-> (update :created-count inc)\n                                         (update :created-duration + duration))\n                                     (and (= op-type :sub/create) cached?)\n                                     (-> (update :created-count-cached inc)\n                                         (update :created-duration-cached + duration))\n                                     (= op-type :sub/dispose)\n                                     (-> (update :disposed-count inc)\n                                         (update :disposed-duration + duration))\n                                     (= op-type :render)\n                                     (-> (update :render-count inc)\n                                         (update :render-duration + duration))\n                                     (= op-type :force-update)\n                                     (-> (update :force-count inc)\n                                         (update :force-duration + duration))\n                                     (= op-type :create-class)\n                                     (-> (update :create-class-count inc)\n                                         (update :create-class-duration + duration))\n                                     (= op-type :should-upd)\n                                     (-> (update :shoud-update-count inc)\n                                         (update :shoud-update-duration + duration))))\n                           {:duration                0\n                            :run-count               0\n                            :run-duration            0\n                            :render-count            0\n                            :render-duration         0\n                            :force-count             0\n                            :force-duration          0\n                            :created-count           0\n                            :created-duration        0\n                            :disposed-count          0\n                            :disposed-duration       0\n                            :created-count-cached    0\n                            :created-duration-cached 0\n                            :create-class-count      0\n                            :create-class-duration   0\n                            :shoud-update-count      0\n                            :shoud-update-duration   0}\n                           subs)\n                   (when raf\n                     raf))\n            (= op-type :event)\n            (let [handler-fx-duration (+ handler-duration fx-duration)]\n              (assoc trace :handler-fx-duration handler-fx-duration\n                           :handler-fx-duration-ms (utils/str-ms handler-fx-duration)))\n            :else\n            trace)]\n      (cond-> trace\n              duration\n              (assoc :duration-ms (utils/str-ms duration))\n              handler-duration\n              (assoc :handler-duration-ms (utils/str-ms handler-duration))\n              fx-duration\n              (assoc :fx-duration-ms (utils/str-ms fx-duration))\n              run-duration\n              (assoc :run-duration-ms (utils/str-ms run-duration))\n              created-duration\n              (assoc :created-duration-ms (utils/str-ms created-duration))\n              created-duration-cached\n              (assoc :created-duration-cached-ms (utils/str-ms created-duration-cached))\n              disposed-duration\n              (assoc :disposed-duration-ms (utils/str-ms disposed-duration))\n              render-duration\n              (assoc :render-duration-ms (utils/str-ms render-duration))\n              create-class-duration\n              (assoc :create-class-duration-ms (utils/str-ms create-class-duration))\n              shoud-update-duration\n              (assoc :shoud-update-duration-ms (utils/str-ms shoud-update-duration))\n              force-duration\n              (assoc :force-duration-ms (utils/str-ms force-duration))\n              :always\n              (assoc :position (- start (:start first-event)))))))"]}