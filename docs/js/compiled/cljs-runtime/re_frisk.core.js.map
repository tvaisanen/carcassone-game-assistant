{"version":3,"sources":["re_frisk/core.cljs"],"mappings":"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","names":["js/re-frisk","js/re-frisk.core","js/re-frisk.core.initialized","re-frisk.core/initialized","cljs.core.atom","js/re-frisk.core.prev-event","re-frisk.core/prev-event","js/re-frisk.core.re-frame-data","re-frisk.core/re-frame-data","re_frisk.inlined_deps.reagent.v1v0v0.reagent.core.atom","re-frisk.core/update-db-and-subs","cljs.core/reset!","re-frisk.utils/get-subs","cljs.core/deref","re-frame.db/app-db","re-frisk.core/update-views","views","cljs.core/seq","re-frisk.core/trace-cb","traces","re-frisk.db/tool-state","ignore-events","cljs.core.get_in","re-frisk.trace/update-views-and-get-traces","normalized","re-frisk.trace/normalize-traces","first-event","or__4223__auto__","cljs.core/first","cljs.core.swap_BANG_","cljs.core/concat","cljs.core.map","re-frisk.trace/normalize-durations","re-frisk.stat/init-stat","re-frisk.stat/update-trace-stat","js/setTimeout","re-frisk.subs-graph/update-subs","cljs.core.filter","re-frisk.utils/call-and-chill","re-frisk.core/post-event-callback","value","queue","app-db","indx","cljs.core/count","diff","re-frisk.diff.diff/diff","re-frisk.stat/update-event-stat","cljs.core/not","cljs.core.get","cljs.core/conj","re-frisk.utils/truncate-name","re-frisk.core/find-error-trace","re-frisk.core/register-exception-handler","gOldOnError","js/window.onerror","error-msg","url","line-number","cljs.core.merge","re-frisk.core/patch-reagent!","re-frisk.reagent.impl.component/patch-wrap-funs","re-frisk.reagent.impl.batching/patch-next-tick","var_args","args__4835__auto__","len__4829__auto__","i__4830__auto__","argseq__4836__auto__","cljs.core/IndexedSeq","re-frisk.core/enable-re-frisk!","p__39434","vec__39435","cljs.core.nth","seq39433","self__4817__auto__","opts","cljs.core/assoc","re-frame.trace/is-trace-enabled?","re-frame.trace/register-trace-cb","cljs.core._EQ_","re_frame.core.add_post_event_callback","re-frisk.subs-graph/set-root-node","re-frame.interop/reagent-id","re-frisk.ui/mount-internal","re-frisk.core/enable","p__39473","vec__39478","seq39458","re_frisk.core.enable_re_frisk_BANG_"],"sourcesContent":["(ns re-frisk.core\n  (:require [re-frame.core :as re-frame]\n            [re-frame.db :as db]\n            [re-frisk.db :as data]\n            [re-frisk.ui :as ui]\n            [re-frisk.diff.diff :as diff]\n            [re-frisk.inlined-deps.reagent.v1v0v0.reagent.core :as reagent]\n            [re-frisk.utils :as utils]\n            [re-frame.trace]\n            [re-frisk.trace :as trace]\n            [re-frisk.subs-graph :as subs-graph]\n            [re-frame.interop :as interop]\n            [re-frisk.stat :as stat]\n            [re-frisk.reagent.impl.batching :refer [patch-next-tick]]\n            [re-frisk.reagent.impl.component :refer [patch-wrap-funs]]))\n\n(defonce initialized (atom false))\n(defonce prev-event (atom {}))\n\n(defonce re-frame-data\n         {:app-db (reagent/atom \"no data\")\n          :events (reagent/atom [])\n          :subs   (reagent/atom \"no data\")\n          :stat   (reagent/atom {})\n          :views  (reagent/atom {})})\n\n(defn update-db-and-subs []\n  ;;we need to deref all subscriptions, overwise they won't be deactivated\n  (reset! (:subs re-frame-data) (utils/get-subs))\n  (reset! (:app-db re-frame-data) @db/app-db))\n\n(defn update-views [views]\n  (when (seq views)\n    (reset! (:views re-frame-data) views)))\n\n(defn trace-cb [traces]\n  (when-not (:paused? @data/tool-state)\n    (let [ignore-events (get-in @data/tool-state [:opts :ignore-events])\n          traces (trace/update-views-and-get-traces update-views traces)\n          normalized  (trace/normalize-traces traces ignore-events)\n          first-event (or (first @(:events re-frame-data)) (first normalized))]\n      (when (seq normalized)\n        (swap! (:events re-frame-data)\n               concat\n               (map (trace/normalize-durations first-event)\n                    normalized))\n        (stat/init-stat re-frame-data)\n        (stat/update-trace-stat re-frame-data normalized)\n        (js/setTimeout #(subs-graph/update-subs (filter :subs? normalized)) 100)\n        (utils/call-and-chill update-db-and-subs 500)))))\n\n(defn- post-event-callback [value queue]\n  (when-not (:paused? @data/tool-state)\n    (let [ignore-events (get-in @data/tool-state [:opts :ignore-events])\n          app-db @db/app-db\n          indx   (count @(:events re-frame-data))\n          ;;This diff may be expensive\n          diff   (diff/diff (:app-db @prev-event) app-db)]\n      (reset! prev-event {:app-db app-db})\n      (stat/init-stat re-frame-data)\n      (stat/update-event-stat re-frame-data (first value))\n      (when (or (not ignore-events) (not (get ignore-events (first value))))\n        (swap! (:events re-frame-data) conj {:event          value\n                                             :app-db-diff    diff\n                                             :indx           indx\n                                             :queue          queue\n                                             :truncated-name (utils/truncate-name (str (first value)))}))\n      (utils/call-and-chill update-db-and-subs 500))))\n\n(defn find-error-trace []\n  #_(select-keys\n     (:trace\n      (reduce (fn [acc {:keys [operation] :as trace}]\n                (cond-> (assoc acc :prev trace)\n                        (and (vector? operation) (= (last operation) :exception))\n                        (assoc :trace (:prev acc))))\n              {}\n              @re-frame.trace/traces))\n     [:operation :op-type]))\n\n(defn register-exception-handler []\n  (let [gOldOnError js/window.onerror]\n    (set! js/window.onerror\n          (fn [error-msg url line-number]\n            (swap! (:events re-frame-data)\n                   concat\n                   [{:event          [:exception]\n                     :truncated-name :exception\n                     :error?         true\n                     :indx           (count @(:events re-frame-data))\n                     :error          (merge\n                                      (find-error-trace)\n                                      {:msg  error-msg\n                                       :url  url\n                                       :line line-number})}])\n            (if gOldOnError\n              (gOldOnError error-msg url line-number)\n              false)))))\n\n(defn patch-reagent! []\n  (patch-wrap-funs)\n  (patch-next-tick))\n\n(defn enable-re-frisk! [& [opts]]\n  (when-not @initialized\n    (reset! initialized true)\n    (swap! data/tool-state assoc :opts opts)\n    #_(register-exception-handler)\n    (if (re-frame.trace/is-trace-enabled?)\n      (do\n        (patch-reagent!)\n        (re-frame.trace/register-trace-cb :re-frisk-trace trace-cb))\n      (when-not (= (:events? opts) false)\n        (reset! prev-event {:app-db @db/app-db})\n        (re-frame/add-post-event-callback post-event-callback)))\n    (subs-graph/set-root-node (interop/reagent-id db/app-db))\n    (js/setTimeout ui/mount-internal 100 re-frame-data)))\n\n(defn enable [& [opts]]\n  (enable-re-frisk! opts))"]}