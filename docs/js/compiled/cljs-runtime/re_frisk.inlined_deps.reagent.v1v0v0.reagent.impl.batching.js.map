{"version":3,"sources":["re_frisk/inlined_deps/reagent/v1v0v0/reagent/impl/batching.cljs"],"mappings":"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","names":["js/re-frisk","js/re-frisk.inlined-deps","js/re-frisk.inlined-deps.reagent","js/re-frisk.inlined-deps.reagent.v1v0v0","js/re-frisk.inlined-deps.reagent.v1v0v0.reagent","js/re-frisk.inlined-deps.reagent.v1v0v0.reagent.impl","js/re-frisk.inlined-deps.reagent.v1v0v0.reagent.impl.batching","js/re-frisk.inlined-deps.reagent.v1v0v0.reagent.impl.batching.mount-count","re-frisk.inlined-deps.reagent.v1v0v0.reagent.impl.batching/mount-count","re-frisk.inlined-deps.reagent.v1v0v0.reagent.impl.batching/next-mount-count","re-frisk.inlined-deps.reagent.v1v0v0.reagent.impl.batching/fake-raf","f","js/setTimeout","re-frisk.inlined-deps.reagent.v1v0v0.reagent.impl.batching/next-tick","re-frisk.inlined-deps.reagent.v1v0v0.reagent.impl.util/is-client","w","js/window","or__4223__auto__","re-frisk.inlined-deps.reagent.v1v0v0.reagent.impl.batching/compare-mount-order","c1","c2","re-frisk.inlined-deps.reagent.v1v0v0.reagent.impl.batching/run-queue","a","n__4706__auto__","i","c","js/re-frisk.inlined-deps.reagent.v1v0v0.reagent.impl.batching.ratom-flush","re-frisk.inlined-deps.reagent.v1v0v0.reagent.impl.batching/ratom-flush","re-frisk.inlined-deps.reagent.v1v0v0.reagent.impl.batching/run-funs","fs","fexpr__32537","re-frisk.inlined-deps.reagent.v1v0v0.reagent.impl.batching/enqueue","queue","js/Error","this__4461__auto__","writer__4462__auto__","opt__4463__auto__","cljs.core/-write","re-frisk.inlined-deps.reagent.v1v0v0.reagent.impl.batching/RenderQueue","re-frisk.inlined-deps.reagent.v1v0v0.reagent.impl.batching/->RenderQueue","scheduled?","this","G__32572","temp__5757__auto__","js/re-frisk.inlined-deps.reagent.v1v0v0.reagent.impl.batching.render-queue","re-frisk.inlined-deps.reagent.v1v0v0.reagent.impl.batching/render-queue","re-frisk.inlined-deps.reagent.v1v0v0.reagent.impl.batching/flush","re-frisk.inlined-deps.reagent.v1v0v0.reagent.impl.batching/flush-after-render","re-frisk.inlined-deps.reagent.v1v0v0.reagent.impl.batching/queue-render","re-frisk.inlined-deps.reagent.v1v0v0.reagent.impl.batching/mark-rendered","re-frisk.inlined-deps.reagent.v1v0v0.reagent.impl.batching/do-before-flush","re-frisk.inlined-deps.reagent.v1v0v0.reagent.impl.batching/do-after-render","re-frisk.inlined-deps.reagent.v1v0v0.reagent.impl.batching/schedule"],"sourcesContent":["(ns ^{:mranderson/inlined true} re-frisk.inlined-deps.reagent.v1v0v0.reagent.impl.batching\n  (:refer-clojure :exclude [flush])\n  (:require [re-frisk.inlined-deps.reagent.v1v0v0.reagent.debug :refer-macros [assert-some]]\n            [re-frisk.inlined-deps.reagent.v1v0v0.reagent.impl.util :refer [is-client]]))\n\n;;; Update batching\n(set! *warn-on-infer* false)\n\n(defonce mount-count 0)\n\n(defn next-mount-count []\n  (set! mount-count (inc mount-count)))\n\n(defn fake-raf [f]\n  (js/setTimeout f 16))\n\n(def next-tick\n  (if-not is-client\n    fake-raf\n    (let [w js/window]\n      (.bind (or (.-requestAnimationFrame w)\n                 (.-webkitRequestAnimationFrame w)\n                 (.-mozRequestAnimationFrame w)\n                 (.-msRequestAnimationFrame w)\n                 fake-raf)\n             w))))\n\n(defn compare-mount-order\n  [^clj c1 ^clj c2]\n  (- (.-cljsMountOrder c1)\n     (.-cljsMountOrder c2)))\n\n(defn run-queue [a]\n  ;; sort components by mount order, to make sure parents\n  ;; are rendered before children\n  (.sort a compare-mount-order)\n  (dotimes [i (alength a)]\n    (let [^js/React.Component c (aget a i)]\n      (when (true? (.-cljsIsDirty c))\n        (.forceUpdate c)))))\n\n\n;; Set from ratom.cljs\n(defonce ratom-flush (fn []))\n\n(defn run-funs [fs]\n  (dotimes [i (alength fs)]\n    ((aget fs i))))\n\n(defn enqueue [^clj queue fs f]\n  (assert-some f \"Enqueued function\")\n  (.push fs f)\n  (.schedule queue))\n\n(deftype RenderQueue [^:mutable ^boolean scheduled?]\n  Object\n  (schedule [this]\n    (when-not scheduled?\n      (set! scheduled? true)\n      (next-tick #(.run-queues this))))\n\n  (queue-render [this c]\n    (when (nil? (.-componentQueue this))\n      (set! (.-componentQueue this) (array)))\n    (enqueue this (.-componentQueue this) c))\n\n  (add-before-flush [this f]\n    (when (nil? (.-beforeFlush this))\n      (set! (.-beforeFlush this) (array)))\n    (enqueue this (.-beforeFlush this) f))\n\n  (add-after-render [this f]\n    (when (nil? (.-afterRender this))\n      (set! (.-afterRender this) (array)))\n    (enqueue this (.-afterRender this) f))\n\n  (run-queues [this]\n    (set! scheduled? false)\n    (.flush-queues this))\n\n  (flush-before-flush [this]\n    (when-some [fs (.-beforeFlush this)]\n      (set! (.-beforeFlush this) nil)\n      (run-funs fs)))\n\n  (flush-render [this]\n    (when-some [fs (.-componentQueue this)]\n      (set! (.-componentQueue this) nil)\n      (run-queue fs)))\n\n  (flush-after-render [this]\n    (when-some [fs (.-afterRender this)]\n      (set! (.-afterRender this) nil)\n      (run-funs fs)))\n\n  (flush-queues [this]\n    (.flush-before-flush this)\n    (ratom-flush)\n    (.flush-render this)\n    (.flush-after-render this)))\n\n(defonce render-queue (->RenderQueue false))\n\n(defn flush []\n  (.flush-queues render-queue))\n\n(defn flush-after-render []\n  (.flush-after-render render-queue))\n\n(defn queue-render [^clj c]\n  (when-not (.-cljsIsDirty c)\n    (set! (.-cljsIsDirty c) true)\n    (.queue-render render-queue c)))\n\n(defn mark-rendered [^clj c]\n  (set! (.-cljsIsDirty c) false))\n\n(defn do-before-flush [f]\n  (.add-before-flush render-queue f))\n\n(defn do-after-render [f]\n  (.add-after-render render-queue f))\n\n(defn schedule []\n  (when (false? (.-scheduled? render-queue))\n    (.schedule render-queue)))\n"]}