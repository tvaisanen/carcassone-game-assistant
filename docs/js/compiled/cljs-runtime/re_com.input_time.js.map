{"version":3,"sources":["re_com/input_time.cljs"],"mappings":"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","names":["re-com.input-time/time->mins","time","cljs.core/rem","re-com.input-time/time->hrs","cljs.core/quot","re-com.input-time/to-int","s","val","js/parseInt","js/isNaN","p__36459","vec__36460","cljs.core.nth","re-com.input-time/triple->time","hr","_","mi","re-com.input-time/triple-seeking-re","re-com.input-time/extract-triple-from-text","text","cljs.core/re-matches","cljs.core/rest","cljs.core.filter","cljs.core.comp","cljs.core/not","cljs.core/nil?","re-com.input-time/text->time","cljs.core.map","re-com.input-time/time->text","hrs","mins","re-com.util/pad-zero-number","re-com.input-time/valid-text?","cljs.core._EQ_","cljs.core/count","re-com.input-time/valid-time?","re-com.input-time/validate-arg-times","model","minimum","maximum","js/Error","re-com.input-time/force-valid-time","min","max","previous","re-com.input-time/on-new-keypress","event","text-model","current-text","cljs.core/reset!","re-com.input-time/lose-focus-if-enter","ev","re-com.input-time/on-defocus","callback","previous-val","cljs.core/deref","and__4221__auto__","cljs.core.not_EQ_","re-com.input-time/input-time-args-desc","re-com.validate/number-or-string?","cljs.core/fn?","cljs.core/string?","re-com.validate/css-style?","re-com.validate/html-attr?","var_args","args__4835__auto__","len__4829__auto__","i__4830__auto__","argseq__4836__auto__","cljs.core/IndexedSeq","re-com.input-time/input-time","p__36488","map__36489","cljs.core/--destructure-map","cljs.core.get","seq36485","self__4817__auto__","cljs.core/seq","args","js/goog.DEBUG","re_com.validate.validate_args","re-com.validate/extract-arg-data","re-com.util/deref-or-value","deref-model","reagent.core.atom","previous-model","p__36491","map__36493","on-change","disabled?","show-icon?","hide-border?","width","height","class","style","attr","cljs.core.merge","new-val","re-com.box/h-box"],"sourcesContent":["(ns re-com.input-time\n  (:require-macros [re-com.core :refer [handler-fn]])\n  (:require [reagent.core    :as    reagent]\n            [re-com.validate :refer [css-style? html-attr? number-or-string?] :refer-macros [validate-args-macro]]\n            [re-com.text     :refer [label]]\n            [re-com.box      :refer [h-box gap]]\n            [re-com.util     :refer [pad-zero-number deref-or-value]]))\n\n\n(defn- time->mins\n  [time]\n  (rem time 100))\n\n\n(defn- time->hrs\n  [time]\n  (quot time 100))\n\n(defn- to-int\n  \"Parse the string 's' to a valid int. On parse failure, return 0\"\n  [s]\n  (let [val (js/parseInt s)]\n    (if (js/isNaN val) 0 val)))\n\n(defn- triple->time\n  \"Return a time integer from a triple int vector of form  [H  _  M]\"\n  [[hr _ mi]]\n  (+ (* hr 100) mi))                                        ;; a four digit integer:  HHMM\n\n\n;; This regular expression matchs all valid forms of time entry, including partial\n;; forms which happen during user entry.\n;; It is composed of 3 'or' options, separated by '|',  and within each, is a sub-re which\n;; attempts to match the HH ':' MM parts.\n;; So any attempt to match against this re, using \"re-matches\" will return\n;; a vector of 10 items:\n;;   - the 1st item will be the entire string matched\n;;   - followed by 3 groups of 3.\n(def ^{:private true}\n  triple-seeking-re #\"^(\\d{0,2})()()$|^(\\d{0,1})(:{0,1})(\\d{0,2})$|^(\\d{0,2})(:{0,1})(\\d{0,2})$\")\n\n(defn- extract-triple-from-text\n  [text]\n  (->> text\n       (re-matches triple-seeking-re)                       ;; looks for different ways of matching triples   H : M\n       (rest)                                               ;; get rid of the first value. It is the entire matched string.\n       (filter (comp not nil?))))                           ;; of the 9 items, there should be only 3 non-nil matches coresponding to  H : M\n\n\n(defn text->time\n  \"return as a time int, the contents of 'text'\"\n  [text]\n  (->> text\n       extract-triple-from-text\n       (map to-int)                                         ;; make them ints (or 0)\n       triple->time))                                       ;; turn the triple of values into a single int\n\n\n(defn time->text\n  \"return a string of format HH:MM for 'time'\"\n  [time]\n  (let [hrs  (time->hrs  time)\n        mins (time->mins time)]\n    (str (pad-zero-number hrs 2) \":\" (pad-zero-number mins 2))))\n\n(defn valid-text?\n  \"Return true if text passes basic time validation.\n   Can't do to much validation because user input might not be finished.\n   Why?  On the way to entering 6:30, you must pass through the invalid state of '63'.\n   So we only really check against the triple-extracting regular expression\"\n  [text]\n  (= 3 (count (extract-triple-from-text text))))\n\n(defn valid-time?\n  [time]\n  (cond\n    (nil? time) false                                       ;; can't be nil\n    (> 0 time) false                                        ;; must be a poistive number\n    (< 60 (time->mins time)) false                          ;; too many mins\n    :else true))\n\n(defn- validate-arg-times\n  [model minimum maximum]\n  (assert (and (number? model) (valid-time? model)) (str \"[input-time] given an invalid :model - \" model))\n  (assert (and (number? minimum) (valid-time? minimum)) (str \"[input-time] given an invalid :minimum - \" minimum))\n  (assert (and (number? maximum) (valid-time? maximum)) (str \"[input-time] given an invalid :maximum - \" maximum))\n  (assert (<= minimum maximum) (str \"[input-time] :minimum \" minimum \" > :maximum  \" maximum))\n  true)\n\n(defn- force-valid-time\n  \"Validate the time supplied.\n   Return either the time or, if it is invalid, return something valid\"\n  [time min max previous]\n  (cond\n    (nil? time) previous\n    (not (valid-time? time)) previous\n    (< time min) min\n    (< max time) max\n    :else time))\n\n(defn- on-new-keypress\n  \"Called each time the <input> field gets a keypress, or paste operation.\n   Rests  the text-model only if the new text is valid\"\n  [event text-model]\n  (let [current-text (-> event .-target .-value)]           ;; gets the current input field text\n    (when (valid-text? current-text)\n      (reset! text-model current-text))))\n\n(defn- lose-focus-if-enter\n  \"When Enter is pressed, force the component to lose focus\"\n  [ev]\n  (when (= (.-keyCode ev) 13)\n    (-> ev .-target .blur)\n    true))\n\n(defn- on-defocus\n  \"Called when the field looses focus.\n   Re-validate what has been entered, comparing to mins and maxs.\n   Invoke the callback as necessary\"\n  [text-model min max callback previous-val]\n  (let [time (text->time @text-model)\n        time (force-valid-time time min max previous-val)]\n    (reset! text-model (time->text time))\n    (when (and callback (not= time previous-val))\n      (callback time))))\n\n(def input-time-args-desc\n  [{:name :model        :required true                   :type \"integer | string | atom\" :validate-fn number-or-string? :description \"a time in integer form. e.g. '09:30am' is 930\"}\n   {:name :on-change    :required true                   :type \"integer -> nil\"          :validate-fn fn?               :description \"called when user entry completes and value is new. Passed new value as integer\"}\n   {:name :minimum      :required false :default 0       :type \"integer | string\"        :validate-fn number-or-string? :description \"user can't enter a time less than this value\"}\n   {:name :maximum      :required false :default 2359    :type \"integer | string\"        :validate-fn number-or-string? :description \"user can't enter a time more than this value\"}\n   {:name :disabled?    :required false :default false   :type \"boolean | atom\"                                         :description \"when true, user input is disabled\"}\n   {:name :show-icon?   :required false :default false   :type \"boolean\"                                                :description \"when true, a clock icon will be displayed to the right of input field\"}\n   {:name :hide-border? :required false :default false   :type \"boolean\"                                                :description \"when true, input filed is displayed without a border\"}\n   {:name :width        :required false                  :type \"string\"                  :validate-fn string?           :description \"standard CSS width setting for width of the input box (excluding the icon if present)\"}\n   {:name :height       :required false                  :type \"string\"                  :validate-fn string?           :description \"standard CSS height setting\"}\n   {:name :class        :required false                  :type \"string\"                  :validate-fn string?           :description \"CSS class names, space separated (applies to the textbox, not the wrapping div)\"}\n   {:name :style        :required false                  :type \"CSS style map\"           :validate-fn css-style?        :description \"CSS style. e.g. {:color \\\"red\\\" :width \\\"50px\\\"} (applies to the textbox, not the wrapping div)\" }\n   {:name :attr         :required false                  :type \"HTML attr map\"           :validate-fn html-attr?        :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed (applies to the textbox, not the wrapping div)\"]}])\n\n(defn input-time\n  \"I return the markup for an input box which will accept and validate times.\n   Parameters - refer input-time-args above\"\n  [& {:keys [model minimum maximum] :as args\n      :or   {minimum 0 maximum 2359}}]\n  {:pre [(validate-args-macro input-time-args-desc args \"input-time\")\n         (validate-arg-times (deref-or-value model) minimum maximum)]}\n  (let [deref-model    (deref-or-value model)\n        text-model     (reagent/atom (time->text deref-model))\n        previous-model (reagent/atom deref-model)]\n    (fn\n      [& {:keys [model on-change minimum maximum disabled? show-icon? hide-border? width height class style attr] :as args\n          :or   {minimum 0 maximum 2359}}]\n      {:pre [(validate-args-macro input-time-args-desc args \"input-time\")\n             (validate-arg-times (deref-or-value model) minimum maximum)]}\n      (let [style (merge (when hide-border? {:border \"none\"})\n                         style)\n            new-val (deref-or-value model)\n            new-val (if (< new-val minimum) minimum new-val)\n            new-val (if (> new-val maximum) maximum new-val)]\n        ;; if the model is different to that currently shown in text, then reset the text to match\n        ;; other than that we want to keep the current text, because the user is probably typing\n        (when (not= @previous-model new-val)\n          (reset! text-model (time->text new-val))\n          (reset! previous-model new-val))\n\n        [h-box\n         :class    \"rc-input-time\"\n         :style    {:height height}\n         :children [[:input\n                     (merge\n                       {:type      \"text\"\n                        :class     (str \"time-entry \" class)\n                        :style     (merge {:width width}\n                                          style)\n                        :value     @text-model\n                        :disabled  (deref-or-value disabled?)\n                        :on-change (handler-fn (on-new-keypress event text-model))\n                        :on-blur   (handler-fn (on-defocus text-model minimum maximum on-change @previous-model))\n                        :on-key-up (handler-fn (lose-focus-if-enter event))}\n                       attr)]\n                    (when show-icon?\n                      [:div.time-icon\n                       [:i.zmdi.zmdi-hc-fw-rc.zmdi-time\n                        {:style {:position \"static\" :margin \"auto\"}}]])]]))))\n"]}