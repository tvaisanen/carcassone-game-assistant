{"version":3,"sources":["game_assistant/utils.cljs"],"mappings":";AAKA;;;wCAAA,xCAAMA,wFAEHC;AAFH,AAGE,OAACC,cAAI,AAACC,8CAAMC,cAAIC,iBAAOJ;;AAEzB;;;gCAAA,hCAAMK,wEAEHC,KAAKC;AAFR,AAGE,IAAAC,WAAMD;IAANC,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AACS,OAACG,gBAAML;;;KADhB;AAEY,OAACM,eAAKN;;;KAFlB;AAGU,OAACK,gBAAM,AAACZ,sCAAiBO;;;KAHnC;AAIW,OAACM,eAAK,AAACb,sCAAiBO;;;;AAJnC,MAAA,KAAAI,MAAA,CAAA,mEAAAF;;;;AAMF;;;6CAAA,7CAAMK,kGAEHC,EAAEC,OAAOC,EAAEC;AAFd,AAGE,IAAMC,OAAK,AAACb,8BAASS,EAAEC;IACjBI,QAAM,AAACd,8BAASW,EAAEC;IAClBG,kBAAU,AAACC,6CAAEH,KAAKC;AAFxB,AAGE,uGAAA,vGAACG,mHAAkBJ,KAAKC,MAAMC;;AAC9BA;;AAEJ,mCAAA,nCAAMG,8EAAaC,UAAUlB;AAA7B,AACE,IAAAmB,WAAMD;AAAN,AAAA,QAAAC;KAAA;AACuBnB;;;KADvB;AAEuB,OAACP,sCAAiB,AAAC2B,kBAAQpB;;;KAFlD;AAGuB,IAAAqB,aAAkBrB;QAAlB,AAAAsB,4CAAAD,WAAA,IAAA,/DAAOb;QAAP,AAAAc,4CAAAD,WAAA,IAAA,/DAASX;QAAT,AAAAY,4CAAAD,WAAA,IAAA,/DAAWE;QAAX,AAAAD,4CAAAD,WAAA,IAAA,/DAAaG;QAAb,AAAAF,4CAAAD,WAAA,IAAA,/DAAeI;AAAf,AAAA,0FACGA,EAAE,AAACL,kBAAQI,GAAG,AAACJ,kBAAQG,GAAE,AAACH,kBAAQV,GAAKF;;;KAJjE;AAKuB,IAAAkB,aAAkB,AAACjC,sCAAiBO;QAApC,AAAAsB,4CAAAI,WAAA,IAAA,/DAAOlB;QAAP,AAAAc,4CAAAI,WAAA,IAAA,/DAAShB;QAAT,AAAAY,4CAAAI,WAAA,IAAA,/DAAWH;QAAX,AAAAD,4CAAAI,WAAA,IAAA,/DAAaF;QAAb,AAAAF,4CAAAI,WAAA,IAAA,/DAAeD;AAAf,AAAA,0FACGA,EAAED,EAAED,EAAEb,EAAEF;;;;AANlC,MAAA,KAAAJ,MAAA,CAAA,mEAAAe;;;;AAUF,IAAMQ,iIACShC,9EACA,8EAAA,cAAA,5FAACiC,kDAAUC,xFACX,iCAAA,jCAACZ;AAHhB,AAIE,yGAAA,zGAACa;;AACD,IAAAC,2BAAA,2CAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAC,cAAAH;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAE,6BAAAJ;AAAA,IAAAK,kBA84EiD,AAAAyG,sBAAA9G;IA94EjDM,qBAAA,AAAAC,gBAAAF;IAAAG,WAAA,AAAAC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAI,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAJ;AAAA,QAAA,AAAAK,eAAAN,gBAAAK,nCAAMS;AAAN,AAAA,AAAA,AAAAP,uBAAAJ,SACE,AAACV,yGAAQqB;;AADX,eAAA,CAAAT,WAAA;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,iCAAA,AAAAC,qBAAAhB;;AAAA,OAAAa,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,QAAA,AAAAnC,gBAAA2B,pBAAMmB;AAAN,AAAA,OAAAF,gIAAA,AAAAF,iCAAA,AAAAG,eAAAlB,jKACE,AAACF,yGAAQqB;;;AADX;;;;GAAA,KAAA;;AAAA,AAAA,AAAApB,yBAAQJ;AAQV,mCAAA,nCAAMyB,8EAAaC,OAAO1B;AAA1B,AACE,IAAM2B,2PAAa3B,dACDhC,9EACA,8EAAA,9EAACiC,kDAAUC,zHACX,AAACZ,iCAAY,iCAAA,fAAIoC,QAAOA,7EACxBE,5DACA,4DAAA,5DAAC3D,8CAAM4D;AALzB,AAOE,qGAAA,rGAACC,sHAAqB,AAAClB,gBAAMZ,MAAMA;;AACnC,qGAAA,rGAAC8B,sHAAqB,AAAClB,gBAAMe,SAASA;;AACtCA;;AAGJ,AA6BA,sCAAA,tCAAMI,oFAAgB/B;AAAtB,2EACOA,dAAKhC,7DAAI,yDAAA,IAAA,tDAACiC;;AAEjB,sCAAA,tCAAM+B,oFAAgBC;AAAtB,AAeO,OAACoB,kBACA,WAAAC;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAA3D,4CAAA4D,WAAA,IAAA,/DAAMC;QAAN,AAAA7D,4CAAA4D,WAAA,IAAA,/DAAQE;AAAR,AAAY,AAAC9E,eAAK8E;;AAAlB,0FACGD,EAAE,eAAA,gBAAIC,hBAAE/E,fAAMC;gMAdlB,AAACuD,4CAAI,WAAAG,zEASL,AAACT,tDACD,kDAAA,lDAAC3B,lGACD,AAACkD,mBAAS,AAAChB,6CAAKzD,gBAAM0E,nGAIrBM;AAfI,AAAA,IAAApB,aAAAD;IAAAE,aAAA,AAAA5C,4CAAA2C,WAAA,IAAA;UAAA,AAAA3C,4CAAA4C,WAAA,IAAA,jEAAOC;UAAP,AAAA7C,4CAAA4C,WAAA,IAAA,jEAAWE;QAAX,AAAA9C,4CAAA2C,WAAA,IAAA,/DAAgBI;AAAhB,AAIO,OAACR,4CACA,WAAAY;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAAnD,4CAAAoD,WAAA,IAAA,/DAAMF;SAAN,AAAAlD,4CAAAoD,WAAA,IAAA,hEAAQC;AAAR,AACE,2DAAA,WAAAC,iBAAAC,hFAACP;AAAD,AAAc,AAAA,6JAAAO,nEAAK,CAAG,CAAA,MAAKV,OAAK,KAAA,JAAGK,UAChB,CAAG,CAAA,MAAKJ,OAAK,CAAAQ,mBAAA;GACRD;GAL3B,AAACL,oDAAY,WAAKC,EAAEC;AAAP,AAAA,0FAAWD,EAAEC;yDAF1BH,tDACA,kDAAA,lDAACzC;uYAJbgC,pYACA,AAACC,4CAAI,mSAAA,nSAACC,6CAAK,kMAAA,lMAACC,6CAAK,6CAAA,mDAAA,hGAACD;;AAkBzB,2CAAA,mDAAAwB,9FAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;UAAA,AAAAE,4CAAAF,eAAA,jEAAmCpB;UAAnC,AAAAsB,4CAAAF,eAAA,jEAAuCnB;UAAvC,AAAAqB,4CAAAF,eAAA,jEAA2CI;AAA3C,AACE,IAAAC,aAAc,4CAAA,WAAAG,vDAAClC;AAAD,AAAM,QAAA,MAAAkC;GAAN,mFAAe5B,IAAIC;SAAjC,AAAA9C,4CAAAsE,WAAA,IAAA,hEAAOC;SAAP,AAAAvE,4CAAAsE,WAAA,IAAA,hEAAUE;IACJE,SAAQ,+CAAA,/CAACC,mDAAS,8CAAA,9CAACC;IACnBC,KAAQ,AAACvG,8CAAMwG,qBAAWJ;IAC1BK,KAAQ,AAAC1G,cAAI,AAAC4D,kBAAQyC;IACtBM,SAGa,AAACC,6CAAK,WAAAC;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAAlF,4CAAAmF,WAAA,IAAA,/DAAMC;QAAN,AAAApF,4CAAAmF,WAAA,IAAA,/DAAQE;AAAR,AAAA,0FACG,CAAA,WAAA,VAAGd,KAAIa,WAAM,CAAA,WAAA,VAAGZ,KAAGa;+MAJ3BR,GAAGE,zJACJ,mEAAA,nEAACzG,8CAAMwG,pGACP,kDAAA,lDAACxE;AANpB,AASE,OAAC6D,4CAAIa,OAAOX;;AAEhB,2CAAA,3CAAMiB,8FAAqBhD;AAA3B,AACE,IAAMkD,YAEkB,AAAC9B,kBACA,WAAA+B;AAAA,AAAA,IAAAC,aAAAD;QAAA,AAAAzF,4CAAA0F,WAAA,IAAA,/DAAM7B;QAAN,AAAA7D,4CAAA0F,WAAA,IAAA,/DAAQ5B;AAAR,AAAY,AAAC3B,qGAAI0B;;AAAjB,0FACGA,0eAAOC,rMACA,AAAC6B,gDAAQ,6CAAA,oDAAA,jGAAClD,nVACV,AAACF,4CAAI,kMAAA,lMAACC,6CAAK,6CAAA,oDAAA,jGAACC;6LANvBH,vKACA,AAACkB,mBAAS,6CAAA,mDAAA,hGAACf,tCAMVsB;IAPzBwB,aAQmB,AAACjH,8CAAM,AAACkE,6CAAKoD,cAAIC,eAAK,AAACtD,4CAAI,6CAAA,oDAAA,jGAACE,qJAAgBH;WAR/D,AAAAtC,4CAAAuF,WAAA,IAAA,lEAQOjG;YARP,AAAAU,4CAAAuF,WAAA,IAAA,nEAQYhG;IACNuG,YAAa,AAAClB,8CAAMtF,KAAK,CAAA,MAAKC;QATpC,JAUMwG;IACAC,cAAa,AAAC1H,8CAAM4D,cAAI,+CAAA,KAAA,pDAACyC;AAX/B,AAYE,IAAAlE,qBAAA,iEAAAwF;AAAA,AAAA,YAAAtF,kBAAA,KAAA;AAAA,AAAA,IAAAsF,eAAAA;;AAAA,AAAA,IAAArF,qBAAA,AAAAC,cAAAoF;AAAA,AAAA,GAAArF;AAAA,AAAA,IAAAqF,eAAArF;AAAA,AAAA,GAAA,AAAAE,6BAAAmF;AAAA,IAAAlF,kBA4yE+C,AAAAyG,sBAAAvB;IA5yE/CjF,qBAAA,AAAAC,gBAAAF;IAAAmF,WAAA,AAAA/E,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAmF,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAnF;AAAA,IAAAoF,aAAA,AAAA/E,eAAAN,gBAAAoF;QAAA,AAAAnG,4CAAAoG,WAAA,IAAA,/DAAOG;UAAP,AAAAvG,4CAAAoG,WAAA,IAAA,jEAASvD;AAAT,AAAA,AAAA,AAAAvB,uBAAA4E,SACE,iBAAMM,OAAa3D;IACb4D,UAAa,AAAClE,4CAAIxD,gBAAMyH;IACxBE,OAAa,6CAAA,7CAACC,+EAASF;IACvBG,SAAa,+CAAA,/CAACE;kBAADD;AAAA,AAAS,kGAAAA,3FAAC,AAACpE,6CAAKsE,cAAIC,2BAAWN;;CAAQZ;IACpDmB,UAAa,AAAC1E,4CAAI;kBAAKU;AAAL,AAAA,0FAASA,EAAE+C;;CAAcY;IAC3CM,eAAa,AAACvB,gDAAQ5G,gBAAM,AAACoI,+CAAOX,KAAKS;AAL/C,kLAOO,AAAC1E,4CAAI,/GAEL,AAACjE,8CAAMwG,hEACP,AAAC7C,7FACD,OAAC3B,kDAAU,CAAGyF,IAAE,AAAC9E,gBAAMiG;kBAJlBE;AAAA,AAAA,IAAAC,aAAAD;YAAA,AAAApH,4CAAAqH,WAAA,IAAA,nEAAMd;QAAN,AAAAvG,4CAAAqH,WAAA,IAAA,/DAAQnH;AAAR,AACE,OAACI,kDAAUyF,EAAE7F;;CAFpBgH;;;AAPT,eAAA,CAAAf,WAAA;;;;AAAA;;;;;AAAA,OAAA5E,qBAAA,AAAAC,gBAAA0E,UAAA,AAAAG,uDAAA,AAAA3E,qBAAAuE;;AAAA,OAAA1E,qBAAA,AAAAC,gBAAA0E,UAAA;;;AAAA,IAAAI,aAAA,AAAAvH,gBAAAkH;QAAA,AAAAjG,4CAAAsG,WAAA,IAAA,/DAAOC;UAAP,AAAAvG,4CAAAsG,WAAA,IAAA,jEAASzD;AAAT,AAAA,OAAAlB,eACE,iBAAM6E,OAAa3D;IACb4D,UAAa,AAAClE,4CAAIxD,gBAAMyH;IACxBE,OAAa,6CAAA,7CAACC,+EAASF;IACvBG,SAAa,+CAAA,/CAACE;kBAADD;AAAA,AAAS,kGAAAA,3FAAC,AAACpE,6CAAKsE,cAAIC,2BAAWN;;CAAQZ;IACpDmB,UAAa,AAAC1E,4CAAI;kBAAKU;AAAL,AAAA,0FAASA,EAAE+C;;CAAcY;IAC3CM,eAAa,AAACvB,gDAAQ5G,gBAAM,AAACoI,+CAAOX,KAAKS;AAL/C,kLAOO,AAAC1E,4CAAI,/GAEL,AAACjE,8CAAMwG,hEACP,AAAC7C,7FACD,OAAC3B,kDAAU,CAAGyF,IAAE,AAAC9E,gBAAMiG;kBAJlBI;AAAA,AAAA,IAAAC,aAAAD;YAAA,AAAAtH,4CAAAuH,WAAA,IAAA,nEAAMhB;QAAN,AAAAvG,4CAAAuH,WAAA,IAAA,/DAAQrH;AAAR,AACE,OAACI,kDAAUyF,EAAE7F;;CAFpBgH;KAPT,AAAAb,uDAAA,AAAAzE,eAAAqE;;;AAAA;;;;GAAA,KAAA;;AAAA,AAAA,OAAAxF,mBAAc,AAACI,cAAI2E","names":["game-assistant.utils/transpose-matrix","m","cljs.core/vec","cljs.core.apply","cljs.core/map","cljs.core/vector","game-assistant.utils/get-side","card","side","G__39902","cljs.core/Keyword","js/Error","cljs.core/first","cljs.core/last","game-assistant.utils/tiles-can-join?","a","a-side","b","b-side","left","right","can-join?","cljs.core._EQ_","cljs.core.print","game-assistant.utils/rotate-card","direction","G__39908","cljs.core/reverse","vec__39909","cljs.core.nth","c","d","e","vec__39912","tile","cljs.core.partition","game-assistant.db/tile-size","cljs.core.println","iter__4622__auto__","s__39916","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4620__auto__","size__4621__auto__","cljs.core/count","b__39918","cljs.core/chunk-buffer","i__39917","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__39915","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","p","game-assistant.utils/rotate-tile","rotate","rotated","cljs.core/flatten","cljs.core/str","cljs.core.prn","game-assistant.utils/tile-to-matrix","game-assistant.utils/tiles-to-graph","tiles","cljs.core.map","cljs.core.juxt","cljs.core.comp","p__39925","vec__39926","vec__39929","row","col","t","cljs.core.map_indexed","i","r","p__39932","vec__39933","tr","p1__39919#","p2__39920#","cljs.core/group-by","cljs.core/second","clojure.walk/walk","p__39921","vec__39922","k","v","cljs.core/identity","p__39937","map__39938","cljs.core/--destructure-map","cljs.core.get","game-assistant.utils/tile-to-graph-coord","idx","vec__39939","xd","yd","p1__39936#","source","cljs.core.repeat","cljs.core.range","xs","cljs.core/interleave","ys","coords","cljs.core.mapv","p__39942","vec__39943","x","y","game-assistant.utils/tiles-to-graph-grid","vec__39947","collected","p__39950","vec__39951","cljs.core.sort_by","cljs.core/min","cljs.core/max","col-range","n","filler-tile","s__39955","b__39957","i__39956","vec__39958","iter__39954","vec__39965","_","data","indices","cols","cljs.core.into","impute","p1__39946#","cljs.core.filter","cljs.core/not","cljs.core/contains?","imputed","imputed-data","cljs.core.concat","p__39961","vec__39962","p__39968","vec__39969","cljs.core/chunk-first"],"sourcesContent":["(ns game-assistant.utils\n  (:require [clojure.string :as string]\n            [clojure.walk]\n            [game-assistant.db :refer [tile-size]]))\n\n(defn transpose-matrix\n  \"Transpose a matrix. Rows to columns\"\n  [m]\n  (vec (apply map vector m)))\n\n(defn get-side\n  \"Get the border vector of a card.\"\n  [card side]\n  (case side\n    (:top) (first card)\n    (:bottom) (last card)\n    (:left) (first (transpose-matrix card))\n    (:right) (last (transpose-matrix card))))\n\n(defn tiles-can-join?\n  \"Can card a and card b joined\"\n  [a a-side b b-side]\n  (let [left (get-side a a-side)\n        right (get-side b b-side)\n        can-join? (= left right)]\n    (print \"compare: \" left right can-join?)\n    can-join?))\n\n(defn rotate-card [direction card]\n  (case direction\n    0                    card\n    90                   (transpose-matrix (reverse card))\n    180                  (let [[a b c d e] card]\n                           [e (reverse d) (reverse c)(reverse b)   a])\n    270                  (let [[a b c d e] (transpose-matrix card)]\n                           [e d c b a])))\n\n\n\n(let [tile (->> \"1111122222333334444455555\"\n               vec\n               (partition tile-size)\n               (rotate-card 90))]\n  (println \"--------\")\n  (for [p tile]\n    (println p))\n  )\n\n;; 1 0 0\n;; 0 1 0\n;; 0 0 1\n\n(defn rotate-tile [rotate tile]\n  (let [rotated (->> tile\n                    vec\n                    (partition tile-size)\n                    (rotate-card (if rotate rotate 0))\n                    flatten\n                    (apply str))]\n\n    (prn \"rotate::  in: \" (count tile) tile)\n    (prn \"rotate:: out: \" (count rotated) rotated)\n    rotated\n    ))\n\n(comment\n  ;; 111\n  ;; 222\n  ;; 333\n  (->> \"111222333\"\n       (rotate-tile 90)\n       (rotate-tile 90)\n       (rotate-tile 90)\n       (rotate-tile 90))\n\n  (->> \"100010001\"\n       (rotate-tile 90)\n       (rotate-tile 90))\n  ;; 100\n  ;; 010\n  ;; 001\n  ;; 100\n  ;; 010\n  ;; 001\n  (->> \"111222333\"\n       (rotate-tile -90)\n       (rotate-tile -90)\n       (rotate-tile -90)\n       (rotate-tile -90))\n  ;; 321\n  ;; 321\n  ;; 321\n  )\n\n(defn tile-to-matrix [tile]\n  (->> tile vec (partition 5)))\n\n(defn tiles-to-graph [tiles]\n  (->> tiles\n       (map (juxt (comp (juxt :row :col) :loc) :tile))\n       (map (fn [[[row col] t]]\n              (->> t\n                   (partition 5)\n                   (map-indexed (fn [i r] [i r]))\n                   (map\n                    (fn [[r tr]]\n                      (map-indexed #(do [(+ (* 5 row) (- r 2))\n                                         (+ (* 5 col) (- %1 2))\n                                         %2]) tr))))))\n       (flatten)\n       (partition 3)\n       (group-by (juxt first second))\n       (clojure.walk/walk\n        (fn [[k v]] (last v)\n          [k (-> v first last)])\n        identity)))\n\n(defn tile-to-graph-coord [{:keys [row col idx]}]\n  (let [[xd yd] (map #(* 5 %) [row col])\n        source  (repeat 5 (range 5))\n        xs      (apply interleave source)\n        ys      (vec (flatten source))\n        coords  (->> [xs ys]\n                     (apply interleave)\n                     (partition 2)\n                     (mapv (fn [[x y]]\n                             [(+ xd  x -2) (+ yd y -2)])))]\n    (get coords idx)))\n\n(defn tiles-to-graph-grid [tiles]\n  (let [collected    (->> tiles\n                          (group-by (comp :row :loc))\n                          (clojure.walk/walk\n                           (fn [[k v]] (prn k)\n                             [k (->> v\n                                     (sort-by (comp :col :loc))\n                                     (map (juxt (comp :col :loc) :tile)))])\n                           identity))\n        [left right] (apply (juxt min max) (map (comp :col :loc) tiles))\n        col-range    (range left (+ 1 right))\n        n            5\n        filler-tile  (apply str (repeat 25 \"*\"))]\n    (for [[_ row] (seq collected)]\n      (let [data         row\n            indices      (map first data)\n            cols         (into #{} indices)\n            impute       (filter #((comp not contains?) cols %) col-range)\n            imputed      (map (fn [i] [i filler-tile]) impute)\n            imputed-data (sort-by first (concat data imputed))]\n        (->> imputed-data\n             (map (fn [[_ d]]\n                    (partition n d)))\n             (apply interleave)\n             (flatten)\n             (partition (* n (count imputed-data)))\n             ;(map println)\n             )))))\n"]}