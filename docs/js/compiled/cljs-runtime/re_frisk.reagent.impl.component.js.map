{"version":3,"sources":["re_frisk/reagent/impl/component.cljs"],"mappings":"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","names":["re-frisk.reagent.impl.component/operation-name","cljs.core/memoize","c","cljs.core/last","clojure.string.split","reagent.impl.component/component-name","re-frisk.reagent.impl.component/wrap-funs","fmap","compiler","renders","cljs.core/select-keys","render-fun","cljs.core/vals","cljs.core/first","js/Error","cljs.core/not","cljs.core/count","cljs.core/ifn?","cljs.core.pr_str","or__4223__auto__","legacy-render","name","reagent.impl.util/fun-name","cljs.core.gensym","cljs.core/reduce-kv","m","k","v","cljs.core.assoc","reagent.impl.component/get-wrapper","re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__39329","re-frame.trace/*current-trace*","*current-trace*-temp-val__39330","re-frame.trace/start-trace","end__31855__auto__","re-frame.interop/now","duration__31856__auto__","cljs.core.swap_BANG_","re-frame.trace/traces","cljs.core/conj","re-frame.trace/run-tracing-callbacks!","goog.object/get","temp__5753__auto__","f","*current-trace*-orig-val__39331","*current-trace*-temp-val__39332","*current-trace*-orig-val__39341","*current-trace*-temp-val__39342","temp__5751__auto__","component-name","reagent.impl.util/*non-reactive*","reagent.impl.component/do-render","rat","_","reagent.impl.batching/mark-rendered","res","reagent.ratom/run-in-reaction","reagent.impl.batching/queue-render","reagent.impl.component/rat-opts","cljs-ratom","new-trace__31857__auto__","cljs.core.merge","cljs.core.update","cljs.core/merge","cljs.core.dissoc","re-frame.interop/reagent-id","cljs.core.map","re-frisk.reagent.impl.component/patch-wrap-funs","reagent.impl.component/wrap-funs"],"sourcesContent":["(ns re-frisk.reagent.impl.component\n  (:require\n   [goog.object            :as gobj]\n   [clojure.string         :as string]\n   [re-frame.trace         :as trace :include-macros true]\n   [re-frame.interop       :as interop]\n   [reagent.impl.component :as component]\n   [reagent.impl.batching  :as batch]\n   [reagent.impl.util      :as util]\n   [reagent.ratom          :as ratom]\n   [reagent.debug          :refer-macros [dev? warn error warn-unless assert-callable]]))\n\n(def operation-name (memoize (fn [c] (last (string/split (component/component-name c) #\" > \")))))\n\n;; Monkey patched reagent.impl.component/wrap-funs to hook into render\n(defn wrap-funs [fmap compiler]\n  (when (dev?)\n    (let [renders (select-keys fmap [:render :reagentRender])\n          render-fun (-> renders vals first)]\n      (assert (not (:componentFunction fmap)) \":component-function is no longer supported, use :reagent-render instead.\")\n      (assert (pos? (count renders)) \"Missing reagent-render\")\n      (assert (== 1 (count renders)) \"Too many render functions supplied\")\n      (assert-callable render-fun)))\n  (let [render-fun (or (:reagentRender fmap)\n                       (:render fmap))\n        legacy-render (nil? (:reagentRender fmap))\n        name (or (:displayName fmap)\n                 (util/fun-name render-fun)\n                 (str (gensym \"reagent\")))\n        fmap (reduce-kv (fn [m k v]\n                          (assoc m k (component/get-wrapper k v)))\n                        {} fmap)]\n    (assoc fmap\n      :displayName name\n      :cljsLegacyRender legacy-render\n      :reagentRender render-fun\n      :componentDidMount (fn componentDidMount []\n                           (this-as c\n                             (trace/with-trace\n                              {:op-type   :componentDidMount\n                               :operation (operation-name c)\n                               :tags      {:order (gobj/get c \"cljsMountOrder\")}})\n                             (when-let [f (:componentDidMount fmap)]\n                               (.call f c))))\n      :componentWillUnmount (fn componentWillUnmount []\n                              (this-as c\n                                (trace/with-trace\n                                 {:op-type   :componentWillUnmount\n                                  :operation (operation-name c)})\n                                (when-let [f (:componentWillUnmount fmap)]\n                                  (.call f c))))\n      ;:shouldComponentUpdate\n      #_(fn shouldComponentUpdate [nextprops nextstate]\n          (this-as c\n            (trace/with-trace\n             {:op-type   :should-upd\n              :operation (operation-name c)}\n             (when-let [f (:shouldComponentUpdate fmap)]\n               (.call f c nextprops nextstate)))))\n      :render (fn render []\n                (this-as c\n                  (trace/with-trace\n                   {:op-type :render\n                    :tags    (if-let [component-name (component/component-name c)]\n                               {:component-name component-name}\n                               {})\n                    :operation (operation-name c)}\n                   (if util/*non-reactive*\n                     (component/do-render c compiler)\n                     (let [^clj rat (gobj/get c \"cljsRatom\")\n                           _        (batch/mark-rendered c)\n                           res      (if (nil? rat)\n                                      (ratom/run-in-reaction #(component/do-render c compiler) c \"cljsRatom\"\n                                                             batch/queue-render component/rat-opts)\n                                      (._run rat false))\n                           cljs-ratom (gobj/get c \"cljsRatom\")]\n                       (trace/merge-trace!\n                        {:tags {:reaction (interop/reagent-id cljs-ratom)\n                                :input-signals (when cljs-ratom\n                                                 (map interop/reagent-id (gobj/get cljs-ratom \"watching\" :none)))}})\n                       res))))))))\n\n(defn patch-wrap-funs\n  []\n  (set! reagent.impl.component/wrap-funs wrap-funs))\n\n;(defonce original-create-class reagent.impl.component/create-class)\n\n#_(defn create-class\n    [body compiler]\n    (trace/with-trace\n     {:op-type :create-class}\n     (let [cmp (original-create-class body compiler)]\n       (trace/merge-trace!\n        {:operation (.-displayName cmp)})\n       cmp)))\n"]}