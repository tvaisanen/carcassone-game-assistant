{"version":3,"sources":["re_com/typeahead.cljs"],"mappings":"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","names":["p__38141","map__38143","cljs.core/--destructure-map","cljs.core.get","re-com.typeahead/make-typeahead-state","args","on-change","rigid?","change-on-blur?","immediate-model-update?","data-source","suggestion-to-string","debounce-delay","model","external-model-value","re-com.util/deref-or-value","G__38149","c-input","cljs.core.async.chan","or__4223__auto__","cljs.core/str","re-com.typeahead/debounce","re-com.typeahead/display-suggestion","p__38156","map__38157","re-com.typeahead/event-updates-model?","state","event","G__38182","cljs.core/Keyword","and__4221__auto__","cljs.core/not","p__38190","map__38192","re-com.typeahead/event-displays-suggestion?","G__38195","p__38200","map__38201","re-com.typeahead/update-model","new-value","cljs.core.assoc","p__38205","map__38207","suggestion","suggestion-string","G__38209","re-com.typeahead/clear-suggestions","cljs.core.dissoc","p__38240","map__38242","re-com.typeahead/activate-suggestion-by-index","suggestions","index","cljs.core.nth","G__38244","p__38251","map__38253","re-com.typeahead/choose-suggestion-by-index","p__38259","map__38269","re-com.typeahead/choose-suggestion-active","suggestion-active-index","G__38270","re-com.typeahead/wrap","count","cljs.core/mod","p__38278","map__38279","re-com.typeahead/activate-suggestion-next","G__38280","cljs.core/seq","cljs.core/count","p__38284","map__38285","re-com.typeahead/activate-suggestion-prev","G__38287","re-com.typeahead/reset-typeahead","G__38316","re-com.typeahead/got-suggestions","p__38317","map__38318","re-com.typeahead/input-text-will-blur","input-text","displaying-suggestion?","re-com.typeahead/change-data-source","re-com.typeahead/external-model-changed","re-com.typeahead/search-data-source!","state-atom","text","temp__5751__auto__","return-value","G__38359","G__38360","p1__38330#","cljs.core.swap_BANG_","cljs.core/assoc","re-com.typeahead/search-data-source-loop!","c-search","c__36291__auto__","cljs.core.async.impl.dispatch/run","f__36292__auto__","switch__36196__auto__","state_38389","state_val_38390","statearr-38395","cljs.core.async.impl.ioc-helpers/take!","inst_38386","cljs.core.async.impl.ioc-helpers/return-chan","inst_38372","inst_38373","cljs.core/deref","inst_38374","inst_38375","statearr-38400","statearr-38401","statearr-38414","inst_38377","inst_38378","statearr-38415","statearr-38416","inst_38380","statearr-38417","inst_38382","statearr-38418","statearr-38419","statearr-38420","state-machine__36197__auto__","ret-value__36198__auto__","result__36199__auto__","cljs.core/keyword-identical?","ex__36200__auto__","e38421","statearr-38422","statearr-38423","cljs.core/first","state__36293__auto__","statearr-38425","cljs.core.async.impl.ioc-helpers/USER-START-IDX","cljs.core.async.impl.ioc-helpers/run-state-machine-wrapped","cljs.core._EQ_","re-com.typeahead/input-text-on-change!","new-text","map__38433","cljs.core.async.put_BANG_","p1__38428#","G__38437","re-com.typeahead/input-text-on-key-down!","pred__38447","expr__38448","cljs.core/=","js/goog.events.KeyCodes.UP","js/goog.events.KeyCodes.DOWN","js/goog.events.KeyCodes.ENTER","js/goog.events.KeyCodes.ESC","js/goog.events.KeyCodes.TAB","cljs.core/not-empty","re-com.typeahead/typeahead-args-desc","cljs.core/fn?","cljs.core/integer?","re-com.validate/input-status-type?","re-com.validate/input-status-types-list","cljs.core/string?","re-com.validate/css-style?","re-com.validate/html-attr?","var_args","args__4835__auto__","len__4829__auto__","i__4830__auto__","argseq__4836__auto__","cljs.core/IndexedSeq","re-com.typeahead/typeahead","p__38479","map__38480","js/Error","seq38474","self__4817__auto__","js/goog.DEBUG","re_com.validate.validate_args","re-com.validate/extract-arg-data","map__38482","reagent.core.atom","input-text-model","reagent.core/cursor","p__38485","map__38488","_on-change","_change-on-blur?","_immediate-model-update?","_debounce-delay","render-suggestion","_suggestion-to-string","_rigid?","status","status-icon?","status-tooltip","placeholder","width","height","disabled?","class","style","attr","map__38492","waiting?","external-model","last-data-source","latest-external-model","cljs.core.not_EQ_","re-com.box/v-box","re-com.misc/input-text","cljs.core.partial","re-com.box/box","re-com.misc/throbber","iter__4622__auto__","s__38495","cljs.core/LazySeq","temp__5753__auto__","cljs.core/chunked-seq?","c__4620__auto__","size__4621__auto__","b__38497","cljs.core/chunk-buffer","i__38496","vec__38499","cljs.core/-nth","cljs.core/chunk-append","p1__38473#","cljs.core/chunk-cons","cljs.core/chunk","iter__38494","cljs.core/chunk-rest","vec__38509","cljs.core/cons","cljs.core/rest","i","s","cljs.core.map","cljs.core/vector","cljs.core.range","selected?","in","ms","out","state_38614","state_val_38615","inst_38557","statearr-38619","inst_38548","statearr-38622","statearr-38623","inst_38597","statearr-38626","statearr-38627","inst_38584","inst_38599","statearr-38630","statearr-38632","inst_38562","inst_38576","inst_38560","inst_38578","cljs.core/PersistentVector","inst_38579","inst_38580","statearr-38634","cljs.core.async/ioc-alts!","statearr-38637","inst_38611","cljs.core.async.impl.ioc-helpers/put!","inst_38552","statearr-38641","statearr-38642","inst_38608","statearr-38644","statearr-38645","inst_38582","inst_38591","inst_38592","statearr-38649","statearr-38650","statearr-38652","inst_38606","statearr-38654","inst_38583","statearr-38679","inst_38594","statearr-38680","statearr-38681","inst_38604","statearr-38682","inst_38585","statearr-38683","statearr-38684","statearr-38685","statearr-38686","e38687","statearr-38688","statearr-38689","statearr-38691","cljs.core.async/timeout","cljs.core/chunk-first"],"sourcesContent":["(ns re-com.typeahead\n  (:require-macros [re-com.core :refer [handler-fn]]\n                   [cljs.core.async.macros :refer [alt! go-loop]])\n  (:require [cljs.core.async :refer [chan timeout <! put!]]\n            [re-com.misc     :refer [throbber input-text]]\n            [re-com.util     :refer [deref-or-value px]]\n            [re-com.popover  :refer [popover-tooltip]] ;; need?\n            [re-com.box      :refer [h-box v-box box gap line flex-child-style align-style]] ;; need?\n            [re-com.validate :refer [input-status-type? input-status-types-list regex? string-or-hiccup? css-style? html-attr? number-or-string?\n                                     string-or-atom? throbber-size? throbber-sizes-list] :refer-macros [validate-args-macro]]\n            [reagent.core    :as    reagent]\n            [goog.events.KeyCodes]))\n\n;; TODO\n;; ability to focus & blur the input-text would be nice... this is also missing from input-text\n;; the typeahead should blur the input-text after a selection is chosen\n\n(declare debounce display-suggestion)\n(defn- make-typeahead-state\n  \"Return an initial value for the typeahead state, given `args`.\"\n  [{:as args :keys [on-change rigid? change-on-blur? immediate-model-update? data-source suggestion-to-string debounce-delay model]}]\n  (let [external-model-value (deref-or-value model)]\n    (cond-> (let [c-input (chan)]\n              {:input-text \"\"\n               :external-model (deref-or-value model)\n               :model          (deref-or-value model)\n               :waiting? false\n               :suggestions []\n               :displaying-suggestion? false\n               :suggestion-to-string (or suggestion-to-string str)\n               :data-source data-source\n               :change-on-blur? change-on-blur?\n               :immediate-model-update? immediate-model-update?\n               :on-change  on-change\n               :rigid?     rigid?\n               :c-input    c-input\n               :c-search   (debounce c-input debounce-delay)})\n      external-model-value\n      (display-suggestion external-model-value))))\n\n;; ------------------------------------------------------------------------------------\n;; State predicates:  state -> value? -> boolean\n;; ------------------------------------------------------------------------------------\n\n(defn- event-updates-model?\n  \"Should `event` update the `typeahead` `model`?\"\n  [{:as state :keys [change-on-blur? rigid? immediate-model-update?]} event]\n  (let [change-on-blur?         (deref-or-value change-on-blur?)\n        immediate-model-update? (deref-or-value immediate-model-update?)\n        rigid?                  (deref-or-value rigid?)]\n    (case event\n      :input-text-blurred   (and change-on-blur? (not rigid?))\n      :suggestion-activated (not change-on-blur?)\n      :input-text-changed   (and (not rigid?) (or (not change-on-blur?) immediate-model-update?))\n      false)))\n\n(defn- event-displays-suggestion?\n  \"Should `event` cause the `input-text` value to be used to show the active suggestion?\"\n  [{:as state :keys [change-on-blur?]} event]\n  (let [change-on-blur? (deref-or-value change-on-blur?)]\n    (case event\n      :suggestion-activated (not change-on-blur?)\n      false)))\n\n;; ------------------------------------------------------------------------------------\n;; State update helpers: state -> value? -> next-state\n;;   all pure, _except_ that they may call `on-change`\n;; ------------------------------------------------------------------------------------\n\n(defn- update-model\n  \"Change the `typeahead` `model` value to `new-value`\"\n  [{:as state :keys [on-change]} new-value]\n  (when on-change (on-change new-value))\n  (assoc state :model new-value))\n\n(defn- display-suggestion\n  \"Change the `input-text` `model` to the string representation of `suggestion`\"\n  [{:as state :keys [suggestion-to-string]} suggestion]\n  (let [suggestion-string (suggestion-to-string suggestion)]\n    (cond-> state\n      suggestion-string (assoc :input-text suggestion-string\n                               :displaying-suggestion? true))))\n\n(defn- clear-suggestions\n  [state]\n  (-> state\n      (dissoc :suggestions :suggestion-active-index)))\n\n(defn- activate-suggestion-by-index\n  \"Make the suggestion at `index` the active suggestion\"\n  [{:as state :keys [suggestions]} index]\n  (let [suggestion (nth suggestions index)]\n    (cond-> state\n      :always (assoc :suggestion-active-index index)\n      (event-updates-model?       state :suggestion-activated) (update-model suggestion)\n      (event-displays-suggestion? state :suggestion-activated) (display-suggestion suggestion))))\n\n(defn- choose-suggestion-by-index\n  \"Choose the suggestion at `index`\"\n  [{:as state :keys [suggestions]} index]\n  (let [suggestion (nth suggestions index)]\n    (-> state\n        (activate-suggestion-by-index index)\n        (update-model suggestion)\n        (display-suggestion suggestion)\n        clear-suggestions)))\n\n(defn- choose-suggestion-active\n  [{:as state :keys [suggestion-active-index]}]\n  (cond-> state\n    suggestion-active-index (choose-suggestion-by-index suggestion-active-index)))\n\n(defn- wrap [index count] (mod (+ count index) count))\n\n(defn- activate-suggestion-next\n  [{:as state :keys [suggestions suggestion-active-index]}]\n  (cond-> state\n    (seq suggestions)\n    (activate-suggestion-by-index (-> suggestion-active-index (or -1) inc (wrap (count suggestions))))))\n\n(defn- activate-suggestion-prev\n  [{:as state :keys [suggestions suggestion-active-index]}]\n  (cond-> state\n    (seq suggestions)\n    (activate-suggestion-by-index (-> suggestion-active-index (or 0) dec (wrap (count suggestions))))))\n\n(defn- reset-typeahead\n  [state]\n  (cond-> state\n    :always clear-suggestions\n    :always (assoc :waiting? false :input-text \"\" :displaying-suggestion? false)\n    (event-updates-model? state :input-text-changed) (update-model nil)))\n\n(defn- got-suggestions\n  \"Update state when new suggestions are available\"\n  [state suggestions]\n  (-> state\n      (assoc :suggestions suggestions\n             :waiting? false\n             :suggestion-active-index nil)))\n\n(defn- input-text-will-blur\n  \"Update state when the `input-text` is about to lose focus.\"\n  [{:keys [input-text displaying-suggestion? model] :as state}]\n  (cond\n    (and (not displaying-suggestion?)\n         (event-updates-model? state :input-text-blurred))\n    (update-model state input-text)\n    :else (-> state\n              ;; if nothing was actually selected, then view should be the unchanged value\n              (assoc :input-text input-text)\n              clear-suggestions)))\n\n(defn- change-data-source\n  \"Update `state` given a new `data-source`. Resets the typeahead since any existing suggestions\n  came from the old `data-source`.\"\n  [state data-source]\n  (-> state\n      reset-typeahead\n      (assoc :data-source data-source)))\n\n(defn- external-model-changed\n  \"Update state when the external model value has changed.\"\n  [state new-value]\n  (-> state\n      (update-model new-value)\n      (display-suggestion new-value)\n      (assoc :external-model new-value)\n      clear-suggestions))\n\n;; ------------------------------------------------------------------------------------\n;; Functions with side-effects\n;; ------------------------------------------------------------------------------------\n\n(defn- search-data-source!\n  \"Call the `data-source` fn with `text`, and then call `got-suggestions` with the result\n  (asynchronously, if `data-source` does not return a truthy value).\"\n  [data-source state-atom text]\n  (if-let [return-value (data-source text #(swap! state-atom got-suggestions %1))]\n    (swap! state-atom got-suggestions return-value)\n    (swap! state-atom assoc :waiting? true)))\n\n(defn- search-data-source-loop!\n  \"For every value arriving on the `c-search` channel, call `search-data-source!`.\"\n  [state-atom c-search]\n  (go-loop []\n    (let [new-text (<! c-search)\n          data-source (:data-source @state-atom)]\n      (if (= \"\" new-text)\n        (do\n          (swap! state-atom reset-typeahead)\n          (search-data-source! data-source state-atom \"\"))\n        (search-data-source! data-source state-atom new-text))\n      (recur))))\n\n(defn- input-text-on-change!\n  \"Update state in response to `input-text` `on-change`, and put text on the `c-input` channel\"\n  [state-atom new-text]\n  (let [{:as state :keys [input-text c-input]} @state-atom]\n    (if (= new-text input-text) state ;; keypresses that do not change the value still call on-change, ignore these\n        (do\n          (put! c-input new-text)\n          (swap! state-atom\n                 #(cond-> %\n                    :always (assoc :input-text new-text :displaying-suggestion? false)\n                    (event-updates-model? state :input-text-changed) (update-model new-text)))))))\n\n(defn- input-text-on-key-down!\n  [state-atom event]\n  (condp = (.-which event)\n    goog.events.KeyCodes.UP     (swap! state-atom activate-suggestion-prev)\n    goog.events.KeyCodes.DOWN   (swap! state-atom activate-suggestion-next)\n    goog.events.KeyCodes.ENTER  (swap! state-atom choose-suggestion-active)\n    goog.events.KeyCodes.ESC    (swap! state-atom got-suggestions [])\n    ;; tab requires special treatment\n    ;; trap it IFF there are suggestions, otherwise let the input defocus\n    goog.events.KeyCodes.TAB\n    (if (not-empty (:suggestions @state-atom))\n      (do (swap! state-atom activate-suggestion-next)\n          (.preventDefault event))\n      (swap! state-atom input-text-will-blur))\n    true))\n\n\n;; ------------------------------------------------------------------------------------\n;;  Component: typeahead\n;; ------------------------------------------------------------------------------------\n\n(def typeahead-args-desc\n  [{:name :data-source             :required true                   :type \"fn\"                   :validate-fn fn?                :description [:span [:code \":data-source\"] \" supplies suggestion objects. This can either accept a single string argument (the search term), or a string and a callback. For the first case, the fn should return a collection of suggestion objects (which can be anything). For the second case, the fn should return \"[:code \"nil\" ]\", and eventually result in a call to the callback with a collection of suggestion objects.\"]}\n   {:name :on-change               :required false :default nil     :type \"string -> nil\"        :validate-fn fn?                :description [:span [:code \":change-on-blur?\"] \" controls when it is called. It is passed a suggestion object.\"] }\n   {:name :change-on-blur?         :required false :default true    :type \"boolean | atom\"                                       :description [:span \"when true, invoke \" [:code \":on-change\"] \" when the user chooses a suggestion, otherwise invoke it on every change (navigating through suggestions with the mouse or keyboard, or if \"[:code \"rigid?\"]\" is also \"[:code \"false\" ]\", invoke it on every character typed.)\"] }\n   {:name :immediate-model-update? :required false :default false   :type \"boolean | atom\"                                       :description [:span \"update model with currently entered text on every keystroke (similar to \" [:code \":change-on-blur?\"] \" but no changes to model if mouse is over suggestions)\"]}\n   {:name :model                   :required false :default nil     :type \"object | atom\"                                        :description \"the initial value of the typeahead (should match the suggestion objects returned by \" [:code \":data-source\"] \").\"}\n   {:name :debounce-delay          :required false :default 250     :type \"integer\"              :validate-fn integer?           :description [:span \"after receiving input, the typeahead will wait this many milliseconds without receiving new input before calling \" [:code \":data-source\"] \".\"]}\n   {:name :render-suggestion       :required false                  :type \"render fn\"            :validate-fn fn?                :description \"override the rendering of the suggestion items by passing a fn that returns hiccup forms. The fn will receive two arguments: the search term, and the suggestion object.\"}\n   {:name :suggestion-to-string    :required false                  :type \"suggestion -> string\" :validate-fn fn?                :description \"when a suggestion is chosen, the input-text value will be set to the result of calling this fn with the suggestion object.\"}\n   {:name :rigid?                  :required false :default true    :type \"boolean | atom\"                                       :description [:span \"If \"[:code \"false\"]\" the user will be allowed to choose arbitrary text input rather than a suggestion from \" [:code \":data-source\"]\". In this case, a string will be supplied in lieu of a suggestion object.\" ]}\n\n   ;; the rest of the arguments are forwarded to the wrapped `input-text`\n   {:name :status                  :required false                  :type \"keyword\"              :validate-fn input-status-type? :description [:span \"validation status. \" [:code \"nil/omitted\"] \" for normal status or one of: \" input-status-types-list]}\n   {:name :status-icon?            :required false :default false   :type \"boolean\"                                              :description [:span \"when true, display an icon to match \" [:code \":status\"] \" (no icon for nil)\"]}\n   {:name :status-tooltip          :required false                  :type \"string\"               :validate-fn string?            :description \"displayed in status icon's tooltip\"}\n   {:name :placeholder             :required false                  :type \"string\"               :validate-fn string?            :description \"background text shown when empty\"}\n   {:name :width                   :required false :default \"250px\" :type \"string\"               :validate-fn string?            :description \"standard CSS width setting for this input\"}\n   {:name :height                  :required false                  :type \"string\"               :validate-fn string?            :description \"standard CSS height setting for this input\"}\n   {:name :disabled?               :required false :default false   :type \"boolean | atom\"                                       :description \"if true, the user can't interact (input anything)\"}\n   {:name :class                   :required false                  :type \"string\"               :validate-fn string?            :description \"CSS class names, space separated (applies to the textbox)\"}\n   {:name :style                   :required false                  :type \"CSS style map\"        :validate-fn css-style?         :description \"CSS styles to add or override (applies to the textbox)\"}\n   {:name :attr                    :required false                  :type \"HTML attr map\"        :validate-fn html-attr?         :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed (applies to \" [:span.bold \"the outer container\"] \", rather than the textbox)\"]}])\n\n(defn typeahead\n  \"typeahead reagent component\"\n  [& {:keys [] :as args}]\n  {:pre [(validate-args-macro typeahead-args-desc args \"typeahead\")]}\n  (let [{:as state :keys [c-search c-input]} (make-typeahead-state args)\n        state-atom (reagent/atom state)\n        input-text-model (reagent/cursor state-atom [:input-text])]\n    (search-data-source-loop! state-atom c-search)\n    (fn\n      [& {:as   args\n          :keys [data-source _on-change _change-on-blur? _immediate-model-update? model _debounce-delay render-suggestion _suggestion-to-string _rigid?\n                 ;; forwarded to wrapped `input-text`:\n                 status status-icon? status-tooltip placeholder width height disabled? class style attr]}]\n      {:pre [(validate-args-macro typeahead-args-desc args \"typeahead\")]}\n      (let [{:as state :keys [suggestions waiting? suggestion-active-index external-model]} @state-atom\n            last-data-source (:data-source state)\n            latest-external-model (deref-or-value model)\n            width (or width \"250px\")]\n        (when (not= last-data-source data-source)\n          (swap! state-atom change-data-source data-source))\n        (when (not= latest-external-model external-model)\n          (swap! state-atom external-model-changed latest-external-model))\n        [v-box\n         :class    \"rc-typeahead\"\n         :attr     attr\n         :width    width\n         :children [[input-text\n                     :model          input-text-model\n                     :class          class\n                     :style          style\n                     :disabled?      disabled?\n                     :status-icon?   status-icon?\n                     :status         status\n                     :status-tooltip status-tooltip\n                     :width          width\n                     :height         height\n                     :placeholder    placeholder\n                     :on-change      (partial input-text-on-change! state-atom)\n                     :change-on-blur? false\n                     :attr {:on-key-down (partial input-text-on-key-down! state-atom)\n                            :on-focus #()\n                            ;; on-blur should behave the same as tabbing off\n                            :on-blur #(swap! state-atom input-text-will-blur)}]\n                    (if (or (not-empty suggestions) waiting?)\n                      [box\n                       :style {:position \"relative\"}\n                       :child [v-box\n                               :class \"rc-typeahead-suggestions-container\"\n                               :children [(when waiting?\n                                            [box\n                                             :align :center\n                                             :child [throbber :size :small :class \"rc-typeahead-throbber\"]])\n                                          (for [[i s] (map vector (range) suggestions)\n                                                :let [selected? (= suggestion-active-index i)]]\n                                            ^{:key i}\n                                            [box\n                                             :child (if render-suggestion\n                                                      (render-suggestion s)\n                                                      s)\n                                             :class (str \"rc-typeahead-suggestion\"\n                                                         (when selected? \" active\"))\n                                             :attr {:on-mouse-over #(swap! state-atom activate-suggestion-by-index i)\n                                                    :on-mouse-down #(do (.preventDefault %) (swap! state-atom choose-suggestion-by-index i))}])]]])]]))))\n\n(defn- debounce\n  \"Return a channel which will receive a value from the `in` channel only\n  if no further value is received on the `in` channel in the next `ms` milliseconds.\"\n  [in ms]\n  (let [out (chan)]\n    (go-loop [last-val nil]\n      (let [val (if (nil? last-val) (<! in) last-val)\n            timer (timeout ms)]\n        (let [v (alt!\n                  in ([val _] val)\n                  timer (do (>! out val) nil))]\n          (recur v))))\n    out))\n"]}