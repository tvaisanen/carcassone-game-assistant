{"version":3,"sources":["re_frisk/utils.cljs"],"mappings":"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","names":["re-frisk.utils/sort-map","value","checkbox-val","checkbox","and__4221__auto__","cljs.core/map?","e32844","cljs.core.into","cljs.core/sorted-map","e","cljs.core/reset!","re-frisk.utils/sort-map-by","comp","e32845","cljs.core/sorted-map-by","re-frisk.utils/on-change-sort","key","val","cljs.core.swap_BANG_","cljs.core/assoc","js/setTimeout","cljs.core/dissoc","re-frisk.utils/filter-event","text","item","or__4223__auto__","name","clojure.string/lower-case","cljs.core/name","cljs.core/first","cljs.core.not_EQ_","clojure.string.index_of","re-frisk.utils/truncate-name","event","namespace","clojure.string.split","clojure.string/replace","cljs.core/count","clojure.string.join","cljs.core.mapv","cljs.core/last","re-frisk.utils/normalize-draggable","x","js/window.innerWidth","re-frisk.utils/closed?","left","cljs.core._EQ_","re-frisk.utils/str-ms","clojure.string/blank?","goog.string/format","js/re-frisk","js/re-frisk.utils","js/re-frisk.utils.call-state","re-frisk.utils/call-state","cljs.core.atom","re-frisk.utils/call-and-chill","handler","time","cljs.core/deref","re-frisk.utils/call-timeout","state","re-frisk.utils/scroll-timeline-event-item","doc","indx","temp__5753__auto__","elem","re-frisk.utils/scroll-event-list-item","re-frisk.utils/get-subs","p1__32849#","p2__32850#","p3__32851#","cljs.core/reduce-kv","cljs.core.assoc","re-frame.subs/query->reaction"],"sourcesContent":["(ns re-frisk.utils\n  (:require [clojure.string :as string]\n            [goog.string :as gstring]\n            [goog.string.format]\n            [re-frame.subs :as subs]))\n\n(defn sort-map [value checkbox-val checkbox]\n  (if (and checkbox-val (map? value))\n    (try\n      (into (sorted-map) value)\n      (catch :default e\n        (do\n          (reset! checkbox false)\n          value)))\n    value))\n\n(defn sort-map-by [value comp]\n  (if (map? value)\n    (try\n      (into (sorted-map-by comp) value)\n      (catch :default e\n        value))\n    value))\n\n(defn on-change-sort [value checkbox-val key]\n  (fn [val]\n    (reset! checkbox-val val)\n    (swap! value assoc key true)\n    (js/setTimeout #(swap! value dissoc key) 100)))\n\n(defn filter-event [text]\n  (fn [item]\n    (or (:trace? item)\n        (let [name (string/lower-case (name (first (:event item))))\n              text (string/lower-case text)]\n          (not= (string/index-of name text) nil)))))\n\n(defn truncate-name [event]\n  (let [namespace (string/split (string/replace event #\":\" \"\") #\"/\")]\n    (if (> (count namespace) 1)\n      (str \":\" (string/join \".\" (mapv first (string/split (first namespace) #\"\\.\")))\n           \"/\" (last namespace))\n      event)))\n\n(defn normalize-draggable [x]\n  (when x\n    (cond (< x 80) 80\n          (> x (- js/window.innerWidth 30)) (- js/window.innerWidth 30)\n          :else x)))\n\n(defn closed? [left]\n  (= left (- js/window.innerWidth 30)))\n\n(defn str-ms [value]\n  (when-not (string/blank? value)\n    (str (gstring/format \"%.2f\" value) \" ms\")))\n\n(declare call-timeout)\n(defonce call-state (atom nil))\n\n(defn call-and-chill [handler time]\n  (if @call-state\n    (reset! call-state :call)\n    (do\n      (reset! call-state :chill)\n      (js/setTimeout call-timeout time handler time)\n      (handler))))\n\n(defn- call-timeout [handler time]\n  (let [state @call-state]\n    (reset! call-state nil)\n    (when (= state :call)\n      (call-and-chill handler time))))\n\n(defn scroll-timeline-event-item [doc indx]\n  (when-let [elem (.getElementById doc (str \"timeline-event-item\" indx))]\n    (.scrollIntoView elem #js {:inline \"center\"})))\n\n(defn scroll-event-list-item [doc indx]\n  (when-let [elem (.getElementById doc (str \"events-list-item\" indx))]\n    (.scrollIntoView elem #js {:block \"center\"})))\n\n(defn get-subs []\n  (reduce-kv #(assoc %1 %2 (deref %3)) {} @subs/query->reaction))"]}