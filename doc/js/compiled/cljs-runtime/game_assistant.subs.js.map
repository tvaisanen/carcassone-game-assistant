{"version":3,"sources":["game_assistant/subs.cljs"],"mappings":";AAKA,2DAAA,3DAACA,qMAEA,WAAKC;AAAL,AACE,OAAA,mFAAOA;;AAEV,2DAAA,3DAACD,wMAEA,WAAKC;AAAL,AACE,IAAMC,QAAM,AAAA,oFAAQD;IACdE,aAAa,AAACC,+CAAO,WAAKC,IAAIC;AAAT,AAAY,QAAGD,MAAI,AAAA,qFAAQC;GAAnC,IACUJ;IACvBK,eAAa,4CAAA,WAAAC,vDAACC;AAAD,AACE,8GAAAD,iBAAA,2CAAA,nKAACE,wNAAe,CAAA,QAAO,CAAA,MAAG,AAAA,qFAAAF;GAC3BN;AALpB,AAOEK;;AAEL,2DAAA,3DAACP,mNAEA,WAAKC;AAAL,AACE,IAAAU,aAAwCV;IAAxCU,iBAAA,AAAAC,4BAAAD;iBAAA,AAAAE,4CAAAF,eAAA,xEAAcG;mBAAd,AAAAD,4CAAAF,eAAA,1EAAyBI;IACnBC,eAAa,AAACC,mBAAS,6CAAA,mDAAA,hGAACC,qJAAgBH;AAD9C,AAEE,OAACN,4CACA,WAAKU;AAAL,AACE,IAAMC,MAAI,AAAA,iFAAMD;IACVE,SAAO,AAAC,6CAAA,mDAAA,hGAACH,qJAAgBE;IACzBE,QAAM,mBAAA,nBAACL,sEAAc,AAACJ,4CAAIG,aAAaK;AAF7C,AAGE,mHAAA,2CAAA,vJAACX,uGAAMS,wGAAaG;GACxBR;;AAEN,2DAAA,3DAACd,oNAEA,WAAKC;AAAL,AACE,OAAA,iGAAcA;;AAEjB,2DAAA,3DAACD,uNAEA,WAAKC;AAAL,AACE,OAAA,mGAAeA;;AAElB,2DAAA,3DAACD,8MAEA,WAAKC;AAAL,AAAS,OAAA,+FAAaA;;AAEvB,2DAAA,3DAACD,iNAEA,WAAAuB;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAZ,4BAAAY;gBAAA,AAAAX,4CAAAW,eAAA,vEAAaC;oBAAb,AAAAZ,4CAAAW,eAAA,3EAAuBE;AAAvB,AACE,IAAMC,0YAAeD,9GACA,+CAAA,/CAACE,jMACD,AAACnB,4CAAI,6CAAA,mDAAA,hGAACS,3HACN,6CAAA,7CAACW;IAChBC,wcAAiBJ,1KACA,AAACE,+CAAO,2DAAA,3DAACG,6CAAKC,7RACd,AAACvB,4CAAI,6CAAA,mDAAA,hGAACS,3HACN,6CAAA,7CAACW;IAClBI,sBAAoB,AAACC,qDAAuBP,UAAUG;AAR5D,AAUE,OAACrB,4CAAI,WAAK0B;AAAL,AACE,gHAAA,2CAAA,pJAACzB,uGAAMyB,qHACgB,AAACC,0BAAUH,oBACA,AAAC,6CAAA,mDAAA,hGAACf,qJAAgBiB;GACtDV;;AAEV,2DAAA,3DAACzB,oMAEAqC;AAED,2DAAA,3DAACrC,yNAEA,WAAKC;AAAL,AACE,sBAAA,AAAA,oGAAIA,nHAAkBqC;;AAGzB,2DAAA,3DAACtC,wMAEA,WAAKC;AAAL,AAAS,OAAA,mFAAOA;;AAEjB,2DAAA,3DAACD,mNAEA,WAAKC;AAAL,AAAS,OAAA,+FAAaA;;AAEvB,2DAAA,3DAACD,yOAEA,WAAKC;AAAL,AAAS,OAAA,qHAAwBA","names":["re_frame.core.reg_sub","db","tiles","tiles-left","cljs.core.reduce","acc","v","tiles-w-prob","p1__40402#","cljs.core.map","cljs.core.merge","map__40403","cljs.core/--destructure-map","cljs.core.get","used-tiles","pawns-played","pawns-by-loc","cljs.core/group-by","cljs.core.juxt","tile","loc","coords","pawns","p__40404","map__40405","neighbors","valid-targets","valid-set","cljs.core.filter","cljs.core.into","invalid-set","cljs.core.comp","cljs.core/not","set-to-compare-with","clojure.set.difference","n","cljs.core/contains?","cljs.core/identity","cljs.core/keys"],"sourcesContent":["(ns game-assistant.subs\n  (:require\n   [clojure.set]\n   [re-frame.core :as rf]))\n\n(rf/reg-sub\n ::name\n (fn [db]\n   (:name db)))\n\n(rf/reg-sub\n ::tiles\n (fn [db]\n   (let [tiles (:tiles db)\n         tiles-left   (reduce (fn [acc v] (+ acc (:count v)))\n                              0 tiles)\n         tiles-w-prob (map\n                       #(merge % {:prob (* 100 (/ (:count %)))})\n                       tiles)]\n\n     tiles-w-prob)))\n\n(rf/reg-sub\n ::used-tiles\n (fn [db]\n   (let [{:keys [used-tiles pawns-played]} db\n         pawns-by-loc (group-by (juxt :row :col) pawns-played)]\n     (map\n      (fn [tile]\n        (let [loc (:loc tile)\n              coords ((juxt :row :col) loc)\n              pawns (group-by :idx (get pawns-by-loc coords))]\n          (merge tile {:pawns pawns})))\n      used-tiles))))\n\n(rf/reg-sub\n ::tiles-total\n (fn [db]\n   (:tiles-total db)))\n\n(rf/reg-sub\n ::current-tile\n (fn [db]\n   (:current-tile db)))\n\n(rf/reg-sub\n ::tilemap\n (fn [db] (:id-to-tile db)))\n\n(rf/reg-sub\n ::neighbors\n (fn [{:keys [neighbors valid-targets]}]\n   (let [valid-set (->> valid-targets\n                        (filter :can-join?)\n                        (map (juxt :row :col))\n                        (into #{}))\n         invalid-set (->> valid-targets\n                          (filter (comp not :can-join?))\n                          (map (juxt :row :col))\n                          (into #{}))\n         set-to-compare-with (clojure.set/difference valid-set invalid-set)\n         ]\n     (map (fn [n]\n            (merge n\n                   {:valid-target? (contains? set-to-compare-with\n                                              ((juxt :row :col) n))}))\n          neighbors))))\n\n(rf/reg-sub\n ::db\n identity)\n\n(rf/reg-sub\n ::valid-targets\n (fn [db]\n   (-> db :valid-targets keys)))\n\n\n(rf/reg-sub\n ::view\n (fn [db] (:view db)))\n\n(rf/reg-sub\n ::pawns-left\n (fn [db] (:pawns-left db)))\n\n(rf/reg-sub\n ::show-remaining-tiles?\n (fn [db] (:show-remaining-tiles? db)))\n"]}