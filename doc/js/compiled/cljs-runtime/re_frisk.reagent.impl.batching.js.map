{"version":3,"sources":["re_frisk/reagent/impl/batching.cljs"],"mappings":"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","names":["re-frisk.reagent.impl.batching/operation-name","cljs.core/memoize","c","cljs.core/last","clojure.string.split","reagent.impl.component/component-name","js/re-frisk","js/re-frisk.reagent","js/re-frisk.reagent.impl","js/re-frisk.reagent.impl.batching","js/re-frisk.reagent.impl.batching.original-next-tick","re-frisk.reagent.impl.batching/original-next-tick","reagent.impl.batching/next-tick","re-frisk.reagent.impl.batching/next-tick","f","G__39268","re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__39269","re-frame.trace/*current-trace*","*current-trace*-temp-val__39270","re-frame.trace/start-trace","end__31855__auto__","re-frame.interop/now","duration__31856__auto__","cljs.core.swap_BANG_","re-frame.trace/traces","cljs.core/conj","cljs.core.assoc","re-frame.trace/run-tracing-callbacks!","*current-trace*-orig-val__39271","*current-trace*-temp-val__39272","*current-trace*-orig-val__39280","*current-trace*-temp-val__39281","reagent.impl.batching/render-queue","*current-trace*-orig-val__39277","*current-trace*-temp-val__39278","*current-trace*-orig-val__39283","*current-trace*-temp-val__39284","js/re-frisk.reagent.impl.batching.original-run-queue","re-frisk.reagent.impl.batching/original-run-queue","reagent.impl.batching/run-queue","re-frisk.reagent.impl.batching/run-queue","a","reagent.impl.batching/compare-mount-order","n__4706__auto__","i","*current-trace*-orig-val__39286","*current-trace*-temp-val__39287","re-frisk.reagent.impl.batching/patch-next-tick"],"sourcesContent":["(ns re-frisk.reagent.impl.batching\n  (:require\n   [reagent.impl.batching :as batching]\n   [re-frame.trace :as trace :include-macros true]\n   [clojure.string :as string]\n   [reagent.impl.component :as component]))\n\n(def operation-name (memoize (fn [c] (last (string/split (component/component-name c) #\" > \")))))\n\n(defonce original-next-tick reagent.impl.batching/next-tick)\n\n(defn next-tick\n  [f]\n  ;; Schedule a trace to be emitted after a render if there is nothing else scheduled after that render.\n  ;; This signals the end of the epoch.\n  (original-next-tick\n   (fn []\n     (trace/with-trace\n       {:op-type :raf}\n       (f)\n       (trace/with-trace {:op-type :raf-end})\n       (when (false? (.-scheduled? reagent.impl.batching/render-queue))\n         (trace/with-trace {:op-type :reagent/quiescent}))))))\n\n(defonce original-run-queue reagent.impl.batching/run-queue)\n\n(defn run-queue [a]\n  ;; sort components by mount order, to make sure parents\n  ;; are rendered before children\n  (.sort a batching/compare-mount-order)\n  (dotimes [i (alength a)]\n    (let [^js/React.Component c (aget a i)]\n      (when (true? (.-cljsIsDirty c))\n        (trace/with-trace\n         {:op-type :force-update\n          :operation (operation-name c)}\n         (.forceUpdate c))))))\n\n(defn patch-next-tick\n  []\n  (set! reagent.impl.batching/next-tick next-tick)\n  (set! reagent.impl.batching/run-queue run-queue))"]}