{"version":3,"sources":["re_com/selection_list.cljs"],"mappings":"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","names":["var_args","G__36760","re-com.selection-list/label-style","js/Error","selected?","as-exclusions?","re_com.selection_list.label_style","selected-color","base-style","and__4221__auto__","cljs.core.merge","re-com.selection-list/check-clicked","selections","item-id","ticked?","required?","num-selected","cljs.core/count","only-item","cljs.core._EQ_","cljs.core/first","cljs.core.conj","cljs.core.disj","re-com.selection-list/as-checked","item","id-fn","on-change","disabled?","label-fn","re-com.box/box","event","G__36774","cljs.core/not","re-com.misc/checkbox","re-com.selection-list/radio-clicked","re-com.selection-list/as-radio","G__36784","re-com.misc/radio-button","re-com.selection-list/list-style","re-com.selection-list/spacing-bordered","re-com.selection-list/spacing-unbordered","re-com.selection-list/selection-list-args-desc","re-com.validate/vector-of-maps?","re-com.validate/set-or-atom?","cljs.core/fn?","cljs.core/ifn?","re-com.validate/string-or-atom?","cljs.core/string?","re-com.validate/css-style?","re-com.validate/html-attr?","p__36788","map__36789","cljs.core/--destructure-map","cljs.core.get","re-com.selection-list/list-container","choices","model","multi-select?","width","height","max-height","hide-border?","item-renderer","class","style","attr","args","js/goog.DEBUG","re_com.validate.validate_args","re-com.validate/extract-arg-data","selected","cljs.core/PersistentVector","cljs.core/set","items","cljs.core.map","p1__36785#","p1__36786#","p1__36787#","bounds","cljs.core/select-keys","spacing","re-com.box/border","cljs.core.into","re-com.selection-list/configure","attributes","re-com.util/fmap","re-com.util/deref-or-value","args__4835__auto__","len__4829__auto__","i__4830__auto__","argseq__4836__auto__","cljs.core/IndexedSeq","re-com.selection-list/selection-list","p__36821","map__36822","seq36816","self__4817__auto__","cljs.core/seq","p__36825","map__36826"],"sourcesContent":["(ns re-com.selection-list\n  (:require-macros [re-com.core :refer [handler-fn]])\n  (:require\n    [re-com.text     :refer [label]]\n    [re-com.misc     :refer [checkbox radio-button]]\n    [re-com.box      :refer [box border h-box v-box]]\n    [re-com.validate :refer [vector-of-maps? string-or-atom? set-or-atom? css-style? html-attr?] :refer-macros [validate-args-macro]]\n    [re-com.util     :refer [fmap deref-or-value]]))\n\n;; ----------------------------------------------------------------------------\n(defn label-style\n  ([selected? as-exclusions?]\n    (label-style selected? as-exclusions? nil))\n\n  ([selected? as-exclusions? selected-color]\n    ;;TODO: margin-top required because currently checkbox & radio-button don't center label\n    (let [base-style {:margin-top \"1px\"}\n          base-style (if (and selected? as-exclusions?)\n                       (merge base-style {:text-decoration \"line-through\"})\n                       base-style)\n          base-style (if (and selected? selected-color)\n                       (merge base-style {:color selected-color})\n                       base-style)]\n          base-style)))\n\n\n(defn- check-clicked\n  [selections item-id ticked? required?]\n  (let [num-selected (count selections)\n        only-item    (when (= 1 num-selected) (first selections))]\n    (if (and required? (= only-item item-id))\n      selections  ;; prevent unselect of last item\n      (if ticked? (conj selections item-id) (disj selections item-id)))))\n\n(defn- as-checked\n  [item id-fn selections on-change disabled? label-fn required? as-exclusions?]\n  ;;TODO: Do we really need an anchor now that bootstrap styles not realy being used ?\n  (let [item-id (id-fn item)]\n    [box\n     :class \"list-group-item compact\"\n     :attr {:on-click (handler-fn (when-not disabled?\n                                    (on-change (check-clicked selections item-id (not (selections item-id)) required?))))}\n     :child [checkbox\n             :model (some? (selections item-id))\n             :on-change #()                                 ;; handled by enclosing box\n             :disabled? disabled?\n             :label-style (label-style (selections item-id) as-exclusions?)\n             :label (label-fn item)]]))\n\n\n(defn- radio-clicked\n  [selections item-id required?]\n  (if (and required? (selections item-id))\n    selections  ;; prevent unselect of radio\n    (if (selections item-id) #{} #{item-id})))\n\n(defn- as-radio\n  [item id-fn selections on-change disabled? label-fn required? as-exclusions?]\n  (let [item-id (id-fn item)]\n    [box\n     :class \"list-group-item compact\"\n     :attr {:on-click (handler-fn (when-not disabled?\n                                    (on-change (radio-clicked selections item-id required?))))}\n     :child [radio-button\n             :model (first selections)\n             :value item-id\n             :on-change #()                                 ;; handled by enclosing box\n             :disabled? disabled?\n             :label-style (label-style (selections item-id) as-exclusions?)\n             :label (label-fn item)]]))\n\n\n(def ^:const list-style\n  ;;TODO: These should be in CSS resource\n  {:overflow-x     \"hidden\"\n   :overflow-y     \"auto\"}) ;;TODO this should be handled by scroller later\n\n(def ^:const spacing-bordered\n  {:padding-top    \"0px\"\n   :padding-bottom \"0px\"\n   :padding-left   \"5px\"\n   :padding-right  \"5px\"\n   :margin-top     \"5px\"\n   :margin-bottom  \"5px\"})\n\n(def ^:const spacing-unbordered\n  {:padding-left   \"0px\"\n   :padding-right  \"5px\"\n   :padding-top    \"0px\"\n   :padding-bottom \"0px\"\n   :margin-top     \"0px\"\n   :margin-bottom  \"0px\"})\n\n\n(def selection-list-args-desc\n  [{:name :choices        :required true                  :type \"vector of choices | atom\"           :validate-fn vector-of-maps? :description [:span \"the selectable items. Elements can be strings or more interesting data items like {:label \\\"some name\\\" :sort 5}. Also see \" [:code \":label-fn\"] \" below (list of maps also allowed)\"]}\n   {:name :model          :required true                  :type \"set of :ids within :choices | atom\" :validate-fn set-or-atom?    :description \"the currently selected items. Note: items are considered distinct\"}\n   {:name :on-change      :required true                  :type \"set of :ids -> nil | atom\"          :validate-fn fn?             :description [:span \"a callback which will be passed set of the ids (as defined by \" [:code \":id-fn\"] \") of the selected items\"]}\n   {:name :id-fn          :required false :default :id    :type \"choice -> anything\"                 :validate-fn ifn?            :description [:span \"given an element of \" [:code \":choices\"] \", returns its unique identifier (aka id)\"]}\n   {:name :label-fn       :required false :default :label :type \"choice -> anything\"                 :validate-fn ifn?            :description [:span \"given an element of \" [:code \":choices\"] \", returns its displayable label\"]}\n   {:name :multi-select?  :required false :default true   :type \"boolean | atom\"                                                  :description \"when true, use check boxes, otherwise radio buttons\"}\n   {:name :as-exclusions? :required false :default false  :type \"boolean | atom\"                                                  :description \"when true, selected items are shown with struck-out labels\"}\n   {:name :required?      :required false :default false  :type \"boolean | atom\"                                                  :description \"when true, at least one item must be selected. Note: being able to un-select a radio button is not a common use case, so this should probably be set to true when in single select mode\"}\n   {:name :width          :required false                 :type \"string | atom\"                      :validate-fn string-or-atom? :description \"a CSS style e.g. \\\"250px\\\". When specified, item labels may be clipped. Otherwise based on widest label\"}\n   {:name :height         :required false                 :type \"string | atom\"                      :validate-fn string-or-atom? :description \"a CSS style e.g. \\\"150px\\\". Size beyond which items will scroll\"}\n   {:name :max-height     :required false                 :type \"string | atom\"                      :validate-fn string-or-atom? :description \"a CSS style e.g. \\\"150px\\\". If there are less items then this height, box will shrink. If there are more, items will scroll\"}\n   {:name :disabled?      :required false :default false  :type \"boolean | atom\"                                                  :description \"when true, the time input will be disabled. Can be atom or value\"}\n   {:name :hide-border?   :required false :default false  :type \"boolean | atom\"                                                  :description \"when true, the list will be displayed without a border\"}\n   {:name :item-renderer  :required false                 :type \"-> nil | atom\"                      :validate-fn fn?             :description \"a function which takes no params and returns nothing. Called for each element during setup, the returned component renders the element, responds to clicks etc.\"}\n   {:name :class          :required false                 :type \"string\"                             :validate-fn string?         :description \"CSS class names, space separated (applies to the outer container)\"}\n   {:name :style          :required false                 :type \"CSS style map\"                      :validate-fn css-style?      :description \"CSS styles to add or override (applies to the outer container)\"}\n   {:name :attr           :required false                 :type \"HTML attr map\"                      :validate-fn html-attr?      :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed (applies to the outer container)\"]}])\n\n;;TODO hide hover highlights for links when disabled\n(defn- list-container\n  [{:keys [choices model on-change id-fn label-fn multi-select? as-exclusions? required? width height max-height disabled? hide-border? item-renderer class style attr]\n    :as   args}]\n  {:pre [(validate-args-macro selection-list-args-desc args \"selection-list\")]}\n  (let [selected (if multi-select? model (-> model first vector set))\n        items    (map (if item-renderer\n                        #(item-renderer % id-fn selected on-change disabled? label-fn required? as-exclusions?)  ;; TODO do we need to pass id-fn?\n                        (if multi-select?\n                          #(as-checked % id-fn selected on-change disabled? label-fn required? as-exclusions?)\n                          #(as-radio % id-fn selected on-change disabled? label-fn required? as-exclusions?)))\n                      choices)\n        bounds   (select-keys args [:width :height :max-height])\n        spacing  (if hide-border? spacing-unbordered spacing-bordered)]\n    ;; In single select mode force selections to one. This causes a second render\n    ;; TODO: GR commented this out to fix the bug where #{nil} was being returned for an empty list. Remove when we're sure there are no ill effects.\n    #_(when-not (= selected model) (on-change selected))\n    [border\n     :class  (str \"rc-selection-list \" class)\n     :style  style\n     :attr   attr\n     :radius \"4px\"\n     :border (when hide-border? \"none\")\n     :child  (into [:div {:class \"list-group noselect\" :style (merge list-style bounds spacing)}] items)]))\n\n\n(defn- configure\n  \"Augment passed attributes with defaults and deref any atoms\"\n  [attributes]\n  (merge {:multi-select?  true\n          :as-exclusions? false\n          :required?      false\n          :disabled?      false\n          :hide-border?   false\n          :id-fn          :id\n          :label-fn       :label}\n         (fmap deref-or-value attributes)))\n\n(defn selection-list\n  \"Produce a list box with items arranged vertically\"\n  [& {:as args}]\n  {:pre [(validate-args-macro selection-list-args-desc args \"selection-list\")]}\n  ;;NOTE: Consumer has complete control over what is selected or not. A current design tradeoff\n  ;;      causes all selection changes to trigger a complete list re-render as a result of on-change callback.\n  ;;      this approach may be not ideal for very large list choices.\n  (fn [& {:as args}]\n    [list-container (configure args)]))\n"]}