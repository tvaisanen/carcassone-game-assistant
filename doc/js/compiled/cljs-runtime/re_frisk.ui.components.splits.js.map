{"version":3,"sources":["re_frisk/ui/components/splits.cljs"],"mappings":"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","names":["re-frisk.ui.components.splits/sum-scroll-offsets","node","current-node","sum-scroll-left","sum-scroll-top","cljs.core.not_EQ_","re-frisk.ui.components.splits/flex-child-style","size","vec__39133","cljs.core.nth","split-size","clojure.string.split","clojure.string/trim","split-count","cljs.core/count","_","js/Error","cljs.core/contains?","size-only","cljs.core._EQ_","cljs.core/first","split-size-only","num","units","pass-through?","grow-ratio?","grow","shrink","basis","flex","and__4221__auto__","re-frisk.ui.components.splits/flex-flow-style","flex-flow","re-frisk.ui.components.splits/drag-handle","orientation","over?","vertical?","length","width","pos1","pos2","color","border","cljs.core.merge","var_args","args__4835__auto__","len__4829__auto__","i__4830__auto__","argseq__4836__auto__","cljs.core/IndexedSeq","re-frisk.ui.components.splits/h-split","p__39147","map__39148","cljs.core/--destructure-map","cljs.core.get","seq39146","self__4817__auto__","cljs.core/seq","height","on-split-change","initial-split","splitter-size","margin","document","js/document","args","container-id","cljs.core.gensym","split-perc","re_frisk.inlined_deps.reagent.v1v0v0.reagent.core.atom","js/parseInt","dragging?","stop-drag","G__39149","cljs.core/deref","cljs.core/reset!","calc-perc","mouse-x","container","offsets","c-width","c-left-x","relative-x","mousemove","event","mousedown","mouseover-split","mouseout-split","make-container-attrs","class","style","attr","in-drag?","make-panel-attrs","percentage","make-splitter-attrs","p__39151","map__39152","panel-1","panel-2","_size","_width","_height","_on-split-change","_initial-split","_splitter-size","_margin","re-frisk.ui.components.splits/v-split","p__39154","map__39155","seq39153","G__39156","mouse-y","c-height","c-top-y","relative-y","p__39159","map__39160","open-bottom-split?","close-bottom-split?","perc"],"sourcesContent":["(ns re-frisk.ui.components.splits\n  (:require-macros [re-frisk.ui.components.recom :refer [handler-fn]])\n  (:require [re-frisk.inlined-deps.reagent.v1v0v0.reagent.core :as reagent]\n            [clojure.string :as string]))\n\n;;TODO copy https://github.com/Day8/re-com/blob/master/src/re_com/splits.cljs\n\n;; fixed :on-mouse-leave https://github.com/Day8/re-com/issues/158\n;; (.getElementById document container-id), document provided from outside, because re-frisk window is not a root window\n\n(defn sum-scroll-offsets\n  \"Given a DOM node, I traverse through all ascendant nodes (until I reach body), summing any scrollLeft and scrollTop values\n   and return these sums in a map\"\n  [node]\n  (loop [current-node    (.-parentNode node) ;; Begin at parent\n         sum-scroll-left 0\n         sum-scroll-top  0]\n    (if (not= (.-tagName current-node) \"BODY\")\n      (recur (.-parentNode current-node)\n             (+ sum-scroll-left (.-scrollLeft current-node))\n             (+ sum-scroll-top  (.-scrollTop  current-node)))\n      {:left sum-scroll-left\n       :top  sum-scroll-top})))\n\n(defn flex-child-style\n  [size]\n  (let [split-size      (string/split (string/trim size) #\"\\s+\")                  ;; Split into words separated by whitespace\n        split-count     (count split-size)\n        _               (assert (contains? #{1 3} split-count) \"Must pass either 1 or 3 words to flex-child-style\")\n        size-only       (when (= split-count 1) (first split-size))         ;; Contains value when only one word passed (e.g. auto, 60px)\n        split-size-only (when size-only (string/split size-only #\"(\\d+)(.*)\")) ;; Split into number + string\n        [_ num units]   (when size-only split-size-only)                    ;; grab number and units\n        pass-through?   (nil? num)                                          ;; If we can't split, then we'll pass this straign through\n        grow-ratio?     (or (= units \"%\") (= units \"\") (nil? units))        ;; Determine case for using grow ratio\n        grow            (if grow-ratio? num \"0\")                            ;; Set grow based on percent or integer, otherwise no grow\n        shrink          (if grow-ratio? \"1\" \"0\")                            ;; If grow set, then set shrink to even shrinkage as well\n        basis           (if grow-ratio? \"0px\" size)                         ;; If grow set, then even growing, otherwise set basis size to the passed in size (e.g. 100px, 5em)\n        flex            (if (and size-only (not pass-through?))\n                          (str grow \" \" shrink \" \" basis)\n                          size)]\n    {:-webkit-flex flex\n     :flex flex}))\n\n(defn flex-flow-style\n  \"A cross-browser helper function to output flex-flow with all it's potential browser prefixes\"\n  [flex-flow]\n  {:-webkit-flex-flow flex-flow\n   :flex-flow flex-flow})\n\n(defn drag-handle\n  \"Return a drag handle to go into a vertical or horizontal splitter bar:\n    orientation: Can be :horizonal or :vertical\n    over?:       When true, the mouse is assumed to be over the splitter so show a bolder color\"\n  [orientation over?]\n  (let [vertical? (= orientation :vertical)\n        length    \"20px\"\n        width     \"8px\"\n        pos1      \"3px\"\n        pos2      \"3px\"\n        color     (if over? \"#999\" \"#ccc\")\n        border    (str \"solid 1px \" color)\n        flex-flow (str (if vertical? \"row\" \"column\") \" nowrap\")]\n    [:div {:class \"display-flex\"\n           :style (merge (flex-flow-style flex-flow)\n                         {:width  (if vertical? width length)\n                          :height (if vertical? length width)\n                          :margin \"auto\"})}\n     [:div {:style (if vertical?\n                     {:width pos1 :height length :border-right border}\n                     {:width length :height pos1 :border-bottom border})}]\n     [:div {:style (if vertical?\n                     {:width pos2 :height length :border-right border}\n                     {:width length :height pos2 :border-bottom border})}]]))\n\n(defn h-split\n  \"Returns markup for a horizontal layout component\"\n  [& {:keys [size width height on-split-change initial-split splitter-size margin document]\n      :or   {size \"auto\" initial-split 50 splitter-size \"8px\" margin \"8px\" document js/document}\n      :as   args}]\n  (let [container-id         (gensym \"h-split-\")\n        split-perc           (reagent/atom (js/parseInt initial-split)) ;; splitter position as a percentage of width\n        dragging?            (reagent/atom false)           ;; is the user dragging the splitter (mouse is down)?\n        over?                (reagent/atom false)           ;; is the mouse over the splitter, if so, highlight it\n\n        stop-drag            (fn []\n                               (when on-split-change (on-split-change @split-perc))\n                               (reset! dragging? false))\n\n        calc-perc            (fn [mouse-x]                  ;; turn a mouse y coordinate into a percentage position\n                               (let [container  (.getElementById document container-id) ;; the outside container\n                                     offsets    (sum-scroll-offsets container) ;; take any scrolling into account\n                                     c-width    (.-clientWidth container) ;; the container's width\n                                     c-left-x   (.-offsetLeft container) ;; the container's left X\n                                     relative-x (+ (- mouse-x c-left-x) (:left offsets))] ;; the X of the mouse, relative to container\n                                 (* 100.0 (/ relative-x c-width)))) ;; do the percentage calculation\n\n        mousemove            (fn [event]\n                               (reset! split-perc (calc-perc (.-clientX event))))\n\n        mousedown            (fn [event]\n                               (.preventDefault event)      ;; stop selection of text during drag\n                               (reset! dragging? true))\n\n        mouseover-split      #(reset! over? true)           ;; true CANCELs mouse-over (false cancels all others)\n        mouseout-split       #(reset! over? false)\n\n        make-container-attrs (fn [class style attr in-drag?]\n                               (merge {:class (str \"rc-h-split display-flex \" class)\n                                       :id    container-id\n                                       :style (merge (flex-child-style size)\n                                                     (flex-flow-style \"row nowrap\")\n                                                     {:margin margin\n                                                      :width  width\n                                                      :height height}\n                                                     style)}\n                                      (when in-drag?        ;; only listen when we are dragging\n                                        {:on-mouse-up    (handler-fn (stop-drag))\n                                         :on-mouse-leave (handler-fn (stop-drag))\n                                         :on-mouse-move  (handler-fn (mousemove event))})\n                                      attr))\n\n        make-panel-attrs     (fn [class in-drag? percentage]\n                               {:class (str \"display-flex \" class)\n                                :style (merge (flex-child-style (str percentage \" 1 0px\"))\n                                              {:overflow \"hidden\"} ;; TODO: Shouldn't have this...test removing it\n                                              (when in-drag? {:pointer-events \"none\"}))})\n\n        make-splitter-attrs  (fn [class]\n                               {:class         (str \"display-flex \" class)\n                                :on-mouse-down (handler-fn (mousedown event))\n                                :on-mouse-over (handler-fn (mouseover-split))\n                                :on-mouse-out  (handler-fn (mouseout-split))\n                                :style         (merge (flex-child-style (str \"0 0 \" splitter-size))\n                                                      {:cursor \"col-resize\"}\n                                                      (when @over? {:background-color \"#f8f8f8\"}))})]\n\n    (fn\n      [& {:keys [panel-1 panel-2 _size _width _height _on-split-change _initial-split _splitter-size _margin class style attr]}]\n      [:div (make-container-attrs class style attr @dragging?)\n       [:div (make-panel-attrs \"rc-h-split-top\" @dragging? @split-perc)\n        panel-1]\n       [:div (make-splitter-attrs \"rc-h-split-splitter\")\n        [drag-handle :vertical @over?]]\n       [:div (make-panel-attrs \"rc-h-split-bottom\" @dragging? (- 100 @split-perc))\n        panel-2]])))\n\n\n;; ------------------------------------------------------------------------------------\n;;  Component: v-split\n;; ------------------------------------------------------------------------------------\n\n(defn v-split\n  \"Returns markup for a vertical layout component\"\n  [& {:keys [size width height on-split-change initial-split splitter-size margin document]\n      :or   {size \"auto\" initial-split 50 splitter-size \"8px\" margin \"8px\" document js/document}}]\n  (let [container-id         (gensym \"v-split-\")\n        split-perc           (reagent/atom (js/parseInt initial-split)) ;; splitter position as a percentage of height\n        dragging?            (reagent/atom false)           ;; is the user dragging the splitter (mouse is down)?\n        over?                (reagent/atom false)           ;; is the mouse over the splitter, if so, highlight it\n\n        stop-drag            (fn []\n                               (when on-split-change (on-split-change @split-perc))\n                               (reset! dragging? false))\n\n        calc-perc            (fn [mouse-y]                  ;; turn a mouse y coordinate into a percentage position\n                               (let [container  (.getElementById document container-id) ;; the outside container\n                                     offsets    (sum-scroll-offsets container) ;; take any scrolling into account\n                                     c-height   (.-clientHeight container) ;; the container's height\n                                     c-top-y    (.-offsetTop container) ;; the container's top Y\n                                     relative-y (+ (- mouse-y c-top-y) (:top offsets))] ;; the Y of the mouse, relative to container\n                                 (* 100.0 (/ relative-y c-height)))) ;; do the percentage calculation\n\n        mousemove            (fn [event]\n                               (reset! split-perc (calc-perc (.-clientY event))))\n\n        mousedown            (fn [event]\n                               (.preventDefault event)      ;; stop selection of text during drag\n                               (reset! dragging? true))\n\n        mouseover-split      #(reset! over? true)\n        mouseout-split       #(reset! over? false)\n\n        make-container-attrs (fn [class style attr in-drag?]\n                               (merge {:class (str \"rc-v-split display-flex \" class)\n                                       :id    container-id\n                                       :style (merge (flex-child-style size)\n                                                     (flex-flow-style \"column nowrap\")\n                                                     {:margin margin\n                                                      :width  width\n                                                      :height height}\n                                                     style)}\n                                      (when in-drag?        ;; only listen when we are dragging\n                                        {:on-mouse-up    (handler-fn (stop-drag))\n                                         :on-mouse-move  (handler-fn (mousemove event))\n                                         :on-mouse-leave (handler-fn (stop-drag))})\n                                      attr))\n\n        make-panel-attrs     (fn [class in-drag? percentage]\n                               {:class (str \"display-flex \" class)\n                                :style (merge (flex-child-style (str percentage \" 1 0px\"))\n                                              {:overflow \"hidden\"} ;; TODO: Shouldn't have this...test removing it\n                                              (when in-drag? {:pointer-events \"none\"}))})\n\n        make-splitter-attrs  (fn [class]\n                               {:class         (str \"display-flex \" class)\n                                :on-mouse-down (handler-fn (mousedown event))\n                                :on-mouse-over (handler-fn (mouseover-split))\n                                :on-mouse-out  (handler-fn (mouseout-split))\n                                :style         (merge (flex-child-style (str \"0 0 \" splitter-size))\n                                                      {:cursor \"row-resize\"}\n                                                      (when @over? {:background-color \"#f8f8f8\"}))})]\n\n    (fn\n      [& {:keys [panel-1 panel-2 _size _width _height _on-split-change _initial-split _splitter-size _margin class style attr\n                 open-bottom-split? close-bottom-split?]}]\n      (let [perc (if close-bottom-split?\n                   \"0\"\n                   (if (and (= @split-perc (js/parseInt initial-split)) open-bottom-split?)\n                     \"70\"\n                     @split-perc))]\n        [:div (make-container-attrs class style attr @dragging?)\n         [:div (make-panel-attrs \"re-v-split-top\" @dragging? perc)\n          panel-1]\n         (when-not close-bottom-split?\n           [:div (make-splitter-attrs \"re-v-split-splitter\")\n            [drag-handle :horizontal @over?]])\n         [:div (make-panel-attrs \"re-v-split-bottom\" @dragging? (- 100 perc))\n          panel-2]]))))\n"]}