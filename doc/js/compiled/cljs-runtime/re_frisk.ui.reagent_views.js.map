{"version":3,"sources":["re_frisk/ui/reagent_views.cljs"],"mappings":"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","names":["re-frisk.ui.reagent-views/input-signals","name","subs","temp__5753__auto__","signals","cljs.core/deref","cljs.core.get","re-frisk.subs-graph/view->reactions","re-frisk.ui.components.frisk/Root-Simple","cljs.core.into","cljs.core.map","item","op","re-frisk.subs-graph/reaction->operation","re-frisk.ui.reagent-views/views","_","checkbox-sorted-val","re_frisk.inlined_deps.reagent.v1v0v0.reagent.core.atom","re-frame-data","data","chb-val","view->reactions","cljs.core/count","re-com.core/checkbox","cljs.core.swap_BANG_","cljs.core/not","re-frisk.ui.components.components/scroller","iter__4622__auto__","s__39187","cljs.core/LazySeq","cljs.core/seq","cljs.core/chunked-seq?","c__4620__auto__","size__4621__auto__","b__39189","cljs.core/chunk-buffer","i__39188","map__39190","cljs.core/-nth","cljs.core/--destructure-map","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__39186","cljs.core/chunk-rest","map__39192","cljs.core/first","cljs.core/cons","cljs.core/rest","cljs.core.sort_by","cljs.core/vals","or__4223__auto__","re-frisk.ui.components.colors/render","cljs.core/chunk-first"],"sourcesContent":["(ns re-frisk.ui.reagent-views\n  (:require [re-frisk.ui.components.components :as components]\n            [re-frisk.subs-graph :as subs-graph]\n            [re-frisk.ui.components.frisk :as frisk]\n            [re-frisk.ui.components.colors :as colors]\n            [re-com.core :as re-com]\n            [re-frisk.inlined-deps.reagent.v1v0v0.reagent.core :as reagent]))\n\n(defn input-signals [name subs]\n  (when-let [signals (get @subs-graph/view->reactions name)]\n    [frisk/Root-Simple (into {}\n                             (map (fn [item]\n                                    (let [op (get @subs-graph/reaction->operation item)]\n                                      (if op\n                                        {op (get subs [[op] []])}\n                                        {:reagent :atom})))\n                                  signals))]))\n\n(defn views [_]\n  (let [checkbox-sorted-val (reagent/atom false)]\n    (fn [re-frame-data]\n      (let [data @(:views re-frame-data)\n            subs @(:subs re-frame-data)\n            chb-val @checkbox-sorted-val\n            view->reactions @subs-graph/view->reactions]\n        [:div {:style {:display :flex :flex 1 :background-color \"#f3f3f3\" :color \"#444444\"\n                       :padding 8 :flex-direction :column}}\n         [:div {:style {:margin-bottom 10 :border-bottom \"solid 1px #000000\" :display :flex\n                        :flex-direction :row}}\n          \"Mounted views (\" (count data) \") in mount order\"\n          [:div {:style {:width 10 :margin-left 10}} \" | \"]\n          [re-com/checkbox\n           :model checkbox-sorted-val\n           :on-change #(do (swap! checkbox-sorted-val not) nil)\n           :label \"subs\"]]\n         [components/scroller\n          (for [{:keys [name]} (sort-by :order (vals data))]\n            (when (or (not chb-val) (get view->reactions name))\n              ^{:key (str \"item\" name)}\n              [:div {:style {:display :flex :flex-direction :column :border-bottom \"solid 1px #CCCCCC\"}}\n               [:div {:style {:min-width \"200\" :color colors/render}} name]\n               [input-signals name subs]]))]]))))\n"]}