{"version":3,"sources":["re_com/dropdown.cljs"],"mappings":";AAYA;;;;qCAAA,rCAAOA,kFAGJC,QAAQC,MAAMC,GAAGC;AAHpB,AAIE,IAAMC,gBAAc,8HAAA,9HAACC,iEAAgBH,GAAGF,gHAAeC;IACjDK,YAAc,+GAAA,IAAA,4IAAA,2BAAA,IAAA,5RACE,oDAAA,pDAACC,6CAAEJ,sEACH,oDAAA,pDAACI,6CAAEJ,4DAAkB,4BAAA,3BAAK,AAACK,gBAAMR,kBACjC,kBAAA,jBAAMI,4BACe,AAACK,cAAI,CAAGL,gBAAcD,QAAQ,AAACK,gBAAMR;;AALhF,AAME,oBAAM,iBAAAU,oBAAKJ;AAAL,AAAA,oBAAAI;AAAe,mCAAA,3BAAM,AAACF,gBAAMR;;AAA5BU;;;AAAN,AACE,IAAAC,WAAO,AAACC,4CAAIZ,QAAQM;AAApB,AAAA,kFAAAK,4BAAAA,tGAACV,sCAAAA,gDAAAA;;AADH;;;AAIJ;;;8CAAA,9CAAOY,oGAEJC,KAAKC;AAFR,AAGE,IAAMC,SAAe,AAACC,qDAAaF,SAASD;IACtCI,gBAGoB,4CAAA,WAAAG,vDAACF;AAAD,AAAM,OAAAG,uCAAA,CAAA,kDAAA,uDAAA,kDAAAD,jDAAc,AAACE;oHAHrBP,5DACA,AAACG,4CAAIC,jGACL,AAACD,4CAAIJ;AAH/B,AAAA,0FAKGG,cAAcF;;AAGnB;;;;iCAAA,jCAAOQ,0EAGJxB,QAAQe,SAASU,SAASC;AAH7B,AAIE,IAAMC,oBAAkB,AAACC,0BAAkBF;IACrCG,YAAkB,WAAKC;AAAL,AACE,IAAMC,QAAM,8HAAA,5HAAI,qHAAA,pHAAM,CAAChB,yCAAAA,8CAAAA,PAASe,0BAAAA,mBAAS,CAACf,yCAAAA,8CAAAA,PAASe,0BAAAA;IAC7CE,QAAM,4CAAK,CAACP,yCAAAA,8CAAAA,PAASK,0BAAAA;AAD3B,AAEE,SACE,gEAAA,/DAAI,AAAU,AAACF,0BAAkBG,eAAOJ,gCACxC,gEAAA,/DAAI,AAAU,AAACC,0BAAkBI,eAAOL;;AANtE,AAOE,OAACM,+CAAOJ,UAAU7B;;AAGtB;;;;uCAAA,vCAAOkC,sFAGJlC,QAAQe,SAASU,SAASC;AAH7B,AAIE,IAAMS,KAAU,iBAAA,AACE,YAAAE,mBAAA,ZAAYX;gBADd,GAAA,CAAAU,kBAESE;AAFT,QAAAF,JAEmBG;AAFnB,AAAA;;AAAA,AAAA,MAAAH;;;;IAGVP,YAAU,AAACW,gDAAQ,WAAKL,OAAGL;AAAR,AACE,GAAU,WAAA,VAAMK;AAAhB;;AAAA,AACE,IAAAM,mBAAI,AAAON,YAAG,CAACpB,yCAAAA,8CAAAA,PAASe,0BAAAA;AAAxB,AAAA,oBAAAW;AAAAA;;AAA8B,OAAON,YAAG,CAACV,yCAAAA,8CAAAA,PAASK,0BAAAA;;;GACtDK;AANzB,AAOE,OAACF,+CAAOJ,UAAU7B;;AAGtB;;;4CAAA,5CAAM0C,gGAEH1C,QAAQ2C,QAAQC;AAFnB,AAGE,IAAMf,YAAU,WAAKC;AAAL,AAAU,wIAAA,hIAAI,AAAU,CAACa,wCAAAA,6CAAAA,PAAQb,yBAAAA,cAAKc;;AAAtD,AACE,OAACX,+CAAOJ,UAAU7B;;AAGtB,qCAAA,rCAAM6C,kFACHC;AADH,AAEE,IAAMC,kBAAsB,AAAaD;IACnCE,qBAAsB,CAAGD,kBAAgB,AAAgBD;IACzDG,SAAsB,AAAcH;IACpCI,gBAAsB,AAAgBD;IACtCE,qBAAsB,AAAaF;IACnCG,wBAAsB,CAAGD,qBAAmBD;IAC5CG,iBAAsB,EACE,CAAGL,qBAAmBI,wBAAuB,iBAAAE,kBAAK,CAAGN,qBAAmBE;IAA3BK,kBAAA;AAAA,AAAA,SAAAD,kBAAAC,mBAAAD,kBAAAC;KAD/C,0DAAA,xDAEE,CAAGR,kBAAgBI,qBAA0BJ;AAR3E,AASE,oBAAMM;AAAN,AAAqB,QAAM,AAAaJ,mBAAQI;;AAAhD;;;AAGJ;;;qCAAA,rCAAOG,kFAEJC;AAFH,AAAA,2BAAA,mFAAA,0KAAA,2CAAA,oDAGS,AAAA,gFAAKA,9QACK,AAAA,oFAAQA;;AAG3B;;;8BAAA,9BAAOC,oEAEJxD,GAAG8B,MAAM2B,SAASC;AAFrB,AAGE,IAAMC,oBAAY,gDAAA,hDAACC;AAAnB,AACE,+DAAA,2CAAA,nGAACC,uLAEE,WAAKC;AAAL,AACE,IAAMlB,OAAK,AAACmB,qBAAcD;IACpBE,WAAS,6CAAA,AAAAC,7CAAC5D,6DAAGqD,gBAAe1D;AADlC,AAEE,GAAMgE;AAAN,AAAe,OAACrB,mCAAmBC;;AAAnC;;GALP,sFAQG,WAAKkB;AAAL,AACE,IAAMlB,OAAK,AAACmB,qBAAcD;IACpBE,WAAS,6CAAA,AAAAC,7CAAC5D,6DAAGqD,gBAAe1D;AADlC,AAEE,GAAMgE;AAAN,AAAe,OAACrB,mCAAmBC;;AAAnC;;GAXP,oEAAA,cAAA,yEAgBG,WACG5C,OAAG8B,UAAM2B,aAASC;AADrB,AAEE,IAAMM,WAAS,6CAAA,AAAAC,7CAAC5D,6DAAGqD,oBAAe1D;IAC5BkE,SAAM,YAAA,VAAIF,wBAEF,kBAAA,AAAAC,oCAAA,AAAA,YAAA,hCAAON;AAHrB,AAAA,0FAAA,gDAAA,2CAAA,wGAAA,hDAKmB,CAAA,8BAAmCO,wFACnC,WAAAC;AAAA,AAAY,wCAAA,xCAACC,sBAAOT;;AAApB;GANnB,oEAOmB,WAAAQ;AAAA,AAAY,wCAAA,xCAACC,sBAAOT;;AAApB;GAPnB,uEAQmB,WAAAQ;AAAA,AAAY,CAACV,6CAAAA,qDAAAA,VAASzD,iCAAAA;;AAAtB;WAChB8B;;;AAGZ,mCAAA,nCAAMuC,8EACHtE,MAAMuE,UAAUC,SAASb,eAAe9B;AAD3C,AAEE,IAAM5B,KAAG,CAACD,sCAAAA,2CAAAA,PAAM6B,uBAAAA;IACV4C,SAAO,CAACF,0CAAAA,+CAAAA,PAAU1C,2BAAAA;AADxB,AAAA,2BAAA,yJAAA,2CAAA,oDAES,4CAAK5B,jNAAMwD,4BAAYxD,GAAGwE,OAAOD,SAASb;;AAGrD;;;uCAAA,vCAAOe,sFAEJC,kBAAYlD,YAAYmD,YAAYC,oBAAcC;AAFrD,AAAA,0FAAA,+EAAA,mFAAA,sDAAA,2CAAA,qDAAA,OAAA,sEAAA,MAAA,4ZAAA,sDAAA,AAAAZ,6BAAA,xbAOoB,qCAAA,KAAA,AAAA,2CAAA,8DAAA,WAAA,uDAAA,MAAA,2DAAA,MAAA,yDAAA,nUAAUS,yZAITlD,4EACD,WAAA2C;AAAA,AAAY,IAAAW,iBAAiB,AAAA,AAAIX;AAArB,AAAA,+FAAAW,4CAAAA,1IAACD,gDAAAA,gEAAAA;;AAAb;GAZpB,oEAaoB,WAAAV;AAAA,AAAY,oBAAU,CAACQ,4CAAAA,mDAAAA,TAAYR,+BAAAA;AAAvB;AAAA,AACE,AAAiBA;;;AAD/B;GAbpB,0DAeoB,WAAAA;AAAA,AAAY,0CAAA,1CAACC,sBAAOQ;;AAApB;;;AAGpB;;;AAAeG,kCAEb,yDAAA,2CAAA,oFAAA,WAAAC,nMAACE,oBAAUT;AAAX,AACkC,IAAM7B,OAAK,AAAc,qBAAAoC,rBAACjB;AAA1B,AACC,OAAQnB;GAF3C,sFAAA,WAAAqC;AAAA,AAGmC,IAAMrC,OAAK,AAAc,qBAAAqC,rBAAClB;AAA1B,AACC,OAAQnB;;AAE9C;;;+BAAA,/BAAOuC;AAAP,AAGE,IAAMC,eAAa,6CAAA,7CAACC;AAApB,AACE,kBACG3B,eAAe5D,QAAQC,MAAMwB,SAAS+D,UAAUC,YAAYC,eAAeb,YAAYD,kBAAYE,oBAAca;AADpH,AAEE,IAAMC,IAAK,wDAAA,2CAAA,nGAACC,uBAAkB,AAACC,gJAAyClB;IAClEmB,OAAK,kBAAA,AAAA5B,gBAAKP,iBACH,iBAAAoC,WAAU,6DAAA,AAAA7B,0FAAA,vJAAC8B,6EAAarC,gBAAe5D,gHAAeC;AAAtD,AAAA,wFAAA+F,+BAAAA,/GAACvE,yCAAAA,mDAAAA;KACDgE;AAHb,AAAA,0FAAA,0GAAA,2CAAA,qDAAA,cAAA,wEAAA,VAMmBD,uEACA,WAAAnB;AAAA,AACE,oBAAA,AAAAF,gBAAKmB;AACH,mCAAA,nCAAChB,sBAAOgB;;AACR,CAACI,+CAAAA,iDAAAA;;;AAHL;GAPnB,uEAWmB,WAAArB;AAAA,AACE,oBAAA,AAAAF,gBAAOW;AAAP,AACE,mCAAA,nCAACR,sBAAOgB;;AADV;;AADF;GAXnB,oEAcmB,WAAAjB;AAAA,AACE,CAACQ,4CAAAA,mDAAAA,TAAYR,+BAAAA;;AACb,GAAM,yDAAA,zDAAC9D,6CAAE,AAAS8D;AAAlB,AACE,mCAAA,nCAACC,sBAAOgB;;AADV;;AAFF;WAdnB,mFAAA,sNAAA,mFAAA,mDAAA,mFAAA,1XAkBU,gCAAA,AAAA,2CAAA,mEAAA,5HAAMK,+GACII,mBAChBA;;;AAGV,8CAAA,9CAAOG,oGACJC;AADH,AAEE,SAAI,AAACC,oBAAID,QACL,AAACE,sCAAgBF;;AAEvB;;;qCAAA,rCAAOG,kFAEJC,cAAcvG,QAAQ+F,KAAKS;AAF9B,AAGE,IAAMtG,KAAG,mHAAA,lHAAK,AAAA,gFAAA,AAAAiE,gBAAMoC;IACd9B,WAAS,WAAAgC;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;WAAAA,PAA+BK;aAA/B,AAAAH,4CAAAF,eAAA,pEAAaG;YAAb,AAAAD,4CAAAF,eAAA,nEAAoBI;AAApB,AACE,GAAM,AAACvG,6CAAEL,GAAG,AAAA,gFAAA,AAAAiE,gBAAMoC;AAAlB,AACE,+FAAA,6DAAA,wDAAA,6DAAA,1QAACS,0DAAMT,cAAcU,4LAEPH,iEACED;;AAJlB;;;AAFjB,AAOE,wFAAA,6DAAA,uDAAA,uDAAA,KAAA,qDAAA,wDAAA,rXAACG,0DAAMT,cAAcU,kPAGV/G;;AAEX,IAAAgH,WAAA,2CAAA,wEAAA,LAAyBnB,4EACAS;IADzBW,WAAA,WAAAC;AAAA,AAEU,gBAAA,2CAAA,yDAAAA,7GAAC3C;;IAFX4C,WAAA,WAAAC;AAAA,AAGU,gBAAA,2CAAA,uDAAAA,3GAAC7C;;AAHX,AAAA,sFAAAyC,SAAAC,SAAAE,8BAAAH,SAAAC,SAAAE,hJAACrH,wCAAAA,oEAAAA;;AAKL;;;+BAAA,/BAAOuH,sEAEJhB,cAAcvG,QAAQwH,eAAezB,KAAKS,oBAAciB;AAF3D,AAGE,GAAM,AAACrB,oBAAIpG;AAAX,AACE,IAAA0H,2BAAiB,AAAA,sFAAA,AAAAvD,gBAASoC;AAA1B,AAAA,oBAAAmB;AAAA,AAAA,kBAAAA,dAAWC;AAAX,AACE,AAACC,aAAgBD;;AADnB;;AAEA,oBAAIF;AACF,IAAME,QAAM,WAAA,XAACE;AAAD,AAAgB,OAACvB,mCAAcC,cAAcvG,QAAQ+F,KAAKS;GAAegB;AAArF,AACE,wFAAA,jFAACR,mDAAMT,cAAcU,wEAAaU;;AACpC,OAACrB,mCAAcC,cAAcvG,QAAQ+F,KAAKS;;;AAN9C;;;AAYF,4CAAA,oFAAA,2CAAA,qDAAA,2DAAA,6DAAA,KAAA,qDAAA,uDAAA,+GAAA,oEAAA,oFAAA,qDAAA,+EAAA,mFAAA,qDAAA,iBAAA,KAAA,mFAAA,qDAAA,oBAAA,MAAA,mFAAA,qDAAA,oBAAA,4BAAA,mFAAA,qDAAA,6BAAA,yBAAA,mFAAA,qDAAA,uBAAA,QAAA,mFAAA,qDAAA,0CAAA,2CAAA,qDAAA,sDAAA,6DAAA,KAAA,qDAAA,4BAAA,oEAAA,mFAAA,qDAAA,0CAAA,mFAAA,qDAAA,uBAAA,iCAAA,2CAAA,qDAAA,+DAAA,6DAAA,KAAA,qDAAA,YAAA,uFAAA,oEAAA,mFAAA,qDAAA,oFAAA,2CAAA,qDAAA,sDAAA,6DAAA,MAAA,4DAAA,kDAAA,qDAAA,qBAAA,wFAAA,oEAAA,mFAAA,qDAAA,uBAAA,mFAAA,qDAAA,mBAAA,2DAAA,2CAAA,qDAAA,6DAAA,6DAAA,MAAA,4DAAA,uDAAA,qDAAA,mBAAA,wFAAA,oEAAA,mFAAA,qDAAA,uBAAA,mFAAA,qDAAA,mBAAA,mDAAA,2CAAA,qDAAA,4DAAA,6DAAA,MAAA,4DAAA,sDAAA,qDAAA,qBAAA,wFAAA,oEAAA,mFAAA,qDAAA,uBAAA,mFAAA,qDAAA,mBAAA,iDAAA,2CAAA,qDAAA,8DAAA,6DAAA,MAAA,qDAAA,4BAAA,wFAAA,oEAAA,mFAAA,qDAAA,uBAAA,mFAAA,qDAAA,mBAAA,qIAAA,2CAAA,qDAAA,gEAAA,6DAAA,MAAA,4DAAA,MAAA,qDAAA,iBAAA,oEAAA,gDAAA,2CAAA,qDAAA,oEAAA,6DAAA,MAAA,4DAAA,MAAA,qDAAA,UAAA,oEAAA,4EAAA,2CAAA,qDAAA,uEAAA,6DAAA,MAAA,4DAAA,MAAA,qDAAA,iBAAA,oEAAA,gHAAA,2CAAA,qDAAA,mEAAA,6DAAA,MAAA,qDAAA,SAAA,2FAAA,oEAAA,4CAAA,2CAAA,qDAAA,0DAAA,6DAAA,MAAA,4DAAA,MAAA,qDAAA,UAAA,oEAAA,yJAAA,2CAAA,qDAAA,uDAAA,6DAAA,MAAA,4DAAA,OAAA,qDAAA,SAAA,2FAAA,oEAAA,qDAAA,2CAAA,qDAAA,iEAAA,6DAAA,MAAA,4DAAA,QAAA,qDAAA,SAAA,2FAAA,oEAAA,kDAAA,2CAAA,qDAAA,8DAAA,6DAAA,MAAA,qDAAA,mBAAA,2GAAA,oEAAA,iEAAA,2CAAA,qDAAA,yEAAA,6DAAA,MAAA,qDAAA,UAAA,2FAAA,oEAAA,mFAAA,qDAAA,0DAAA,mFAAA,qDAAA,mCAAA,2CAAA,qDAAA,wDAAA,6DAAA,MAAA,qDAAA,SAAA,2FAAA,oEAAA,4EAAA,2CAAA,qDAAA,uDAAA,6DAAA,MAAA,qDAAA,gBAAA,oGAAA,oEAAA,yEAAA,2CAAA,qDAAA,qDAAA,6DAAA,MAAA,qDAAA,gBAAA,oGAAA,oEAAA,mFAAA,qDAAA,yBAAA,mFAAA,qDAAA,yBAAA,mFAAA,wDAAA,MAAA,mFAAA,qDAAA,iBAAA,OAAA,mFAAA,qDAAA,iBAAA,lhcAAKsB,4gBAC+H5B,25EAEvBE,wwBACA2B,46BACAA,o6BACAA,yzBACAA,43EAIAC,imCAEAA,0jBACAA,0fACAC,2hBACAC,qyBACAF,0gBACAG,8gBACAC;AAE7G,AAAA;;;;;;;kCAAA,0CAAAC,5EAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,qEAAAF;;;AAAA,AAAA,CAAA,uEAAA,WAAAG,lFAAMD;AAAN,AAAA,IAAAE,aAAAD;IAAAC,iBAAA,AAAAlC,4BAAAkC;WAAAA,PAQU9B;cARV,AAAAH,4CAAAiC,eAAA,rEAMa7I;YANb,AAAA4G,4CAAAiC,eAAA,nEAMqBK;0BANrB,AAAAtC,4CAAAiC,eAAA,jFAM2BrC;qBAN3B,AAAAI,4CAAAiC,eAAA,yEAAA,rJAMyCrB;AANzC,AAAA,GASS,EAAA,GAAA2B,cAAA,KAAA,AAAAC,mEAAA,AAAAC,mIAAA,lGAAqBvB,2CAA0Bf;AATxD;AAAA,AAAA,MAAA,KAAA+B,MAAA;;;AAUE,IAAMQ,iBAAe,AAACxF,gDAAa,AAACyF,2BAAeL;IAC7CtF,iBAAe,gDAAA,AAAAO,hDAACL,gEAAcwF;IAC9BxE,sBAAe,gDAAA,hDAAChB;IAChBpC,cAAe,gDAAA,hDAACoC;IAChB0F,oBAAe,AAACpD,oBAAIpG;IACpBuG,gBAAc,gDAAA,2CAAA,+EAAA,uDAAA,KAAA,2DAAA,iCAAA,kDAAA,IAAA,wDAAA,hbAACzC,wJAAwB0F;IAQvCC,eAAa,AAACjH,gDAAQ+E,6BAAahB,cAAcvG,QAAQwH;IACzDzC,kBAAgB,gBAAA2E,LAAK3D,cAAsC0B;AAA3C,AAAA,IAAAkC,aAAAD;IAAAC,iBAAA,AAAAhD,4BAAAgD;eAAAA,XAAqC5C;8BAArC,AAAAH,4CAAA+C,eAAA,rFAAkBnD;AAAlB,AACE,AAACiD,aAAa1D,KAAKS,wBAAciB;;AACjC,OAACnD,sBAAO5C,YAAYqE;;AAhB5C,AAiBE,aAAA,uBAAA,pCAAC0D,gBAAgBjD;;AACjB;mCAAAoD;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAlD,4BAAAkD;eAAAA,XAEY9C;eAFZ,AAAAH,4CAAAiD,eAAA,4DAAA,lIAAsD9I;sBAAtD,AAAA6F,4CAAAiD,eAAA,7EAAyEE;gBAAzE,AAAAnD,4CAAAiD,eAAA,vEAA6BC;gBAA7B,AAAAlD,4CAAAiD,eAAA,vEAAuBX;WAAvB,AAAAtC,4CAAAiD,eAAA,lEAAsLM;eAAtL,AAAAvD,4CAAAiD,eAAA,6DAAA,nIAA6CpI;gBAA7C,AAAAmF,4CAAAiD,eAAA,vEAAiJrE;iBAAjJ,AAAAoB,4CAAAiD,eAAA,xEAAsII;kBAAtI,AAAArD,4CAAAiD,eAAA,zEAA6GpE;mBAA7G,AAAAmB,4CAAAiD,eAAA,1EAAyHlE;gBAAzH,AAAAiB,4CAAAiD,eAAA,vEAA+DrF,qIACE/C;YADjE,AAAAmF,4CAAAiD,eAAA,nEAAgIG;8BAAhI,AAAApD,4CAAAiD,eAAA,rFAA+FrD;kBAA/F,AAAAI,4CAAAiD,eAAA,zEAAe7J;YAAf,AAAA4G,4CAAAiD,eAAA,sDAAA,zHAAuC5J;YAAvC,AAAA2G,4CAAAiD,eAAA,nEAAgLK;yBAAhL,AAAAtD,4CAAAiD,eAAA,hFAA2JrC;aAA3J,AAAAZ,4CAAAiD,eAAA,pEAA0KzF;wBAA1K,AAAAwC,4CAAAiD,eAAA,/EAAmFjF;AAAnF,AAAA,GAGS,EAAA,GAAAuE,cAAA,KAAA,AAAAC,mEAAA,AAAAC,uIAAA,tGAAqBvB,2CAA0Bf;AAHxD;AAAA,AAAA,MAAA,KAAA+B,MAAA;;;AAIE,IAAM9I,cAAiB,EAAIwJ,mBAAY,AAAA,yFAAA,AAAArF,gBAAWoC,gBAAe,AAACgD,2BAAevJ;IAC3E+J,sBAAiB,AAACR,2BAAeQ;IACjCvD,0BAAiB,AAAC+C,2BAAe/C;IACjC8D,mBAAiB,AAACxG,gDAAa,AAACyF,2BAAeL;IAC/CtD,IAAiB,sHAAA,pHAAM,gDAAA,AAAAzB,gCAAA,AAAAA,hFAACoG,gEAAMjB,gCAAgBgB;AAC3B,qCAAA,AAAAnG,rCAACG,sBAAOgF,+BAAgBgB;;AACxB,4CAAA,AAAAnG,rCAACG,sBAAOV,+BAAgB0G;;CAF1B;IAGjBE,oBAAiB,iBAAA9J,oBAAKoJ;AAAL,AAAA,oBAAApJ;AAAe,OAAC+J,cAAIV;;AAApBrJ;;;eAPvB,WAAA0J,tBAQM3F;AARN,AAQwB,AACC,qCAAA2F,rCAAC9F,sBAAOV;;AACR,oBAAM,iBAAAlD,oBAAK8J;AAAL,AAAA,oBAAA9J;AAAiB,uDAAA,AAAAyD,gCAAA,AAAAA,hFAACoG,gEAAM3G,gCAAgB0G;;AAAxC5J;;;AAAN,AACE,IAAAgK,iBAAA,AAAAvG,gBAAYP;AAAZ,AAAA,mFAAA8G,sCAAAA,xHAACZ,0CAAAA,0DAAAA;;AADH;;AAEA,AAAC9C,mDAAMlC,oBAAc2F;;AACrB,uBAAA,YAAA,5BAAC1F,mBAAmBgC;;aAb7C,TAcM4D;AAdN,AAcwB,AACC,0CAAA,1CAACrG,sBAAOQ;;AACR,gBAAA,YAAA,5BAACC,mBAAmBgC;;AACpB,4CAAA,AAAA5C,rCAACG,sBAAOV,+BAAgB0F;;qBAjBjD,jBAkBM5D;AAlBN,AAkBwB,oBAAUqE;AAAV;;AAAA,AACC,OAAC/C,mDAAMlC,oBAAc2F;;;IACxCG,mBAAiB,EAAIpB,mBACFxJ,YACA,kBAAIwG,yBACF,mEAAA,AAAArC,nEAACjC,qCAAqBlC,YAAQe,SAASU,yBAAUC,cACjD,6DAAA,AAAAyC,7DAAC3C,+BAAexB,YAAQe,SAASU,yBAAUC;IAChEmJ,cAAiB;AAAA,AACE,oBAAId;AACF,AAACY;;AACD,SAAA,AAAAxG,TAACM,yBAAUb;;;AAHf;;IAKjBkH,eAAkB;AAAA,AACE,AAACH;;AADH;;IAGlBI,YAAkB;AAAA,AACE,oBAAIhB;AACF,AAACY;;AACD,AACE,oBAAMH;AAAN,AAAkB,IAAAQ,iBAAA,AAAA7G,gBAAYP;AAAZ,AAAA,mFAAAoH,sCAAAA,xHAAClB,0CAAAA,0DAAAA;;AAAnB;;AACA,0CAAA,1CAACxF,sBAAOQ;;AACR,gBAAA,YAAA,5BAACC,mBAAmBgC;;;AACxB,0CAAA,1CAACzC,sBAAOQ;;AAPV;;IASlBmG,WAAkB;AAAA,AACE,oBAAA,AAAA9G,gBAAKW;AACH,AAACR,sBAAOV,eAAe,0DAAA,AAAAO,gCAAA,1FAACpE,mCAAmB6K,iBAAiB3K,sBAAO2D;;AACnE,0CAAA,1CAACU,sBAAOQ;;;AAHZ;;IAKlBoG,aAAkB;AAAA,AACE,oBAAA,AAAA/G,gBAAKW;AACH,AAACR,sBAAOV,eAAe,0DAAA,AAAAO,gCAAA,1FAACpE,mCAAmB6K,iBAAiB3K,sBAAO2D;;AACnE,0CAAA,1CAACU,sBAAOQ;;;AAHZ;;IAKlBqG,aAAkB;AAAA,AACE,AAAC7G,sBAAOV,eAAe,0DAAA,AAAAO,gCAAA,1FAACpE,mCAAmB6K,iBAAiB3K,sBAAO2D;;AADrE;;IAGlBwH,YAAkB;AAAA,AACE,AAAC9G,sBAAOV,eAAe,0DAAA,AAAAO,gCAAA,1FAACpE,mCAAmB6K,iBAAiB3K,sBAAO2D;;AADrE;;kBAvDxB,WAAAyG,zBA0DMxF;AA1DN,AA0DwB,oBAAIkF;AAAJ;;AAEC,IAAAsB,WAAM,AAAAhB;AAAN,AAAA,QAAAgB;KAAA;AACK,OAACR;;;KADN;AAEK,OAACC;;;KAFN;AAGK,OAACC;;;KAHN;AAIK,OAACE;;;KAJN;AAKK,OAACC;;;KALN;AAMK,OAACC;;;KANN;AAOK,OAACC;;;;AACJxG;;;;;AApE3B,AAAA,0FAAA,6+BAAA,17BAsEG,uGAAA,2CAAA,kSAAA,pbAAC0G,0MACS,CAAA,iEAAsE,kBAAA,AAAAnH,sCAAA,AAAA,4CAAA,lEAAOW,oHAA2DV,yEACxI,gUAAA,2CAAA,3WAACkH,uGAAM,AAACC,4BAAiB,yBAAA,WAAA,lBAAIvB,2BACtB,uBAAA,iEAAA,xFAACwB,kPACOxB,cACRE,oBACfC,+FACD9E,6BAAazB,eAAe5D,YAAQC,MAAMwB,SAAS+D,UAAUC,YAAYC,eAAeb,YAAYD,kBAAYE,oBAAca,qBAC/H,kBAAM,iBAAAjF,oBAAA,AAAAyD,gBAAMW;AAAN,AAAA,oBAAApE;AAAoB,OAAC+J,cAAIV;;AAAzBrJ;;MAAN,AAAA,mFAAA,4EAAA,iLAAA,WAAA+K,zGAEIxG,gCAAgBL,kBAAYlD,YAAYmD,YAAYC;AAFxD,AAEuE,uBAAA2G,0BAAA,1CAAC1G,iCAAkBgC;WAF1F,mFAAA,+EAII,8BAAA,AAAA,2CAAA,uDAAA,2CAAA,4FAAA,rPAAMkD,0NAAgCA,iCACtC,kBACE,iBAAAvJ,oBAAK8I;AAAL,AAAA,GAAA9I;AAAiB,OAAA,2FAAA,AAAAyD,gBAAYoC;;AAA7B7F;;MADF,mFAAA,sFAAA,rBAEe,uCACb,iBAAAA,oBAAK8I;AAAL,AAAA,GAAA9I;AAAiB,OAAA,qFAAA,AAAAyD,gBAASoC;;AAA1B7F;;MAHF,mFAAA,yLAAA,7HAIa,AAAA,qFAAA,AAAAyD,gBAASoC,0BACpB,CAAA,oCAAA,pBAAIqE,hBAAiBpK,0CACrB,iBAAAkL,aAAoC,AAAC7K,4CAA4B+J,iBAAiB7J;kBAAlF,AAAAH,4CAAA8K,WAAA,IAAA,zEAAOE;sBAAP,AAAAhL,4CAAA8K,WAAA,IAAA,7EAAmBG;IACbC,gBAA8B,AAACtJ,uDAAQ+B,iCAAiBtE,MAAMuE,UAAUC,2DAASb;mBADvF,WAAA+H,1BAEMI;AAFN,AAEqC,iEAAAJ,1DAACxK,4CAAI2K;;IACpCE,sBAA8B,WAAKC,EAAEnL;AAAP,AACE,OAACoL,eAAK,AAAC1I,mCAAmByI,GACpB,AAACF,aAAajL;;IACpDqL,4BAA8B,sHAAA,rHAAM,AAAA,oFAAQ,AAAC/K,gBAAMwK;AANzD,AAOE,GAAI,EAAK,6CAAA,7CAACrL,iDAAI,AAACC,gBAAMqL,uBAAkBM;AACrC,OAACJ,aAAa,AAAC3K,gBAAMyK;;AACrB,OAACO,8CAAMC,iBAAO,AAAClL,4CAAI6K,oBAAoBJ,YAAYC;;KAfzD,AAAA,mFAAA,uEAiBkB,CAAA,kEAAA,AAAA1H,8BAAA,dAA4BzC;oBAtBlD;;;IAlFLkI;;;;EAAAA;;oCAAAA;;;IAAAA;0BAAAA;;;;;;;;AA5BJ,CAAA,0DAAA,1DAAMjB;;AAAN;AAAA,CAAA,oDAAA,WAAAI,/DAAMJ;AAAN,AAAA,IAAAK,qBAAA;AAAA,AAAA,OAAAA,wDAAA,AAAAC,cAAAF;;;AAAA","names":["re-com.dropdown/move-to-new-choice","choices","id-fn","id","offset","current-index","re_com.util.position_for_id","new-index","cljs.core._EQ_","cljs.core/count","cljs.core/mod","and__4221__auto__","G__34643","cljs.core.nth","re-com.dropdown/choices-with-group-headings","opts","group-fn","groups","cljs.core.partition_by","group-headers","cljs.core.map","cljs.core/first","p1__34644#","cljs.core/PersistentHashMap","cljs.core.gensym","re-com.dropdown/filter-choices","label-fn","filter-text","lower-filter-text","clojure.string/lower-case","filter-fn","opt","group","label","cljs.core.filter","re-com.dropdown/filter-choices-regex","re","e34647","js/RegExp","js/Object","e","cljs.core.partial","or__4223__auto__","re-com.dropdown/filter-choices-by-keyword","keyword","value","re-com.dropdown/show-selected-item","node","item-offset-top","item-offset-bottom","parent","parent-height","parent-visible-top","parent-visible-bottom","new-scroll-top","x__4306__auto__","y__4307__auto__","re-com.dropdown/make-group-heading","m","re-com.dropdown/choice-item","on-click","internal-model","mouse-over?","reagent.core.atom","reagent.core.create_class","this","reagent.dom/dom-node","selected","cljs.core/deref","class","event","cljs.core/reset!","re-com.dropdown/make-choice-item","render-fn","callback","markup","re-com.dropdown/filter-text-box-base","filter-box?","key-handler","drop-showing?","set-filter-text","G__34648","re-com.dropdown/filter-text-box","p1__34649#","p1__34650#","cljs.core/with-meta","re-com.dropdown/dropdown-top","ignore-click","cljs.core.atom","tab-index","placeholder","dropdown-click","title?","_","reagent.core/set-state","reagent.core/current-component","text","G__34652","re_com.util.item_for_id","re-com.dropdown/fn-or-vector-of-maps?","v","cljs.core/fn?","re-com.validate/vector-of-maps?","re-com.dropdown/load-choices*","choices-state","regex-filter?","p__34655","map__34656","cljs.core/--destructure-map","cljs.core.get","result","error","args","cljs.core.swap_BANG_","cljs.core/assoc","G__34657","G__34658","p1__34653#","G__34659","p1__34654#","re-com.dropdown/load-choices","debounce-delay","debounce?","temp__5753__auto__","timer","js/clearTimeout","js/setTimeout","re-com.dropdown/single-dropdown-args-desc","cljs.core/ifn?","cljs.core/string?","re-com.validate/number-or-string?","cljs.core/number?","re-com.validate/css-style?","re-com.validate/html-attr?","var_args","args__4835__auto__","len__4829__auto__","i__4830__auto__","argseq__4836__auto__","cljs.core/IndexedSeq","re-com.dropdown/single-dropdown","p__34674","map__34675","js/Error","seq34668","self__4817__auto__","cljs.core/seq","model","js/goog.DEBUG","re_com.validate.validate_args","re-com.validate/extract-arg-data","external-model","re-com.util/deref-or-value","choices-fn?","load-choices","p__34678","map__34679","p__34680","map__34681","on-change","disabled?","width","max-height","style","attr","p1__34664#","p1__34665#","latest-ext-model","cljs.core.not_EQ_","changeable?","cljs.core/not","G__34685","cancel","filtered-choices","press-enter","press-escape","press-tab","G__34686","press-up","press-down","press-home","press-end","G__34689","cljs.core.merge","re-com.box/flex-child-style","re-com.box/align-style","p1__34666#","vec__34693","p1__34667#","group-names","group-opt-lists","make-a-choice","make-choices","make-h-then-choices","h","cljs.core/cons","has-no-group-names?","cljs.core.apply","cljs.core/concat"],"sourcesContent":["(ns re-com.dropdown\n  (:require-macros [re-com.core :refer [handler-fn]])\n  (:require [re-com.util     :refer [deref-or-value position-for-id item-for-id]]\n            [re-com.box      :refer [align-style flex-child-style]]\n            [re-com.validate :refer [vector-of-maps? css-style? html-attr? number-or-string?] :refer-macros [validate-args-macro]]\n            [clojure.string  :as    string]\n            [reagent.core    :as    reagent]\n            [reagent.dom     :as    rdom]))\n\n;;  Inspiration: http://alxlit.name/bootstrap-chosen\n;;  Alternative: http://silviomoreto.github.io/bootstrap-select\n\n(defn- move-to-new-choice\n  \"In a vector of maps (where each map has an :id), return the id of the choice offset posititions away\n   from id (usually +1 or -1 to go to next/previous). Also accepts :start and :end\"\n  [choices id-fn id offset]\n  (let [current-index (position-for-id id choices :id-fn id-fn)\n        new-index     (cond\n                        (= offset :start)    0\n                        (= offset :end)      (dec (count choices))\n                        (nil? current-index) 0\n                        :else                (mod (+ current-index offset) (count choices)))]\n    (when (and new-index (pos? (count choices)))\n      (id-fn (nth choices new-index)))))\n\n\n(defn- choices-with-group-headings\n  \"If necessary, inserts group headings entries into the choices\"\n  [opts group-fn]\n  (let [groups         (partition-by group-fn opts)\n        group-headers  (->> groups\n                            (map first)\n                            (map group-fn)\n                            (map #(hash-map :id (gensym) :group %)))]\n    [group-headers groups]))\n\n\n(defn- filter-choices\n  \"Filter a list of choices based on a filter string using plain string searches (case insensitive). Less powerful\n   than regex's but no confusion with reserved characters\"\n  [choices group-fn label-fn filter-text]\n  (let [lower-filter-text (string/lower-case filter-text)\n        filter-fn         (fn [opt]\n                            (let [group (if (nil? (group-fn opt)) \"\" (group-fn opt))\n                                  label (str (label-fn opt))]\n                              (or\n                                (>= (.indexOf (string/lower-case group) lower-filter-text) 0)\n                                (>= (.indexOf (string/lower-case label) lower-filter-text) 0))))]\n    (filter filter-fn choices)))\n\n\n(defn- filter-choices-regex\n  \"Filter a list of choices based on a filter string using regex's (case insensitive). More powerful but can cause\n   confusion for users entering reserved characters such as [ ] * + . ( ) etc.\"\n  [choices group-fn label-fn filter-text]\n  (let [re        (try\n                    (js/RegExp. filter-text \"i\")\n                    (catch js/Object e nil))\n        filter-fn (partial (fn [re opt]\n                             (when-not (nil? re)\n                               (or (.test re (group-fn opt)) (.test re (label-fn opt)))))\n                           re)]\n    (filter filter-fn choices)))\n\n\n(defn filter-choices-by-keyword\n  \"Filter a list of choices extra data within the choices vector\"\n  [choices keyword value]\n  (let [filter-fn (fn [opt] (>= (.indexOf (keyword opt) value) 0))]\n    (filter filter-fn choices)))\n\n\n(defn show-selected-item\n  [node]\n  (let [item-offset-top       (.-offsetTop node)\n        item-offset-bottom    (+ item-offset-top (.-clientHeight node))\n        parent                (.-parentNode node)\n        parent-height         (.-clientHeight parent)\n        parent-visible-top    (.-scrollTop parent)\n        parent-visible-bottom (+ parent-visible-top parent-height)\n        new-scroll-top        (cond\n                                (> item-offset-bottom parent-visible-bottom) (max (- item-offset-bottom parent-height) 0)\n                                (< item-offset-top parent-visible-top)       item-offset-top)]\n    (when new-scroll-top (set! (.-scrollTop parent) new-scroll-top))))\n\n\n(defn- make-group-heading\n  \"Render a group heading\"\n  [m]\n  ^{:key (:id m)} [:li.group-result\n                   (:group m)])\n\n\n(defn- choice-item\n  \"Render a choice item and set up appropriate mouse events\"\n  [id label on-click internal-model]\n  (let [mouse-over? (reagent/atom false)]\n    (reagent/create-class\n      {:component-did-mount\n       (fn [this]\n         (let [node (rdom/dom-node this)\n               selected (= @internal-model id)]\n           (when selected (show-selected-item node))))\n\n       :component-did-update\n       (fn [this]\n         (let [node (rdom/dom-node this)\n               selected (= @internal-model id)]\n           (when selected (show-selected-item node))))\n\n       :display-name \"choice-item\"\n\n       :reagent-render\n       (fn\n         [id label on-click internal-model]\n         (let [selected (= @internal-model id)\n               class (if selected\n                       \"highlighted\"\n                       (when @mouse-over? \"mouseover\"))]\n           [:li\n            {:class         (str \"active-result group-option \" class)\n             :on-mouse-over (handler-fn (reset! mouse-over? true))\n             :on-mouse-out  (handler-fn (reset! mouse-over? false))\n             :on-mouse-down (handler-fn (on-click id))}\n            label]))})))\n\n\n(defn make-choice-item\n  [id-fn render-fn callback internal-model opt]\n  (let [id (id-fn opt)\n        markup (render-fn opt)]\n    ^{:key (str id)} [choice-item id markup callback internal-model]))\n\n\n(defn- filter-text-box-base\n  \"Base function (before lifecycle metadata) to render a filter text box\"\n  [filter-box? filter-text key-handler drop-showing? set-filter-text]\n  [:div.chosen-search\n   [:input\n    {:type          \"text\"\n     :auto-complete \"off\"\n     :style         (when-not filter-box? {:position \"absolute\" ;; When no filter box required, use it but hide it off screen\n                                           :width    \"0px\"      ;; The rest of these styles make the textbox invisible\n                                           :padding  \"0px\"\n                                           :border   \"none\"})\n     :value         @filter-text\n     :on-change     (handler-fn (set-filter-text (-> event .-target .-value)))\n     :on-key-down   (handler-fn (when-not (key-handler event)\n                                  (.preventDefault event))) ;; When key-handler returns false, preventDefault\n     :on-blur       (handler-fn (reset! drop-showing? false))}]])\n\n\n(def ^:private filter-text-box\n  \"Render a filter text box\"\n  (with-meta filter-text-box-base\n             {:component-did-mount #(let [node (.-firstChild (rdom/dom-node %))]\n                                     (.focus node))\n              :component-did-update #(let [node (.-firstChild (rdom/dom-node %))]\n                                      (.focus node))}))\n\n(defn- dropdown-top\n  \"Render the top part of the dropdown, with the clickable area and the up/down arrow\"\n  []\n  (let [ignore-click (atom false)]\n    (fn\n      [internal-model choices id-fn label-fn tab-index placeholder dropdown-click key-handler filter-box? drop-showing? title?]\n      (let [_    (reagent/set-state (reagent/current-component) {:filter-box? filter-box?})\n            text (if @internal-model\n                   (label-fn (item-for-id @internal-model choices :id-fn id-fn))\n                   placeholder)]\n        [:a.chosen-single.chosen-default\n         {:href          \"javascript:\"   ;; Required to make this anchor appear in the tab order\n          :tab-index     tab-index\n          :on-click      (handler-fn\n                           (if @ignore-click\n                             (reset! ignore-click false)\n                             (dropdown-click)))\n          :on-mouse-down (handler-fn\n                           (when @drop-showing?\n                             (reset! ignore-click true)))   ;; TODO: Hmmm, have a look at calling preventDefault (and stopProp?) and removing the ignore-click stuff\n          :on-key-down   (handler-fn\n                           (key-handler event)\n                           (when (= (.-which event) 13)     ;; Pressing enter on an anchor also triggers click event, which we don't want\n                             (reset! ignore-click true)))}  ;; TODO: Hmmm, have a look at calling preventDefault (and stopProp?) and removing the ignore-click stuff\n         [:span (when title?\n                  {:title text})\n          text]\n         [:div [:b]]])))) ;; This odd bit of markup produces the visual arrow on the right\n\n(defn- fn-or-vector-of-maps? ;; Would normally move this to re-com.validate but this is very specific to this component\n  [v]\n  (or (fn? v)\n      (vector-of-maps? v)))\n\n(defn- load-choices*\n  \"Load choices if choices is callback.\"\n  [choices-state choices text regex-filter?]\n  (let [id (inc (:id @choices-state))\n        callback (fn [{:keys [result error] :as args}]\n                   (when (= id (:id @choices-state))\n                     (swap! choices-state assoc\n                            :loading? false\n                            :error error\n                            :choices result)))]\n    (swap! choices-state assoc\n           :loading? true\n           :error nil\n           :id id\n           :timer nil)\n    (choices {:filter-text   text\n              :regex-filter? regex-filter?}\n             #(callback {:result %})\n             #(callback {:error %}))))\n\n(defn- load-choices\n  \"Load choices or schedule lodaing depending on debounce?\"\n  [choices-state choices debounce-delay text regex-filter? debounce?]\n  (when (fn? choices)\n    (when-let [timer (:timer @choices-state)]\n      (js/clearTimeout timer))\n    (if debounce?\n      (let [timer (js/setTimeout #(load-choices* choices-state choices text regex-filter?) debounce-delay)]\n        (swap! choices-state assoc :timer timer))\n      (load-choices* choices-state choices text regex-filter?))))\n\n;;--------------------------------------------------------------------------------------------------\n;; Component: single-dropdown\n;;--------------------------------------------------------------------------------------------------\n\n(def single-dropdown-args-desc\n  [{:name :choices       :required true                   :type \"vector of choices | atom | (opts, done, fail) -> nil\" :validate-fn fn-or-vector-of-maps? :description [:span \"Each is expected to have an id, label and, optionally, a group, provided by \" [:code \":id-fn\"] \", \" [:code \":label-fn\"] \" & \" [:code \":group-fn\"] \". May also be a callback \" [:code \"(opts, done, fail)\"] \" where opts is map of \" [:code \":filter-text\"] \" and \" [:code \":regex-filter?.\"]]}\n   {:name :model         :required true                   :type \"the id of a choice | atom\"                                    :description [:span \"the id of the selected choice. If nil, \" [:code \":placeholder\"] \" text is shown\"]}\n   {:name :on-change     :required true                   :type \"id -> nil\"                     :validate-fn fn?               :description [:span \"called when a new choice is selected. Passed the id of new choice\"] }\n   {:name :id-fn         :required false :default :id     :type \"choice -> anything\"            :validate-fn ifn?              :description [:span \"given an element of \" [:code \":choices\"] \", returns its unique identifier (aka id)\"]}\n   {:name :label-fn      :required false :default :label  :type \"choice -> string\"              :validate-fn ifn?              :description [:span \"given an element of \" [:code \":choices\"] \", returns its displayable label.\"]}\n   {:name :group-fn      :required false :default :group  :type \"choice -> anything\"            :validate-fn ifn?              :description [:span \"given an element of \" [:code \":choices\"] \", returns its group identifier\"]}\n   {:name :render-fn     :required false                  :type \"choice -> string | hiccup\"     :validate-fn ifn?              :description [:span \"given an element of \" [:code \":choices\"] \", returns the markup that will be rendered for that choice. Defaults to the label if no custom markup is required.\"]}\n   {:name :disabled?     :required false :default false   :type \"boolean | atom\"                                               :description \"if true, no user selection is allowed\"}\n   {:name :filter-box?   :required false :default false   :type \"boolean\"                                                      :description \"if true, a filter text field is placed at the top of the dropdown\"}\n   {:name :regex-filter? :required false :default false   :type \"boolean | atom\"                                               :description \"if true, the filter text field will support JavaScript regular expressions. If false, just plain text\"}\n   {:name :placeholder   :required false                  :type \"string\"                        :validate-fn string?           :description \"background text when no selection\"}\n   {:name :title?        :required false :default false   :type \"boolean\"                                                      :description \"if true, allows the title for the selected dropdown to be displayed via a mouse over. Handy when dropdown width is small and text is truncated\"}\n   {:name :width         :required false :default \"100%\"  :type \"string\"                        :validate-fn string?           :description \"the CSS width. e.g.: \\\"500px\\\" or \\\"20em\\\"\"}\n   {:name :max-height    :required false :default \"240px\" :type \"string\"                        :validate-fn string?           :description \"the maximum height of the dropdown part\"}\n   {:name :tab-index     :required false                  :type \"integer | string\"              :validate-fn number-or-string? :description \"component's tabindex. A value of -1 removes from order\"}\n   {:name :debounce-delay :required false                 :type \"integer\"                       :validate-fn number?           :description [:span \"delay to debounce loading requests when using callback \" [:code \":choices\"]]}\n   {:name :class         :required false                  :type \"string\"                        :validate-fn string?           :description \"CSS class names, space separated (applies to the outer container)\"}\n   {:name :style         :required false                  :type \"CSS style map\"                 :validate-fn css-style?        :description \"CSS styles to add or override (applies to the outer container)\"}\n   {:name :attr          :required false                  :type \"HTML attr map\"                 :validate-fn html-attr?        :description [:span \"HTML attributes, like \" [:code \":on-mouse-move\"] [:br] \"No \" [:code \":class\"] \" or \" [:code \":style\"] \"allowed (applies to the outer container)\"]}])\n\n(defn single-dropdown\n  \"Render a single dropdown component which emulates the bootstrap-choosen style. Sample choices object:\n     [{:id \\\"AU\\\" :label \\\"Australia\\\"      :group \\\"Group 1\\\"}\n      {:id \\\"US\\\" :label \\\"United States\\\"  :group \\\"Group 1\\\"}\n      {:id \\\"GB\\\" :label \\\"United Kingdom\\\" :group \\\"Group 1\\\"}\n      {:id \\\"AF\\\" :label \\\"Afghanistan\\\"    :group \\\"Group 2\\\"}]\"\n  [& {:keys [choices model regex-filter? debounce-delay]\n      :or {debounce-delay 250}\n      :as args}]\n  {:pre [(validate-args-macro single-dropdown-args-desc args \"single-dropdown\")]}\n  (let [external-model (reagent/atom (deref-or-value model))  ;; Holds the last known external value of model, to detect external model changes\n        internal-model (reagent/atom @external-model)         ;; Create a new atom from the model to be used internally\n        drop-showing?  (reagent/atom false)\n        filter-text    (reagent/atom \"\")\n        choices-fn?    (fn? choices)\n        choices-state (reagent/atom {:loading? choices-fn?\n                                     ; loading error\n                                     :error nil\n                                     :choices []\n                                     ; request id to ignore handling response when new request was already made\n                                     :id 0\n                                     ; to debounce requests\n                                     :timer nil})\n        load-choices (partial load-choices choices-state choices debounce-delay)\n        set-filter-text (fn [text {:keys [regex-filter?] :as args} debounce?]\n                          (load-choices text regex-filter? debounce?)\n                          (reset! filter-text text))]\n    (load-choices \"\" regex-filter? false)\n    (fn [& {:keys [choices model on-change id-fn label-fn group-fn render-fn disabled? filter-box? regex-filter? placeholder title? width max-height tab-index debounce-delay class style attr]\n            :or {id-fn :id label-fn :label group-fn :group render-fn label-fn}\n            :as args}]\n      {:pre [(validate-args-macro single-dropdown-args-desc args \"single-dropdown\")]}\n      (let [choices          (if choices-fn? (:choices @choices-state) (deref-or-value choices))\n            disabled?        (deref-or-value disabled?)\n            regex-filter?    (deref-or-value regex-filter?)\n            latest-ext-model (reagent/atom (deref-or-value model))\n            _                (when (not= @external-model @latest-ext-model) ;; Has model changed externally?\n                               (reset! external-model @latest-ext-model)\n                               (reset! internal-model @latest-ext-model))\n            changeable?      (and on-change (not disabled?))\n            callback         #(do\n                               (reset! internal-model %)\n                               (when (and changeable? (not= @internal-model @latest-ext-model))\n                                 (on-change @internal-model))\n                               (swap! drop-showing? not) ;; toggle to allow opening dropdown on Enter key\n                               (set-filter-text \"\" args false))\n            cancel           #(do\n                               (reset! drop-showing? false)\n                               (set-filter-text \"\" args false)\n                               (reset! internal-model @external-model))\n            dropdown-click   #(when-not disabled?\n                               (swap! drop-showing? not))\n            filtered-choices (if choices-fn?\n                               choices\n                               (if regex-filter?\n                                 (filter-choices-regex choices group-fn label-fn @filter-text)\n                                 (filter-choices choices group-fn label-fn @filter-text)))\n            press-enter      (fn []\n                               (if disabled?\n                                 (cancel)\n                                 (callback @internal-model))\n                               true)\n            press-escape      (fn []\n                                (cancel)\n                                true)\n            press-tab         (fn []\n                                (if disabled?\n                                  (cancel)\n                                  (do  ;; Was (callback @internal-model) but needed a customised version\n                                    (when changeable? (on-change @internal-model))\n                                    (reset! drop-showing? false)\n                                    (set-filter-text \"\" args false)))\n                                (reset! drop-showing? false)\n                                true)\n            press-up          (fn []\n                                (if @drop-showing?  ;; Up arrow\n                                  (reset! internal-model (move-to-new-choice filtered-choices id-fn @internal-model -1))\n                                  (reset! drop-showing? true))\n                                true)\n            press-down        (fn []\n                                (if @drop-showing?  ;; Down arrow\n                                  (reset! internal-model (move-to-new-choice filtered-choices id-fn @internal-model 1))\n                                  (reset! drop-showing? true))\n                                true)\n            press-home        (fn []\n                                (reset! internal-model (move-to-new-choice filtered-choices id-fn @internal-model :start))\n                                true)\n            press-end         (fn []\n                                (reset! internal-model (move-to-new-choice filtered-choices id-fn @internal-model :end))\n                                true)\n            key-handler      #(if disabled?\n                               false\n                               (case (.-which %)\n                                 13 (press-enter)\n                                 27 (press-escape)\n                                 9  (press-tab)\n                                 38 (press-up)\n                                 40 (press-down)\n                                 36 (press-home)\n                                 35 (press-end)\n                                 filter-box?))]  ;; Use this boolean to allow/prevent the key from being processed by the text box\n        [:div\n         (merge\n           {:class (str \"rc-dropdown chosen-container chosen-container-single noselect \" (when @drop-showing? \"chosen-container-active chosen-with-drop \") class)\n            :style (merge (flex-child-style (if width \"0 0 auto\" \"auto\"))\n                          (align-style :align-self :start)\n                          {:width width}\n                          style)}\n           attr)          ;; Prevent user text selection\n         [dropdown-top internal-model choices id-fn label-fn tab-index placeholder dropdown-click key-handler filter-box? drop-showing? title?]\n         (when (and @drop-showing? (not disabled?))\n           [:div.chosen-drop\n            [filter-text-box filter-box? filter-text key-handler drop-showing? #(set-filter-text % args true)]\n            [:ul.chosen-results\n             (when max-height {:style {:max-height max-height}})\n             (cond\n               (and choices-fn? (:loading? @choices-state))\n               [:li.loading (str \"Loading...\")]\n               (and choices-fn? (:error @choices-state))\n               [:li.error (:error @choices-state)]\n               (-> filtered-choices count pos?)\n               (let [[group-names group-opt-lists] (choices-with-group-headings filtered-choices group-fn)\n                     make-a-choice                 (partial make-choice-item id-fn render-fn callback internal-model)\n                     make-choices                  #(map make-a-choice %1)\n                     make-h-then-choices           (fn [h opts]\n                                                     (cons (make-group-heading h)\n                                                           (make-choices opts)))\n                     has-no-group-names?           (nil? (:group (first group-names)))]\n                 (if (and (= 1 (count group-opt-lists)) has-no-group-names?)\n                   (make-choices (first group-opt-lists)) ;; one group means no headings\n                   (apply concat (map make-h-then-choices group-names group-opt-lists))))\n               :else\n               [:li.no-results (str \"No results match \\\"\" @filter-text \"\\\"\")])]])]))))\n"]}