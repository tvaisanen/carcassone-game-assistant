{"version":3,"sources":["game_assistant/events.cljs"],"mappings":"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","names":["re_frame.core.reg_event_fx","_","game-assistant.db/default-db","p__40408","map__40409","cljs.core/--destructure-map","cljs.core.get","db","vec__40410","seq__40411","cljs.core/seq","first__40412","cljs.core/first","cljs.core/next","tile","rest","cljs.core.merge","p1__40406#","cljs.core.filter","cljs.core._EQ_","p1__40407#","cljs.core.map","cljs.core.update","cljs.core/dec","re_frame.core.reg_event_db","p__40413","vec__40414","cljs.core.nth","view","cljs.core.assoc","cljs.core/not","cljs.core.dissoc","p__40419","p__40420","map__40421","vec__40422","p1__40417#","p1__40418#","game-assistant.events/neighbors","p__40425","vec__40426","loc","rot","n","p__40429","vec__40430","row","col","tilemap","tile-str","cljs.core.conj","game-assistant.utils/rotate-tile","cljs.core.distinct","cljs.core.concat","p__40433","p__40434","map__40435","vec__40436","cljs.core.get_in","p__40439","p__40440","map__40441","vec__40442","direction","current-tile","tile-id","angle","rotation","cljs.core/mod","rotated-tile","G__40445","updated","cljs.core.prn","cljs.core/assoc-in","p__40447","vec__40448","p","vec__40451","pawn","filtered","cljs.core.reduce","p__40454","vec__40455","f","s","v","p1__40446#","map__40460","used-tiles","neighbors","used-with-tiles","exclude","cljs.core.into","cljs.core.juxt","cljs.core.comp","with-candidates","p1__40458#","cljs.core/contains?","fn-d","c","nx","ny","cx","cy","distances","js/Math.abs","max-d","cljs.core.apply","cljs.core/+","cljs.core/nil?","n-with-c","p__40461","map__40462","candidates","neighbor","valid-targets","target","constraint","a","game-assistant.utils/tile-to-matrix","b","a-side","b-side","G__40463","game-assistant.utils/tiles-can-join?","cljs.core/flatten","p1__40459#","cljs.core/deref","re_frame.core.subscribe","game-assistant.utils/tiles-to-graph-grid","vec__40464","game-assistant.utils/tile-to-graph-coord","game-assistant.utils/tiles-to-graph"],"sourcesContent":["(ns game-assistant.events\n  (:require\n   [clojure.pprint :refer [pprint]]\n   [clojure.zip :as z]\n   [clojure.walk]\n   [re-frame.core :as rf]\n   [game-assistant.utils :as utils]\n   [game-assistant.subs :as subs]\n   [game-assistant.db :as db]))\n\n(rf/reg-event-fx\n ::initialize-db\n (fn [_ _]\n   {:db db/default-db\n    :fx [[:dispatch [::pick-selected-tile :city-road-03]]\n         [:dispatch [::set-tile :city-road-03 {:row 0 :col 0}]]\n         [:dispatch [::clear-current-tile]]]}))\n\n(rf/reg-event-fx\n ::pop-tile\n (fn [{:keys [db]} _]\n   (let [[tile & rest] (:deck db)]\n     {:db (merge db {:deck         rest\n                     :current-tile (merge {:rotate 0}\n                                          (first\n                                           (filter #(= tile (:id %) tile) (:tiles db))))\n                     :tiles        (map #(if (= (:id %) tile)\n                                           (update % :count dec) %) (:tiles db))})\n      :fx [[:dispatch [::check-constraints]]]})))\n\n(rf/reg-event-db\n ::set-view\n (fn [db [_ view]]\n   (assoc db :view view)))\n\n(rf/reg-event-db\n ::toggle-remaining-tiles-visibility\n (fn [db _]\n   (update db :show-remaining-tiles? not)))\n\n\n\n(rf/reg-event-db\n ::clear-current-tile\n (fn [db _]\n   (dissoc db :current-tile)))\n\n(rf/reg-event-fx\n ::pick-selected-tile\n (fn [{:keys [db]} [_ tile]]\n   {:db (merge\n         db\n         {:current-tile (merge {:rotate 0}\n                               (first\n                                (filter #(= tile (:id %) tile) (:tiles db))))\n          :tiles (map #(if (= (:id %) tile)\n                         (update % :count dec)\n                         %) (:tiles db))})\n    :fx [[:dispatch [::check-constraints]]]}))\n\n(def neighbors\n  [[1  0]\n   [0  1]\n   [-1 0]\n   [0 -1]])\n\n(rf/reg-event-db\n ::set-tile\n (fn [db [_ tile loc rot]]\n   (let [n (map (fn [[row col]]\n                  {:row (+ (:row loc) row)\n                   :col (+ (:col loc) col)})\n                neighbors)\n         tilemap (:id-to-tile db)\n         tile-str (tile tilemap)]\n     (merge db\n            {:valid-targets nil\n             :current-tile nil\n             :used-tiles (conj\n                          (:used-tiles db)\n                          {:tile (utils/rotate-tile rot tile-str)\n                           :id tile\n                           :loc loc\n                           :rotate rot})\n             ;; filter neighbors that are on used tiles\n             :neighbors (distinct (concat n (:neighbors db)))}))))\n\n(rf/reg-event-fx\n ::set-current-tile\n (fn [{:keys [db]} [_ loc]]\n   {:fx [[:dispatch [::set-tile\n                     (get-in db [:current-tile :id]) loc\n                     (get-in db [:current-tile :rotate]) loc]]\n         ;[:dispatch [::check-constraints]]\n         ]}))\n\n(rf/reg-event-fx\n ::rotate-current\n (fn [{:keys [db]} [_ direction]]\n   (let [current-tile (get-in db [:current-tile])\n         tile-id (:id current-tile)\n         angle        (if (= direction :left)\n                        -90\n                        90)\n         rotation (mod (+ angle (:rotate current-tile)) 360)\n         rotated-tile (utils/rotate-tile rotation (-> db :id-to-tile tile-id))\n         updated      (merge current-tile\n                             {:rotate rotation\n                              :tile rotated-tile})]\n\n     (prn direction angle updated)\n     {:db (assoc-in db [:current-tile] updated)\n      :fx [[:dispatch [::check-constraints]]]})))\n\n(rf/reg-event-db\n ::place-pawn\n (fn [db [_ p]]\n   (let [[pawn filtered] (->> db\n                              (:pawns-left)\n                              (reduce (fn [[f s] v]\n                                        (if (= (:id p) (:id v))\n                                          [v s]\n                                          [f (conj s v)]))\n                                      [nil []]))]\n     (-> db\n         (assoc :pawns-left filtered)\n         (update :pawns-played #(conj % (merge p pawn)))))))\n\n(rf/reg-event-db\n ::check-constraints\n (fn [db _]\n   (let [{:keys [used-tiles\n                 neighbors\n                 current-tile]} db\n         used-with-tiles        used-tiles ;(map #(merge % {:tile ((:id %) id-to-tile)}) used-tiles)\n         exclude                (into #{} (map (juxt (comp :row :loc) (comp :col :loc)) used-tiles))\n         with-candidates\n         (->> neighbors\n              (filter #(not (contains? exclude ((juxt :row :col) %))))\n              (map (fn [n]\n                     (let [fn-d\n                           (fn  [c]\n                             (let [nx        (:col n)\n                                   ny        (:row n)\n                                   cx        (-> c :loc :col)\n                                   cy        (-> c :loc :row)\n                                   distances [(js/Math.abs (- cy ny))\n                                              (js/Math.abs (- cx nx))]\n                                   max-d     (apply + distances)]\n                               (merge c {:distance  max-d\n                                         :direction (first (filter (comp not nil?)\n                                                                   [(cond\n                                                                      (> nx cx) :left\n                                                                      (< nx cx) :right\n                                                                      :else     nil)\n                                                                    (cond\n                                                                      (> ny cy) :top\n                                                                      (< ny cy) :bottom\n                                                                      :else     nil)]))})))]\n                       {:neighbor n :candidates (map fn-d used-with-tiles)}))))\n\n         n-with-c (map\n                   (fn [{:keys [candidates neighbor]}]\n                     {:neighbor    neighbor\n                      :constraints (filter (fn [c]\n                                             (= (:distance c) 1))\n                                           candidates)})\n                   with-candidates)\n\n         valid-targets (when-not (nil? current-tile)\n                         (->> n-with-c\n                              (map (fn [target]\n                                     (merge target\n                                            {:valid-targets\n                                             (map (fn [constraint]\n                                                    (let [a      (utils/tile-to-matrix (:tile current-tile))\n                                                          b      (utils/tile-to-matrix (-> constraint :tile))\n                                                          a-side (-> constraint :direction)\n                                                          b-side (a-side {:top    :bottom\n                                                                          :left   :right\n                                                                          :right  :left\n                                                                          :bottom :top})]\n                                                      (merge (:neighbor target)\n                                                             {:current-side    a-side\n                                                              :constraint-side b-side\n                                                              :current         (:tile current-tile)\n                                                              :constraint      (:tile constraint)\n                                                              :can-join?       (utils/tiles-can-join? a a-side b b-side)}))) (:constraints target))})))\n                              (map :valid-targets)\n                              (flatten)))]\n     (prn (filter #(= [-1 0] ((juxt :row :col) (:neighbor %))) n-with-c))\n     (assoc db :valid-targets valid-targets))))\n\n(let [used-tiles   @(rf/subscribe [::subs/used-tiles])]\n  (utils/tiles-to-graph-grid used-tiles))\n\n(let [[tile]   @(rf/subscribe [::subs/used-tiles])]\n  (utils/tile-to-graph-coord (merge {:idx 12} (:loc tile))))\n\n(let [used-tiles   @(rf/subscribe [::subs/used-tiles])]\n  (utils/tiles-to-graph used-tiles))\n"]}