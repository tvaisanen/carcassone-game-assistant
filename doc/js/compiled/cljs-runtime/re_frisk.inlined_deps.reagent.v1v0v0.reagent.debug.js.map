{"version":3,"sources":["re_frisk/inlined_deps/reagent/v1v0v0/reagent/debug.cljs"],"mappings":";AAGA,AAAaA,iEAAY,QAAAC;AAEzB,8DAAA,9DAAcC;AAEd,GAAA,QAAAC,qCAAAC,kDAAAC,0DAAAC,iEAAAC,yEAAAC,+EAAAC;AAAA;AAAA,AAAA,AAASC,8DAAS,6CAAA,7CAACC;;AAEnB,GAAA,QAAAR,qCAAAC,kDAAAC,0DAAAC,iEAAAC,yEAAAC,+EAAAI;AAAA;AAAA,AAAA,AAASC,mEACP,qBAAA,JAAMC;AAAN,AACE,CAAM,AAAQA,SACR;mCAAOC;AAAP,AACE,iJAAA,mFAAA,7NAACC,0DAAMN,4DAASO,oKAAkBC,iEAAK,AAACC,8CAAMC,cAAIL;;;IAD7CA;;;;EAAAA;;oCAAAA;;;IAAAA;0BAAAA;;;;;;;AAEb,CAAM,AAASD,UACT;mCAAOC;AAAP,AACE,iJAAA,mFAAA,7NAACC,0DAAMN,4DAASO,sKAAmBC,iEAAK,AAACC,8CAAMC,cAAIL;;;IAD9CA;;;;EAAAA;;oCAAAA;;;IAAAA;0BAAAA;;;;;;;AAEbD;;;AAEJ,oEAAA,pEAAMO,gJAAgBC;AAAtB,AACE,+DAAA,9DAAMpB;;AACN,kFAAA,lFAACqB,sBAAOb;;AACR,CAACY,kCAAAA,oCAAAA;;AACD,YAAA,AAAAE,RAAMC,wBAAOf;AAAb,AACE,kFAAA,lFAACa,sBAAOb;;AACR,+DAAA,9DAAMR;;AACNuB","names":["re-frisk.inlined-deps.reagent.v1v0v0.reagent.debug/has-console","js/console","re-frisk.inlined-deps.reagent.v1v0v0.reagent.debug/tracking","js/re-frisk","js/re-frisk.inlined-deps","js/re-frisk.inlined-deps.reagent","js/re-frisk.inlined-deps.reagent.v1v0v0","js/re-frisk.inlined-deps.reagent.v1v0v0.reagent","js/re-frisk.inlined-deps.reagent.v1v0v0.reagent.debug","js/re-frisk.inlined-deps.reagent.v1v0v0.reagent.debug.warnings","re-frisk.inlined-deps.reagent.v1v0v0.reagent.debug/warnings","cljs.core.atom","js/re-frisk.inlined-deps.reagent.v1v0v0.reagent.debug.track-console","re-frisk.inlined-deps.reagent.v1v0v0.reagent.debug/track-console","o","args","cljs.core.swap_BANG_","cljs.core/update-in","cljs.core/conj","cljs.core.apply","cljs.core/str","re-frisk.inlined-deps.reagent.v1v0v0.reagent.debug/track-warnings","f","cljs.core/reset!","cljs.core/deref","warns"],"sourcesContent":["(ns ^{:mranderson/inlined true} re-frisk.inlined-deps.reagent.v1v0v0.reagent.debug\n  (:require-macros [re-frisk.inlined-deps.reagent.v1v0v0.reagent.debug]))\n\n(def ^:const has-console (exists? js/console))\n\n(def ^boolean tracking false)\n\n(defonce warnings (atom nil))\n\n(defonce track-console\n  (let [o #js{}]\n    (set! (.-warn o)\n          (fn [& args]\n            (swap! warnings update-in [:warn] conj (apply str args))))\n    (set! (.-error o)\n          (fn [& args]\n            (swap! warnings update-in [:error] conj (apply str args))))\n    o))\n\n(defn track-warnings [f]\n  (set! tracking true)\n  (reset! warnings nil)\n  (f)\n  (let [warns @warnings]\n    (reset! warnings nil)\n    (set! tracking false)\n    warns))\n"]}