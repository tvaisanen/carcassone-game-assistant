{"version":3,"sources":["game_assistant/views.cljs"],"mappings":"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","names":["game-assistant.views/grid","game-assistant.views/tile-size-n","game-assistant.views/tile-size","game-assistant.views/char-to-color","game-assistant.views/grid-dimensions","dim","size","game-assistant.views/tile","i","t","map__40849","cljs.core/--destructure-map","cljs.core.get","map__40850","map__40851","loc","wireframe","pawns","col","row","x","y","uuid","cljs.core/random-uuid","cljs.core/name","game-assistant.db/tile-size","cljs.core.map_indexed","n","cljs.core.map","p__40852","vec__40853","cljs.core.nth","idx","pawn","js/alert","e","items","cljs.core.prn","js/console","r","re-frame.core/dispatch","cljs.core.keyword","p1__40848#","cljs.core/first","cljs.core.range","game-assistant.views/main-panel","cljs.core/deref","p1__40858#","tiles","re_frame.core.subscribe","tiles-left","cljs.core.reduce","acc","v","used-tiles","tiles-total","current-tile","tilemap","neighbors","pawns-left","show-remaining-tiles?","c-range","js/Math.abs","cljs.core.apply","cljs.core/min","r-range","formatter","js/Intl.NumberFormat","cljs.core/clj->js","tr","view","cljs.core._EQ_","p__40860","map__40861","valid-target?","p1__40856#","cljs.core.merge","fexpr__40862","cljs.core/count","cljs.core.concat","p__40863","map__40864","j","p1__40857#","tile","cljs.core.sort_by","cljs.core/reverse","p1__40859#"],"sourcesContent":["(ns game-assistant.views\n  (:require\n   [re-frame.core :as rf]\n   [game-assistant.db :as db]\n   [game-assistant.utils :as utils]\n   [game-assistant.events :as events]\n   [game-assistant.subs :as subs]))\n\n(def grid 3)\n(def tile-size-n 140)\n(def tile-size (str tile-size-n \"px\"))\n\n(def char-to-color\n  {\\X \"lightgrey\"\n   \\0 \"lightgreen\"\n   \\2 \"grey\"\n   \\3 \"brown\"\n   \\4 \"blue\"})\n\n(defn grid-dimensions [dim, size]\n  (str \"repeat(\" dim \",\" size \")\"))\n\n(defn tile [i t]\n  (let [{:keys [loc wireframe pawns]} t\n        {:keys [col row]}       loc\n        {:keys [x y]}           (:translate t)\n        uuid                    (str (random-uuid))]\n\n    [:div.card {:key   uuid\n                :style {:max-width   tile-size\n                        :width       tile-size\n                        :grid-row    (+ x row)\n                        :grid-column (+ y col)}}\n\n     (when-not wireframe\n       [:img {:style  {:transform (str \"rotate(\" (:rotate t) \"deg)\")}\n              :width  tile-size\n              :height tile-size\n              :src    (str \"/img/\" (-> t :id name) \".jpg\")}])\n\n     (when-not wireframe\n       [:div.is-overlay.has-text-weight-bold\n        ;(str \"(\" (+ x row) \", \"(+ y col) \")\")\n        [:p.pl-2 {:style {:background \"rgba(255,255,255,0.5)\"}}\n         (str \"(\" row \", \" col \")\")]])\n     [:div.is-overlay {:style {:display               \"grid\"\n                               :justify-items         \"center\"\n                               :grid-template-columns (grid-dimensions db/tile-size \"1fr\")\n                               :grid-template-rows    (grid-dimensions db/tile-size \"1fr\")}}\n      (if wireframe\n        (map-indexed (fn [i n] [:div.tile-section\n                                {:key (str uuid \"_\" i)\n                                 :style {:border \"1px dashed rgba(0,0,0,0.3)\"\n                                         :width  \"100%\"\n                                         :background (get char-to-color n)}}\n                                n]) (:tile t))\n        (map (fn [[idx pawn]]\n               (let [pawn (:player pawn)]\n                 [:div.tile-section\n                  {:key      (str uuid \"_\" (:rotate t) idx)\n                   :on-click (fn [] js/alert (str col row  idx))\n                   :on-drop      (fn [e]\n                                   (let [items (.. e -dataTransfer -items)]\n                                     (prn \"on-drop\")\n                                     (.log js/console items)\n                                     (.log js/console (.-length items))\n                                     (.getAsString\n                                      (aget items 0)\n                                      (fn [r]\n                                        (rf/dispatch\n                                         [::events/place-pawn\n                                          {:id (keyword r)\n                                           :idx idx\n                                           :col col\n                                           :row row}])))\n                                     (.preventDefault e)))\n                   :on-drag-over (fn [e]\n                                   (prn \"on-drag-over\")\n                                   (.preventDefault e))\n                   :style    {:border     \"1px dashed rgba(0,0,0,0.3)\"\n                              :width      \"100%\"\n                              :background \"rgba(22,22,22,0.1)\"\n                              }}\n                  (prn pawn)\n                  (when pawn [:span {:on-drag-start #(prn \"start drag: \" (.. % -target))\n                                     :draggable true\n                                     :style {:min-height \"20px\"\n                                             :min-width \"20px\"\n                                             :border-radius \"50%\"\n                                             :cursor \"move\"\n                                             :background (name pawn)}} \"[X]\"])]))\n             (map\n              (fn [idx]\n                [idx (first (get pawns idx))])\n              (range (* db/tile-size db/tile-size)))))]]))\n\n(defn main-panel []\n  (let [tiles                 @(rf/subscribe [::subs/tiles])\n        tiles-left            (reduce\n                      (fn [acc v] (+ acc (:count v)))\n                      0 tiles)\n        used-tiles            @(rf/subscribe [::subs/used-tiles])\n        tiles-total           @(rf/subscribe [::subs/tiles-total])\n        current-tile          @(rf/subscribe [::subs/current-tile])\n        tilemap               @(rf/subscribe [::subs/tilemap])\n        neighbors             @(rf/subscribe [::subs/neighbors])\n        pawns-left            @(rf/subscribe [::subs/pawns-left])\n        show-remaining-tiles? @(rf/subscribe [::subs/show-remaining-tiles?])\n\n        c-range (+ 1 (js/Math.abs (apply min (map :col neighbors))))\n        r-range (+ 1 (js/Math.abs (apply min (map :row neighbors))))\n\n        formatter (js/Intl.NumberFormat.\n                   \"en-US\"\n                   (clj->js {:minimumFractionDigits 2\n                             :maximumFractionDigits 2}))\n        y         (+ 0 r-range)\n        x         (+ 0 c-range)\n        tr        {:y x :x y}\n        view      @(rf/subscribe [::subs/view])]\n    [:div.is-flex.is-flex-direction-column\n     {:style {:justify-content \"center\"\n              :align-items     \"center\"}}\n\n\n     [:nav.tabs [:ul\n                 [:li\n                  [:a {:on-click #(rf/dispatch [::events/toggle-remaining-tiles-visibility])} \"Toggle\"]]\n                 [:li {:class [(when (= view :graphics) \"is-active\")]}\n                  [:a {:on-click #(rf/dispatch [::events/set-view :graphics])} \"Graphics\"]]\n                 [:li {:class [(when (= view :wireframe) \"is-active\")]}\n                  [:a {:on-click #(rf/dispatch [::events/set-view :wireframe])} \"Wireframe\"]]]]\n     (if (= view :graphics)\n       [:div.section.columns.is-align-items-center.p-0.m0\n        [:div.column.card.is-narrow.m-0.p-0\n         {:style {;:overflow              \"scroll\"\n                  :display               \"grid\"\n                  :grid-template-columns (grid-dimensions c-range tile-size)\n                  :grid-template-rows    (grid-dimensions r-range tile-size)\n                  :border                \"1px dashed lightgrey\"}}\n         [:<>\n          (map-indexed\n           (fn [i {:keys [col row valid-target?] :as loc}]\n             [:div {:key      (str i \"_\" col \"_\" row)\n                    :on-click (if valid-target?\n                                #(rf/dispatch [::events/set-current-tile loc])\n                                #(js/alert \"nooot gonna happen\"))\n                    :style    {:max-width     tile-size\n                               :min-width     tile-size\n                               :min-height    tile-size\n                               :width         tile-size\n                               :grid-row      (+ y row)\n                               :grid-column   (+ x col)\n                               :cursor        \"pointer\"\n                               :border-radius \"3px\"\n                               :background    (if valid-target?\n                                                \"rgba(0,244,0,.2)\"\n                                                \"rgba(244,0,0,0.2)\")\n                               :border        \"1px solid black\"\n                                        ;:background    \"rgba(200,200,200,0.3)\"\n                               }}\n              (str \"(\"  row \", \" col \")\")\n              (str \"(\" (+ y row) \", \" (+ x col) \")\")])\n           neighbors)\n\n          (map-indexed tile (map\n                             #(do\n                                (merge % {:prefix    \"_debug\"\n                                          :translate tr\n                                          :tile      ((:id %) tilemap)}))\n                             used-tiles))]\n\n         (comment [:div.is-overlay {:style {:pointer-events \"none\"\n                                            :width          \"100%\"\n                                            :background     \"rgba(0,200,0,0.2)\"}}\n                   (map (fn [row] [:div (str row)]) (utils/tiles-to-graph-grid used-tiles))\n                   ])]\n\n        ]\n\n       [:div.section.columns.is-align-items-center\n        {:style {:overflow \"scroll\"\n                 :border   \"1px solid lightgreen\"}}\n        [:div.column.is-narrow.m-0\n         {:style {:overflow              \"scroll\"\n                  :display               \"grid\"\n                  :grid-template-columns (grid-dimensions c-range tile-size)\n                  :grid-template-rows    (grid-dimensions r-range tile-size)\n                  :border                \"1px solid lightgreen\"}}\n\n         [:<>\n          [:div.block (count (concat used-tiles neighbors))]\n          (map-indexed\n           (fn [i {:keys [col row] :as loc}]\n             [:div.card {:key      (str col \"\" row)\n                         :on-click #(rf/dispatch [::events/set-current-tile loc])\n                         :style    {:max-width     tile-size\n                                    :min-height    tile-size\n                                    :width         tile-size\n                                    :grid-row      (+ y row)\n                                    :grid-column   (+ x col)\n                                    :border-radius \"3px\"\n                                    :border        \"1px solid black\"\n                                    :background    \"rgba(200,200,200,0.3)\"}}\n              [:div.is-overlay {:style {:display               \"grid\"\n                                        :justify-items         \"center\"\n                                        :grid-template-columns (grid-dimensions db/tile-size \"1fr\")\n                                        :grid-template-rows    (grid-dimensions db/tile-size \"1fr\")}}\n\n               (map-indexed (fn [j n] [:div.tile-section.has-text-centered\n                                       {:key      (str j \"_\" i \"_placeholder_\" n)\n                                        :on-click (fn [] js/alert (str col row  n))\n                                        :style    {:border     \"1px dashed rgba(0,0,0,0.3)\"\n                                                   :width      \"100%\"\n                                                   :cursor     \"pointer\"\n                                                   :background (get char-to-color n)}} n]) (if current-tile\n                                                                                             (:tile current-tile)\n                                                                                             (range (* db/tile-size db/tile-size))))]])\n           neighbors)\n\n          (map-indexed tile (map\n                             #(do\n                                (merge % {:translate tr\n                                          :wireframe true\n                                        ;:tile      ((:id %) tilemap)\n                                          }))\n                             used-tiles))]]])\n\n\n\n\n\n     [:div.is-overlay.is-flex.is-flex-direction-column-reverse.px-3.pb-3\n      {:key   \"0ne\"\n       :style {:align-items    \"flex-end\"\n               :position       \"fixed\"\n               :background     \"transparent\"\n               :pointer-events \"none\"\n               }}\n      [:div.columns\n       [:div.column.is-9.is-offset-3\n        [:div.columns.is-mobile\n         {:style {:max-width \"80vw\"\n                  :overflow-x :scroll\n                  :overflow-y :hidden\n                  :pointer-events \"auto\"\n                  :background     \"rgba(255,255,255,0.9)\"\n                  :border         \"1px solid lightgrey\"\n                  :border-radius  3\n                  :transform (if show-remaining-tiles?\n                               \"translate(0, 0)\"\n                               \"translate(0, 100vh)\")}}\n         (->> tiles\n              (map (fn [tile]\n                     (merge\n                      tile\n                      {:prob (* 100 (/ (:count tile) tiles-left))})))\n              (sort-by :prob)\n              reverse\n              (map (fn [tile]\n                     [:div.column.is-one-fifth.p-0.mx-3\n                      {:key (:id tile)}\n                      [:div.card\n                       [:div.is-overlay.p-1\n                        [:p.has-text-weight-bold.tag\n                          (str (.format formatter (:prob tile)) \"%\")]]\n                       [:img\n                        {:on-click\n                         (when-not\n                             (>= 0 (:count tile))\n                           #(rf/dispatch [::events/pick-selected-tile (:id tile)]))\n                         :style {:pointer-events \"auto\"}\n                         :width  tile-size\n                         :height tile-size\n                         :src    (str \"/img/\" (-> tile :id name) \".jpg\")}]]])))]]\n\n\n\n\n       [:div.is-overlay.is-flex.is-flex-direction-column-reverse.px-3.pb-3\n        {:key   \"tw0\"\n         :style {:position       \"fixed\"\n                 :background     \"transparent\"\n                 :pointer-events \"none\"}}\n\n\n        [:div.column.is-2.is-flex.is-flex-direction-column\n         {:style {:background     \"rgba(255,255,255,0.9)\"\n                  :border         \"1px solid lightgrey\"\n                  :border-radius  3\n                  :pointer-events \"auto\"\n                  }}\n         [:div.block.level\n          [:div.buttons\n           [:button.button.is-success\n            {:on-click #(rf/dispatch [::events/pop-tile])}\n            \"pop\"]\n           [:button.button.is-text\n            {:on-click #(rf/dispatch [::events/initialize-db])}\n            \"reset\"]]\n          [:h1 (str (count used-tiles) \"/\" tiles-total)]]\n\n         (when false [:p.has-text-weight-bold (:rotate current-tile) \"-\" (:tile current-tile)])\n         [:div [:img {:width \"100%\" :height \"auto\"\n                      :style {:transform (str \"rotate(\" (:rotate current-tile) \"deg)\")}\n                      :src   (when current-tile (str \"/img/\" (-> current-tile :id name) \".jpg\"))}]\n          [:div.level.buttons\n           [:button.button.is-half\n            {:on-click\n             #(rf/dispatch [::events/rotate-current :left])}\n            \"<\"]\n           [:button.button.is-half\n            {:on-click\n             #(rf/dispatch [::events/rotate-current :right])}\n            \">\"]]]]\n\n        [:div.column.is-2.is-flex.is-flex-direction-column.highlight-on-drag-over\n         {:on-drag-over #(prn (.. % -target))\n          :style\n          {:background     \"rgba(255,255,255,0.9)\"\n           :border         \"1px solid lightgrey\"\n           :border-radius  3\n           :pointer-events \"auto\"\n           }}\n         [:div.block\n          (map #(do [:span {:key           (:id %)\n                            :draggable     true\n                            :on-drag-start (fn [e]\n                                             (.setData\n                                              (.. e -dataTransfer)\n                                              \"text\"\n                                              (name (:id %))))\n                            :data-pawn-id  (:id %)\n                            :style         {:display    \"inline-block\"\n                                            :min-width  \"10px\"\n                                            :min-height \"10px\"\n                                            :font-size  \"2rem\"\n                                            :cursor     :move\n                                            :color      (:player %)}}\n                     \"\\u25CF\"]) pawns-left)]]]]]]))\n"]}