{"version":3,"sources":["re_frisk/inlined_deps/reagent/v1v0v0/reagent/dom.cljs"],"mappings":"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","names":["js/re-frisk","js/re-frisk.inlined-deps","js/re-frisk.inlined-deps.reagent","js/re-frisk.inlined-deps.reagent.v1v0v0","js/re-frisk.inlined-deps.reagent.v1v0v0.reagent","js/re-frisk.inlined-deps.reagent.v1v0v0.reagent.dom","js/re-frisk.inlined-deps.reagent.v1v0v0.reagent.dom.roots","re-frisk.inlined-deps.reagent.v1v0v0.reagent.dom/roots","cljs.core.atom","re-frisk.inlined-deps.reagent.v1v0v0.reagent.dom/unmount-comp","container","cljs.core.swap_BANG_","cljs.core/dissoc","js/module$node_modules$react_dom$index.unmountComponentAtNode","re-frisk.inlined-deps.reagent.v1v0v0.reagent.dom/render-comp","comp","callback","*always-update*-orig-val__32924","*always-update*-temp-val__32925","re-frisk.inlined-deps.reagent.v1v0v0.reagent.impl.util/*always-update*","js/module$node_modules$react_dom$index.render","*always-update*-orig-val__32926","*always-update*-temp-val__32927","cljs.core/assoc","re-frisk.inlined-deps.reagent.v1v0v0.reagent.impl.batching/flush-after-render","re-frisk.inlined-deps.reagent.v1v0v0.reagent.dom/re-render-component","var_args","G__32932","re-frisk.inlined-deps.reagent.v1v0v0.reagent.dom/render","js/Error","re_frisk.inlined_deps.reagent.v1v0v0.reagent.dom.render","re-frisk.inlined-deps.reagent.v1v0v0.reagent.impl.template/default-compiler","callback-or-compiler","re-frisk.inlined-deps.reagent.v1v0v0.reagent.ratom/flush!","vec__32934","cljs.core.nth","compiler","cljs.core/fn?","f","re-frisk.inlined-deps.reagent.v1v0v0.reagent.impl.protocols/as-element","re-frisk.inlined-deps.reagent.v1v0v0.reagent.dom/unmount-component-at-node","re-frisk.inlined-deps.reagent.v1v0v0.reagent.dom/dom-node","this","js/module$node_modules$react_dom$index.findDOMNode","re-frisk.inlined-deps.reagent.v1v0v0.reagent.dom/force-update-all","seq__32939","cljs.core/seq","cljs.core/deref","chunk__32940","count__32941","i__32942","vec__32951","temp__5753__auto__","cljs.core/chunked-seq?","c__4649__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__32954","cljs.core/first","cljs.core/next"],"sourcesContent":["(ns re-frisk.inlined-deps.reagent.v1v0v0.reagent.dom\n  (:require [react-dom :as react-dom]\n            [re-frisk.inlined-deps.reagent.v1v0v0.reagent.impl.util :as util]\n            [re-frisk.inlined-deps.reagent.v1v0v0.reagent.impl.template :as tmpl]\n            [re-frisk.inlined-deps.reagent.v1v0v0.reagent.impl.input :as input]\n            [re-frisk.inlined-deps.reagent.v1v0v0.reagent.impl.batching :as batch]\n            [re-frisk.inlined-deps.reagent.v1v0v0.reagent.impl.protocols :as p]\n            [re-frisk.inlined-deps.reagent.v1v0v0.reagent.ratom :as ratom]))\n\n(defonce ^:private roots (atom {}))\n\n(defn- unmount-comp [container]\n  (swap! roots dissoc container)\n  (react-dom/unmountComponentAtNode container))\n\n(defn- render-comp [comp container callback]\n  (binding [util/*always-update* true]\n    (react-dom/render (comp) container\n      (fn []\n        (binding [util/*always-update* false]\n          (swap! roots assoc container comp)\n          (batch/flush-after-render)\n          (if (some? callback)\n            (callback)))))))\n\n(defn- re-render-component [comp container]\n  (render-comp comp container nil))\n\n(defn render\n  \"Render a Reagent component into the DOM. The first argument may be\n  either a vector (using Reagent's Hiccup syntax), or a React element.\n  The second argument should be a DOM node.\n\n  Optionally takes a callback that is called when the component is in place.\n\n  Returns the mounted component instance.\"\n  ([comp container]\n   (render comp container tmpl/default-compiler))\n  ([comp container callback-or-compiler]\n   (ratom/flush!)\n   (let [[compiler callback] (if (fn? callback-or-compiler)\n                               [tmpl/default-compiler callback-or-compiler]\n                               ;; TODO: Callback option doesn't make sense now that\n                               ;; val is compiler object, not map.\n                               [callback-or-compiler (:callback callback-or-compiler)])\n         f (fn []\n             (p/as-element compiler (if (fn? comp) (comp) comp)))]\n     (render-comp f container callback))))\n\n(defn unmount-component-at-node\n  \"Remove a component from the given DOM node.\"\n  [container]\n  (unmount-comp container))\n\n(defn dom-node\n  \"Returns the root DOM node of a mounted component.\"\n  [this]\n  (react-dom/findDOMNode this))\n\n(defn force-update-all\n  \"Force re-rendering of all mounted Reagent components. This is\n  probably only useful in a development environment, when you want to\n  update components in response to some dynamic changes to code.\n\n  Note that force-update-all may not update root components. This\n  happens if a component 'foo' is mounted with `(render [foo])` (since\n  functions are passed by value, and not by reference, in\n  ClojureScript). To get around this you'll have to introduce a layer\n  of indirection, for example by using `(render [#'foo])` instead.\"\n  []\n  (ratom/flush!)\n  (doseq [[container comp] @roots]\n    (re-render-component comp container))\n  (batch/flush-after-render))\n"]}